/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "centralnodeService_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace HydraCN {


Device::~Device() throw() {
}


void Device::__set_deviceId(const std::string& val) {
  this->deviceId = val;
}

void Device::__set_IPAddress(const std::string& val) {
  this->IPAddress = val;
}

void Device::__set_type(const std::string& val) {
  this->type = val;
}

const char* Device::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t Device::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t Device::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->IPAddress);
          this->__isset.IPAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Device::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Device");

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IPAddress", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->IPAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Device &a, Device &b) {
  using ::std::swap;
  swap(a.deviceId, b.deviceId);
  swap(a.IPAddress, b.IPAddress);
  swap(a.type, b.type);
  swap(a.__isset, b.__isset);
}

Device::Device(const Device& other0) {
  deviceId = other0.deviceId;
  IPAddress = other0.IPAddress;
  type = other0.type;
  __isset = other0.__isset;
}
Device& Device::operator=(const Device& other1) {
  deviceId = other1.deviceId;
  IPAddress = other1.IPAddress;
  type = other1.type;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Device& obj) {
  using apache::thrift::to_string;
  out << "Device(";
  out << "deviceId=" << to_string(obj.deviceId);
  out << ", " << "IPAddress=" << to_string(obj.IPAddress);
  out << ", " << "type=" << to_string(obj.type);
  out << ")";
  return out;
}

} // namespace
