/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef centralnodeService_TYPES_H
#define centralnodeService_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace HydraCN {

class Device;

typedef struct _Device__isset {
  _Device__isset() : deviceId(false), IPAddress(false), type(false) {}
  bool deviceId :1;
  bool IPAddress :1;
  bool type :1;
} _Device__isset;

class Device {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  Device(const Device&);
  Device& operator=(const Device&);
  Device() : deviceId(), IPAddress(), type() {
  }

  virtual ~Device() throw();
  std::string deviceId;
  std::string IPAddress;
  std::string type;

  _Device__isset __isset;

  void __set_deviceId(const std::string& val);

  void __set_IPAddress(const std::string& val);

  void __set_type(const std::string& val);

  bool operator == (const Device & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(IPAddress == rhs.IPAddress))
      return false;
    if (!(type == rhs.type))
      return false;
    return true;
  }
  bool operator != (const Device &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Device& obj);
};

void swap(Device &a, Device &b);

} // namespace

#endif
