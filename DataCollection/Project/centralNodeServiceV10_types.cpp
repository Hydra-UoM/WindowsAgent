/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "centralNodeServiceV10_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace HydraCN {


Device::~Device() throw() {
}


void Device::__set_deviceId(const std::string& val) {
  this->deviceId = val;
}

void Device::__set_IPAddress(const std::string& val) {
  this->IPAddress = val;
}

void Device::__set_port(const std::string& val) {
  this->port = val;
}

void Device::__set_type(const std::string& val) {
  this->type = val;
}

void Device::__set_group(const std::string& val) {
  this->group = val;
}

void Device::__set_name(const std::string& val) {
  this->name = val;
}

const char* Device::ascii_fingerprint = "873CB9E5A4C10A7ECE7476FD192F55EE";
const uint8_t Device::binary_fingerprint[16] = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

uint32_t Device::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->deviceId);
          this->__isset.deviceId = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->IPAddress);
          this->__isset.IPAddress = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->port);
          this->__isset.port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->group);
          this->__isset.group = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Device::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("Device");

  xfer += oprot->writeFieldBegin("deviceId", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->deviceId);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("IPAddress", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->IPAddress);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("port", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("group", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->group);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(Device &a, Device &b) {
  using ::std::swap;
  swap(a.deviceId, b.deviceId);
  swap(a.IPAddress, b.IPAddress);
  swap(a.port, b.port);
  swap(a.type, b.type);
  swap(a.group, b.group);
  swap(a.name, b.name);
  swap(a.__isset, b.__isset);
}

Device::Device(const Device& other0) {
  deviceId = other0.deviceId;
  IPAddress = other0.IPAddress;
  port = other0.port;
  type = other0.type;
  group = other0.group;
  name = other0.name;
  __isset = other0.__isset;
}
Device& Device::operator=(const Device& other1) {
  deviceId = other1.deviceId;
  IPAddress = other1.IPAddress;
  port = other1.port;
  type = other1.type;
  group = other1.group;
  name = other1.name;
  __isset = other1.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const Device& obj) {
  using apache::thrift::to_string;
  out << "Device(";
  out << "deviceId=" << to_string(obj.deviceId);
  out << ", " << "IPAddress=" << to_string(obj.IPAddress);
  out << ", " << "port=" << to_string(obj.port);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "group=" << to_string(obj.group);
  out << ", " << "name=" << to_string(obj.name);
  out << ")";
  return out;
}


ThriftAgentProcessInfo::~ThriftAgentProcessInfo() throw() {
}


void ThriftAgentProcessInfo::__set_name(const std::string& val) {
  this->name = val;
}

void ThriftAgentProcessInfo::__set_packageName(const std::string& val) {
  this->packageName = val;
}

void ThriftAgentProcessInfo::__set_ramUsage(const double val) {
  this->ramUsage = val;
}

void ThriftAgentProcessInfo::__set_cpuUsage(const double val) {
  this->cpuUsage = val;
}

void ThriftAgentProcessInfo::__set_sentData(const double val) {
  this->sentData = val;
}

void ThriftAgentProcessInfo::__set_receiveData(const double val) {
  this->receiveData = val;
}

void ThriftAgentProcessInfo::__set_pid(const std::string& val) {
  this->pid = val;
}

void ThriftAgentProcessInfo::__set_type(const std::string& val) {
  this->type = val;
}

void ThriftAgentProcessInfo::__set_mac(const std::string& val) {
  this->mac = val;
}

void ThriftAgentProcessInfo::__set_timestamp(const std::string& val) {
  this->timestamp = val;
}

void ThriftAgentProcessInfo::__set_URLs(const std::vector<std::string> & val) {
  this->URLs = val;
}

const char* ThriftAgentProcessInfo::ascii_fingerprint = "40456E6D5B67D49BBB9A788AA6949F6F";
const uint8_t ThriftAgentProcessInfo::binary_fingerprint[16] = {0x40,0x45,0x6E,0x6D,0x5B,0x67,0xD4,0x9B,0xBB,0x9A,0x78,0x8A,0xA6,0x94,0x9F,0x6F};

uint32_t ThriftAgentProcessInfo::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          this->__isset.name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->packageName);
          this->__isset.packageName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->ramUsage);
          this->__isset.ramUsage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->cpuUsage);
          this->__isset.cpuUsage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->sentData);
          this->__isset.sentData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_DOUBLE) {
          xfer += iprot->readDouble(this->receiveData);
          this->__isset.receiveData = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->pid);
          this->__isset.pid = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->type);
          this->__isset.type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->timestamp);
          this->__isset.timestamp = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_LIST) {
          {
            this->URLs.clear();
            uint32_t _size2;
            ::apache::thrift::protocol::TType _etype5;
            xfer += iprot->readListBegin(_etype5, _size2);
            this->URLs.resize(_size2);
            uint32_t _i6;
            for (_i6 = 0; _i6 < _size2; ++_i6)
            {
              xfer += iprot->readString(this->URLs[_i6]);
            }
            xfer += iprot->readListEnd();
          }
          this->__isset.URLs = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t ThriftAgentProcessInfo::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("ThriftAgentProcessInfo");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("packageName", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->packageName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ramUsage", ::apache::thrift::protocol::T_DOUBLE, 3);
  xfer += oprot->writeDouble(this->ramUsage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("cpuUsage", ::apache::thrift::protocol::T_DOUBLE, 4);
  xfer += oprot->writeDouble(this->cpuUsage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("sentData", ::apache::thrift::protocol::T_DOUBLE, 5);
  xfer += oprot->writeDouble(this->sentData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("receiveData", ::apache::thrift::protocol::T_DOUBLE, 6);
  xfer += oprot->writeDouble(this->receiveData);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("pid", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->pid);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("type", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("timestamp", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->timestamp);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("URLs", ::apache::thrift::protocol::T_LIST, 11);
  {
    xfer += oprot->writeListBegin(::apache::thrift::protocol::T_STRING, static_cast<uint32_t>(this->URLs.size()));
    std::vector<std::string> ::const_iterator _iter7;
    for (_iter7 = this->URLs.begin(); _iter7 != this->URLs.end(); ++_iter7)
    {
      xfer += oprot->writeString((*_iter7));
    }
    xfer += oprot->writeListEnd();
  }
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(ThriftAgentProcessInfo &a, ThriftAgentProcessInfo &b) {
  using ::std::swap;
  swap(a.name, b.name);
  swap(a.packageName, b.packageName);
  swap(a.ramUsage, b.ramUsage);
  swap(a.cpuUsage, b.cpuUsage);
  swap(a.sentData, b.sentData);
  swap(a.receiveData, b.receiveData);
  swap(a.pid, b.pid);
  swap(a.type, b.type);
  swap(a.mac, b.mac);
  swap(a.timestamp, b.timestamp);
  swap(a.URLs, b.URLs);
  swap(a.__isset, b.__isset);
}

ThriftAgentProcessInfo::ThriftAgentProcessInfo(const ThriftAgentProcessInfo& other8) {
  name = other8.name;
  packageName = other8.packageName;
  ramUsage = other8.ramUsage;
  cpuUsage = other8.cpuUsage;
  sentData = other8.sentData;
  receiveData = other8.receiveData;
  pid = other8.pid;
  type = other8.type;
  mac = other8.mac;
  timestamp = other8.timestamp;
  URLs = other8.URLs;
  __isset = other8.__isset;
}
ThriftAgentProcessInfo& ThriftAgentProcessInfo::operator=(const ThriftAgentProcessInfo& other9) {
  name = other9.name;
  packageName = other9.packageName;
  ramUsage = other9.ramUsage;
  cpuUsage = other9.cpuUsage;
  sentData = other9.sentData;
  receiveData = other9.receiveData;
  pid = other9.pid;
  type = other9.type;
  mac = other9.mac;
  timestamp = other9.timestamp;
  URLs = other9.URLs;
  __isset = other9.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const ThriftAgentProcessInfo& obj) {
  using apache::thrift::to_string;
  out << "ThriftAgentProcessInfo(";
  out << "name=" << to_string(obj.name);
  out << ", " << "packageName=" << to_string(obj.packageName);
  out << ", " << "ramUsage=" << to_string(obj.ramUsage);
  out << ", " << "cpuUsage=" << to_string(obj.cpuUsage);
  out << ", " << "sentData=" << to_string(obj.sentData);
  out << ", " << "receiveData=" << to_string(obj.receiveData);
  out << ", " << "pid=" << to_string(obj.pid);
  out << ", " << "type=" << to_string(obj.type);
  out << ", " << "mac=" << to_string(obj.mac);
  out << ", " << "timestamp=" << to_string(obj.timestamp);
  out << ", " << "URLs=" << to_string(obj.URLs);
  out << ")";
  return out;
}


myUserAccountDetailsStruct::~myUserAccountDetailsStruct() throw() {
}


void myUserAccountDetailsStruct::__set_computerName(const std::string& val) {
  this->computerName = val;
}

void myUserAccountDetailsStruct::__set_usri4_name(const std::string& val) {
  this->usri4_name = val;
}

void myUserAccountDetailsStruct::__set_usri4_password_age(const std::string& val) {
  this->usri4_password_age = val;
}

void myUserAccountDetailsStruct::__set_usri4_priv(const std::string& val) {
  this->usri4_priv = val;
}

void myUserAccountDetailsStruct::__set_usri4_flags(const std::string& val) {
  this->usri4_flags = val;
}

void myUserAccountDetailsStruct::__set_usri4_usr_comment(const std::string& val) {
  this->usri4_usr_comment = val;
}

void myUserAccountDetailsStruct::__set_usri4_parms(const std::string& val) {
  this->usri4_parms = val;
}

void myUserAccountDetailsStruct::__set_usri4_last_logon(const std::string& val) {
  this->usri4_last_logon = val;
}

void myUserAccountDetailsStruct::__set_usri4_last_logoff(const std::string& val) {
  this->usri4_last_logoff = val;
}

void myUserAccountDetailsStruct::__set_usri4_acct_expires(const std::string& val) {
  this->usri4_acct_expires = val;
}

void myUserAccountDetailsStruct::__set_usri4_max_storage(const std::string& val) {
  this->usri4_max_storage = val;
}

void myUserAccountDetailsStruct::__set_usri4_units_per_week(const std::string& val) {
  this->usri4_units_per_week = val;
}

void myUserAccountDetailsStruct::__set_usri4_logon_hours(const std::string& val) {
  this->usri4_logon_hours = val;
}

void myUserAccountDetailsStruct::__set_usri4_bad_pw_count(const std::string& val) {
  this->usri4_bad_pw_count = val;
}

void myUserAccountDetailsStruct::__set_usri4_num_logons(const std::string& val) {
  this->usri4_num_logons = val;
}

void myUserAccountDetailsStruct::__set_usri4_country_code(const std::string& val) {
  this->usri4_country_code = val;
}

void myUserAccountDetailsStruct::__set_usri4_code_page(const std::string& val) {
  this->usri4_code_page = val;
}

void myUserAccountDetailsStruct::__set_usri4_primary_group_id(const std::string& val) {
  this->usri4_primary_group_id = val;
}

void myUserAccountDetailsStruct::__set_usri4_profile(const std::string& val) {
  this->usri4_profile = val;
}

void myUserAccountDetailsStruct::__set_usri4_password_expired(const std::string& val) {
  this->usri4_password_expired = val;
}

void myUserAccountDetailsStruct::__set_usri4_auth_flags(const std::string& val) {
  this->usri4_auth_flags = val;
}

void myUserAccountDetailsStruct::__set_mac(const std::string& val) {
  this->mac = val;
}

const char* myUserAccountDetailsStruct::ascii_fingerprint = "718995DDEEB51481B32A298AFBFBF8DC";
const uint8_t myUserAccountDetailsStruct::binary_fingerprint[16] = {0x71,0x89,0x95,0xDD,0xEE,0xB5,0x14,0x81,0xB3,0x2A,0x29,0x8A,0xFB,0xFB,0xF8,0xDC};

uint32_t myUserAccountDetailsStruct::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->computerName);
          this->__isset.computerName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_name);
          this->__isset.usri4_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_password_age);
          this->__isset.usri4_password_age = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_priv);
          this->__isset.usri4_priv = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_flags);
          this->__isset.usri4_flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_usr_comment);
          this->__isset.usri4_usr_comment = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_parms);
          this->__isset.usri4_parms = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_last_logon);
          this->__isset.usri4_last_logon = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_last_logoff);
          this->__isset.usri4_last_logoff = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_acct_expires);
          this->__isset.usri4_acct_expires = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_max_storage);
          this->__isset.usri4_max_storage = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_units_per_week);
          this->__isset.usri4_units_per_week = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_logon_hours);
          this->__isset.usri4_logon_hours = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_bad_pw_count);
          this->__isset.usri4_bad_pw_count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_num_logons);
          this->__isset.usri4_num_logons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_country_code);
          this->__isset.usri4_country_code = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_code_page);
          this->__isset.usri4_code_page = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_primary_group_id);
          this->__isset.usri4_primary_group_id = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_profile);
          this->__isset.usri4_profile = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_password_expired);
          this->__isset.usri4_password_expired = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->usri4_auth_flags);
          this->__isset.usri4_auth_flags = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myUserAccountDetailsStruct::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myUserAccountDetailsStruct");

  xfer += oprot->writeFieldBegin("computerName", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->computerName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->usri4_name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_password_age", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->usri4_password_age);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_priv", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->usri4_priv);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_flags", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->usri4_flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_usr_comment", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->usri4_usr_comment);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_parms", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->usri4_parms);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_last_logon", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->usri4_last_logon);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_last_logoff", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->usri4_last_logoff);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_acct_expires", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->usri4_acct_expires);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_max_storage", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->usri4_max_storage);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_units_per_week", ::apache::thrift::protocol::T_STRING, 12);
  xfer += oprot->writeString(this->usri4_units_per_week);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_logon_hours", ::apache::thrift::protocol::T_STRING, 13);
  xfer += oprot->writeString(this->usri4_logon_hours);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_bad_pw_count", ::apache::thrift::protocol::T_STRING, 14);
  xfer += oprot->writeString(this->usri4_bad_pw_count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_num_logons", ::apache::thrift::protocol::T_STRING, 15);
  xfer += oprot->writeString(this->usri4_num_logons);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_country_code", ::apache::thrift::protocol::T_STRING, 16);
  xfer += oprot->writeString(this->usri4_country_code);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_code_page", ::apache::thrift::protocol::T_STRING, 17);
  xfer += oprot->writeString(this->usri4_code_page);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_primary_group_id", ::apache::thrift::protocol::T_STRING, 18);
  xfer += oprot->writeString(this->usri4_primary_group_id);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_profile", ::apache::thrift::protocol::T_STRING, 19);
  xfer += oprot->writeString(this->usri4_profile);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_password_expired", ::apache::thrift::protocol::T_STRING, 20);
  xfer += oprot->writeString(this->usri4_password_expired);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("usri4_auth_flags", ::apache::thrift::protocol::T_STRING, 21);
  xfer += oprot->writeString(this->usri4_auth_flags);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 22);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myUserAccountDetailsStruct &a, myUserAccountDetailsStruct &b) {
  using ::std::swap;
  swap(a.computerName, b.computerName);
  swap(a.usri4_name, b.usri4_name);
  swap(a.usri4_password_age, b.usri4_password_age);
  swap(a.usri4_priv, b.usri4_priv);
  swap(a.usri4_flags, b.usri4_flags);
  swap(a.usri4_usr_comment, b.usri4_usr_comment);
  swap(a.usri4_parms, b.usri4_parms);
  swap(a.usri4_last_logon, b.usri4_last_logon);
  swap(a.usri4_last_logoff, b.usri4_last_logoff);
  swap(a.usri4_acct_expires, b.usri4_acct_expires);
  swap(a.usri4_max_storage, b.usri4_max_storage);
  swap(a.usri4_units_per_week, b.usri4_units_per_week);
  swap(a.usri4_logon_hours, b.usri4_logon_hours);
  swap(a.usri4_bad_pw_count, b.usri4_bad_pw_count);
  swap(a.usri4_num_logons, b.usri4_num_logons);
  swap(a.usri4_country_code, b.usri4_country_code);
  swap(a.usri4_code_page, b.usri4_code_page);
  swap(a.usri4_primary_group_id, b.usri4_primary_group_id);
  swap(a.usri4_profile, b.usri4_profile);
  swap(a.usri4_password_expired, b.usri4_password_expired);
  swap(a.usri4_auth_flags, b.usri4_auth_flags);
  swap(a.mac, b.mac);
  swap(a.__isset, b.__isset);
}

myUserAccountDetailsStruct::myUserAccountDetailsStruct(const myUserAccountDetailsStruct& other10) {
  computerName = other10.computerName;
  usri4_name = other10.usri4_name;
  usri4_password_age = other10.usri4_password_age;
  usri4_priv = other10.usri4_priv;
  usri4_flags = other10.usri4_flags;
  usri4_usr_comment = other10.usri4_usr_comment;
  usri4_parms = other10.usri4_parms;
  usri4_last_logon = other10.usri4_last_logon;
  usri4_last_logoff = other10.usri4_last_logoff;
  usri4_acct_expires = other10.usri4_acct_expires;
  usri4_max_storage = other10.usri4_max_storage;
  usri4_units_per_week = other10.usri4_units_per_week;
  usri4_logon_hours = other10.usri4_logon_hours;
  usri4_bad_pw_count = other10.usri4_bad_pw_count;
  usri4_num_logons = other10.usri4_num_logons;
  usri4_country_code = other10.usri4_country_code;
  usri4_code_page = other10.usri4_code_page;
  usri4_primary_group_id = other10.usri4_primary_group_id;
  usri4_profile = other10.usri4_profile;
  usri4_password_expired = other10.usri4_password_expired;
  usri4_auth_flags = other10.usri4_auth_flags;
  mac = other10.mac;
  __isset = other10.__isset;
}
myUserAccountDetailsStruct& myUserAccountDetailsStruct::operator=(const myUserAccountDetailsStruct& other11) {
  computerName = other11.computerName;
  usri4_name = other11.usri4_name;
  usri4_password_age = other11.usri4_password_age;
  usri4_priv = other11.usri4_priv;
  usri4_flags = other11.usri4_flags;
  usri4_usr_comment = other11.usri4_usr_comment;
  usri4_parms = other11.usri4_parms;
  usri4_last_logon = other11.usri4_last_logon;
  usri4_last_logoff = other11.usri4_last_logoff;
  usri4_acct_expires = other11.usri4_acct_expires;
  usri4_max_storage = other11.usri4_max_storage;
  usri4_units_per_week = other11.usri4_units_per_week;
  usri4_logon_hours = other11.usri4_logon_hours;
  usri4_bad_pw_count = other11.usri4_bad_pw_count;
  usri4_num_logons = other11.usri4_num_logons;
  usri4_country_code = other11.usri4_country_code;
  usri4_code_page = other11.usri4_code_page;
  usri4_primary_group_id = other11.usri4_primary_group_id;
  usri4_profile = other11.usri4_profile;
  usri4_password_expired = other11.usri4_password_expired;
  usri4_auth_flags = other11.usri4_auth_flags;
  mac = other11.mac;
  __isset = other11.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myUserAccountDetailsStruct& obj) {
  using apache::thrift::to_string;
  out << "myUserAccountDetailsStruct(";
  out << "computerName=" << to_string(obj.computerName);
  out << ", " << "usri4_name=" << to_string(obj.usri4_name);
  out << ", " << "usri4_password_age=" << to_string(obj.usri4_password_age);
  out << ", " << "usri4_priv=" << to_string(obj.usri4_priv);
  out << ", " << "usri4_flags=" << to_string(obj.usri4_flags);
  out << ", " << "usri4_usr_comment=" << to_string(obj.usri4_usr_comment);
  out << ", " << "usri4_parms=" << to_string(obj.usri4_parms);
  out << ", " << "usri4_last_logon=" << to_string(obj.usri4_last_logon);
  out << ", " << "usri4_last_logoff=" << to_string(obj.usri4_last_logoff);
  out << ", " << "usri4_acct_expires=" << to_string(obj.usri4_acct_expires);
  out << ", " << "usri4_max_storage=" << to_string(obj.usri4_max_storage);
  out << ", " << "usri4_units_per_week=" << to_string(obj.usri4_units_per_week);
  out << ", " << "usri4_logon_hours=" << to_string(obj.usri4_logon_hours);
  out << ", " << "usri4_bad_pw_count=" << to_string(obj.usri4_bad_pw_count);
  out << ", " << "usri4_num_logons=" << to_string(obj.usri4_num_logons);
  out << ", " << "usri4_country_code=" << to_string(obj.usri4_country_code);
  out << ", " << "usri4_code_page=" << to_string(obj.usri4_code_page);
  out << ", " << "usri4_primary_group_id=" << to_string(obj.usri4_primary_group_id);
  out << ", " << "usri4_profile=" << to_string(obj.usri4_profile);
  out << ", " << "usri4_password_expired=" << to_string(obj.usri4_password_expired);
  out << ", " << "usri4_auth_flags=" << to_string(obj.usri4_auth_flags);
  out << ", " << "mac=" << to_string(obj.mac);
  out << ")";
  return out;
}


myRuleInformation::~myRuleInformation() throw() {
}


void myRuleInformation::__set_ID(const std::string& val) {
  this->ID = val;
}

void myRuleInformation::__set_Name(const std::string& val) {
  this->Name = val;
}

const char* myRuleInformation::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t myRuleInformation::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t myRuleInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->ID);
          this->__isset.ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Name);
          this->__isset.Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myRuleInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myRuleInformation");

  xfer += oprot->writeFieldBegin("ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myRuleInformation &a, myRuleInformation &b) {
  using ::std::swap;
  swap(a.ID, b.ID);
  swap(a.Name, b.Name);
  swap(a.__isset, b.__isset);
}

myRuleInformation::myRuleInformation(const myRuleInformation& other12) {
  ID = other12.ID;
  Name = other12.Name;
  __isset = other12.__isset;
}
myRuleInformation& myRuleInformation::operator=(const myRuleInformation& other13) {
  ID = other13.ID;
  Name = other13.Name;
  __isset = other13.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myRuleInformation& obj) {
  using apache::thrift::to_string;
  out << "myRuleInformation(";
  out << "ID=" << to_string(obj.ID);
  out << ", " << "Name=" << to_string(obj.Name);
  out << ")";
  return out;
}


mySubject::~mySubject() throw() {
}


void mySubject::__set_Security_ID(const std::string& val) {
  this->Security_ID = val;
}

void mySubject::__set_Account_Name(const std::string& val) {
  this->Account_Name = val;
}

void mySubject::__set_Account_Domain(const std::string& val) {
  this->Account_Domain = val;
}

void mySubject::__set_Logon_ID(const std::string& val) {
  this->Logon_ID = val;
}

const char* mySubject::ascii_fingerprint = "C93D890311F28844166CF6E571EB3AC2";
const uint8_t mySubject::binary_fingerprint[16] = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

uint32_t mySubject::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Security_ID);
          this->__isset.Security_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Account_Name);
          this->__isset.Account_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Account_Domain);
          this->__isset.Account_Domain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Logon_ID);
          this->__isset.Logon_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t mySubject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("mySubject");

  xfer += oprot->writeFieldBegin("Security_ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Security_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Account_Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Account_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Account_Domain", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Account_Domain);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Logon_ID", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Logon_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(mySubject &a, mySubject &b) {
  using ::std::swap;
  swap(a.Security_ID, b.Security_ID);
  swap(a.Account_Name, b.Account_Name);
  swap(a.Account_Domain, b.Account_Domain);
  swap(a.Logon_ID, b.Logon_ID);
  swap(a.__isset, b.__isset);
}

mySubject::mySubject(const mySubject& other14) {
  Security_ID = other14.Security_ID;
  Account_Name = other14.Account_Name;
  Account_Domain = other14.Account_Domain;
  Logon_ID = other14.Logon_ID;
  __isset = other14.__isset;
}
mySubject& mySubject::operator=(const mySubject& other15) {
  Security_ID = other15.Security_ID;
  Account_Name = other15.Account_Name;
  Account_Domain = other15.Account_Domain;
  Logon_ID = other15.Logon_ID;
  __isset = other15.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const mySubject& obj) {
  using apache::thrift::to_string;
  out << "mySubject(";
  out << "Security_ID=" << to_string(obj.Security_ID);
  out << ", " << "Account_Name=" << to_string(obj.Account_Name);
  out << ", " << "Account_Domain=" << to_string(obj.Account_Domain);
  out << ", " << "Logon_ID=" << to_string(obj.Logon_ID);
  out << ")";
  return out;
}


myProviderInformation::~myProviderInformation() throw() {
}


void myProviderInformation::__set_Provider_ID(const std::string& val) {
  this->Provider_ID = val;
}

void myProviderInformation::__set_Provider_Name(const std::string& val) {
  this->Provider_Name = val;
}

const char* myProviderInformation::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t myProviderInformation::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t myProviderInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Provider_ID);
          this->__isset.Provider_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Provider_Name);
          this->__isset.Provider_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myProviderInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myProviderInformation");

  xfer += oprot->writeFieldBegin("Provider_ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Provider_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Provider_Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Provider_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myProviderInformation &a, myProviderInformation &b) {
  using ::std::swap;
  swap(a.Provider_ID, b.Provider_ID);
  swap(a.Provider_Name, b.Provider_Name);
  swap(a.__isset, b.__isset);
}

myProviderInformation::myProviderInformation(const myProviderInformation& other16) {
  Provider_ID = other16.Provider_ID;
  Provider_Name = other16.Provider_Name;
  __isset = other16.__isset;
}
myProviderInformation& myProviderInformation::operator=(const myProviderInformation& other17) {
  Provider_ID = other17.Provider_ID;
  Provider_Name = other17.Provider_Name;
  __isset = other17.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myProviderInformation& obj) {
  using apache::thrift::to_string;
  out << "myProviderInformation(";
  out << "Provider_ID=" << to_string(obj.Provider_ID);
  out << ", " << "Provider_Name=" << to_string(obj.Provider_Name);
  out << ")";
  return out;
}


myObject::~myObject() throw() {
}


void myObject::__set_Object_Server(const std::string& val) {
  this->Object_Server = val;
}

void myObject::__set_Object_Type(const std::string& val) {
  this->Object_Type = val;
}

void myObject::__set_Object_Name(const std::string& val) {
  this->Object_Name = val;
}

void myObject::__set_Handle_ID(const std::string& val) {
  this->Handle_ID = val;
}

void myObject::__set_Resource_Attributes(const std::string& val) {
  this->Resource_Attributes = val;
}

const char* myObject::ascii_fingerprint = "BFF0E21728CB005F9AA5774A41542B8D";
const uint8_t myObject::binary_fingerprint[16] = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

uint32_t myObject::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Object_Server);
          this->__isset.Object_Server = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Object_Type);
          this->__isset.Object_Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Object_Name);
          this->__isset.Object_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Handle_ID);
          this->__isset.Handle_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Resource_Attributes);
          this->__isset.Resource_Attributes = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myObject::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myObject");

  xfer += oprot->writeFieldBegin("Object_Server", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Object_Server);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Object_Type", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Object_Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Object_Name", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Object_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Handle_ID", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Handle_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Resource_Attributes", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Resource_Attributes);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myObject &a, myObject &b) {
  using ::std::swap;
  swap(a.Object_Server, b.Object_Server);
  swap(a.Object_Type, b.Object_Type);
  swap(a.Object_Name, b.Object_Name);
  swap(a.Handle_ID, b.Handle_ID);
  swap(a.Resource_Attributes, b.Resource_Attributes);
  swap(a.__isset, b.__isset);
}

myObject::myObject(const myObject& other18) {
  Object_Server = other18.Object_Server;
  Object_Type = other18.Object_Type;
  Object_Name = other18.Object_Name;
  Handle_ID = other18.Handle_ID;
  Resource_Attributes = other18.Resource_Attributes;
  __isset = other18.__isset;
}
myObject& myObject::operator=(const myObject& other19) {
  Object_Server = other19.Object_Server;
  Object_Type = other19.Object_Type;
  Object_Name = other19.Object_Name;
  Handle_ID = other19.Handle_ID;
  Resource_Attributes = other19.Resource_Attributes;
  __isset = other19.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myObject& obj) {
  using apache::thrift::to_string;
  out << "myObject(";
  out << "Object_Server=" << to_string(obj.Object_Server);
  out << ", " << "Object_Type=" << to_string(obj.Object_Type);
  out << ", " << "Object_Name=" << to_string(obj.Object_Name);
  out << ", " << "Handle_ID=" << to_string(obj.Handle_ID);
  out << ", " << "Resource_Attributes=" << to_string(obj.Resource_Attributes);
  out << ")";
  return out;
}


myProcessInformation::~myProcessInformation() throw() {
}


void myProcessInformation::__set_Process_ID(const std::string& val) {
  this->Process_ID = val;
}

void myProcessInformation::__set_Process_Name(const std::string& val) {
  this->Process_Name = val;
}

const char* myProcessInformation::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t myProcessInformation::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t myProcessInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Process_ID);
          this->__isset.Process_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Process_Name);
          this->__isset.Process_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myProcessInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myProcessInformation");

  xfer += oprot->writeFieldBegin("Process_ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Process_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Process_Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Process_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myProcessInformation &a, myProcessInformation &b) {
  using ::std::swap;
  swap(a.Process_ID, b.Process_ID);
  swap(a.Process_Name, b.Process_Name);
  swap(a.__isset, b.__isset);
}

myProcessInformation::myProcessInformation(const myProcessInformation& other20) {
  Process_ID = other20.Process_ID;
  Process_Name = other20.Process_Name;
  __isset = other20.__isset;
}
myProcessInformation& myProcessInformation::operator=(const myProcessInformation& other21) {
  Process_ID = other21.Process_ID;
  Process_Name = other21.Process_Name;
  __isset = other21.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myProcessInformation& obj) {
  using apache::thrift::to_string;
  out << "myProcessInformation(";
  out << "Process_ID=" << to_string(obj.Process_ID);
  out << ", " << "Process_Name=" << to_string(obj.Process_Name);
  out << ")";
  return out;
}


myNewLogon::~myNewLogon() throw() {
}


void myNewLogon::__set_Security_ID(const std::string& val) {
  this->Security_ID = val;
}

void myNewLogon::__set_Account_Name(const std::string& val) {
  this->Account_Name = val;
}

void myNewLogon::__set_Account_Domain(const std::string& val) {
  this->Account_Domain = val;
}

void myNewLogon::__set_Logon_ID(const std::string& val) {
  this->Logon_ID = val;
}

void myNewLogon::__set_Logon_GUID(const std::string& val) {
  this->Logon_GUID = val;
}

const char* myNewLogon::ascii_fingerprint = "BFF0E21728CB005F9AA5774A41542B8D";
const uint8_t myNewLogon::binary_fingerprint[16] = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

uint32_t myNewLogon::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Security_ID);
          this->__isset.Security_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Account_Name);
          this->__isset.Account_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Account_Domain);
          this->__isset.Account_Domain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Logon_ID);
          this->__isset.Logon_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Logon_GUID);
          this->__isset.Logon_GUID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myNewLogon::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myNewLogon");

  xfer += oprot->writeFieldBegin("Security_ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Security_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Account_Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Account_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Account_Domain", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Account_Domain);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Logon_ID", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Logon_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Logon_GUID", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Logon_GUID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myNewLogon &a, myNewLogon &b) {
  using ::std::swap;
  swap(a.Security_ID, b.Security_ID);
  swap(a.Account_Name, b.Account_Name);
  swap(a.Account_Domain, b.Account_Domain);
  swap(a.Logon_ID, b.Logon_ID);
  swap(a.Logon_GUID, b.Logon_GUID);
  swap(a.__isset, b.__isset);
}

myNewLogon::myNewLogon(const myNewLogon& other22) {
  Security_ID = other22.Security_ID;
  Account_Name = other22.Account_Name;
  Account_Domain = other22.Account_Domain;
  Logon_ID = other22.Logon_ID;
  Logon_GUID = other22.Logon_GUID;
  __isset = other22.__isset;
}
myNewLogon& myNewLogon::operator=(const myNewLogon& other23) {
  Security_ID = other23.Security_ID;
  Account_Name = other23.Account_Name;
  Account_Domain = other23.Account_Domain;
  Logon_ID = other23.Logon_ID;
  Logon_GUID = other23.Logon_GUID;
  __isset = other23.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myNewLogon& obj) {
  using apache::thrift::to_string;
  out << "myNewLogon(";
  out << "Security_ID=" << to_string(obj.Security_ID);
  out << ", " << "Account_Name=" << to_string(obj.Account_Name);
  out << ", " << "Account_Domain=" << to_string(obj.Account_Domain);
  out << ", " << "Logon_ID=" << to_string(obj.Logon_ID);
  out << ", " << "Logon_GUID=" << to_string(obj.Logon_GUID);
  out << ")";
  return out;
}


myNetworkInformation::~myNetworkInformation() throw() {
}


void myNetworkInformation::__set_Direction(const std::string& val) {
  this->Direction = val;
}

void myNetworkInformation::__set_Source_Address(const std::string& val) {
  this->Source_Address = val;
}

void myNetworkInformation::__set_Source_Port(const std::string& val) {
  this->Source_Port = val;
}

void myNetworkInformation::__set_Destination_Address(const std::string& val) {
  this->Destination_Address = val;
}

void myNetworkInformation::__set_Destination_Port(const std::string& val) {
  this->Destination_Port = val;
}

void myNetworkInformation::__set_Protocol(const std::string& val) {
  this->Protocol = val;
}

void myNetworkInformation::__set_Workstation_Name(const std::string& val) {
  this->Workstation_Name = val;
}

const char* myNetworkInformation::ascii_fingerprint = "5DA595EAE7ECCE4D6C8D61AD15427AFF";
const uint8_t myNetworkInformation::binary_fingerprint[16] = {0x5D,0xA5,0x95,0xEA,0xE7,0xEC,0xCE,0x4D,0x6C,0x8D,0x61,0xAD,0x15,0x42,0x7A,0xFF};

uint32_t myNetworkInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Direction);
          this->__isset.Direction = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Source_Address);
          this->__isset.Source_Address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Source_Port);
          this->__isset.Source_Port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Destination_Address);
          this->__isset.Destination_Address = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Destination_Port);
          this->__isset.Destination_Port = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Protocol);
          this->__isset.Protocol = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Workstation_Name);
          this->__isset.Workstation_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myNetworkInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myNetworkInformation");

  xfer += oprot->writeFieldBegin("Direction", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Direction);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source_Address", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Source_Address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Source_Port", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Source_Port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Destination_Address", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Destination_Address);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Destination_Port", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Destination_Port);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Protocol", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Protocol);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Workstation_Name", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->Workstation_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myNetworkInformation &a, myNetworkInformation &b) {
  using ::std::swap;
  swap(a.Direction, b.Direction);
  swap(a.Source_Address, b.Source_Address);
  swap(a.Source_Port, b.Source_Port);
  swap(a.Destination_Address, b.Destination_Address);
  swap(a.Destination_Port, b.Destination_Port);
  swap(a.Protocol, b.Protocol);
  swap(a.Workstation_Name, b.Workstation_Name);
  swap(a.__isset, b.__isset);
}

myNetworkInformation::myNetworkInformation(const myNetworkInformation& other24) {
  Direction = other24.Direction;
  Source_Address = other24.Source_Address;
  Source_Port = other24.Source_Port;
  Destination_Address = other24.Destination_Address;
  Destination_Port = other24.Destination_Port;
  Protocol = other24.Protocol;
  Workstation_Name = other24.Workstation_Name;
  __isset = other24.__isset;
}
myNetworkInformation& myNetworkInformation::operator=(const myNetworkInformation& other25) {
  Direction = other25.Direction;
  Source_Address = other25.Source_Address;
  Source_Port = other25.Source_Port;
  Destination_Address = other25.Destination_Address;
  Destination_Port = other25.Destination_Port;
  Protocol = other25.Protocol;
  Workstation_Name = other25.Workstation_Name;
  __isset = other25.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myNetworkInformation& obj) {
  using apache::thrift::to_string;
  out << "myNetworkInformation(";
  out << "Direction=" << to_string(obj.Direction);
  out << ", " << "Source_Address=" << to_string(obj.Source_Address);
  out << ", " << "Source_Port=" << to_string(obj.Source_Port);
  out << ", " << "Destination_Address=" << to_string(obj.Destination_Address);
  out << ", " << "Destination_Port=" << to_string(obj.Destination_Port);
  out << ", " << "Protocol=" << to_string(obj.Protocol);
  out << ", " << "Workstation_Name=" << to_string(obj.Workstation_Name);
  out << ")";
  return out;
}


myLogonType::~myLogonType() throw() {
}


void myLogonType::__set_Logon_Type(const std::string& val) {
  this->Logon_Type = val;
}

const char* myLogonType::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t myLogonType::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t myLogonType::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Logon_Type);
          this->__isset.Logon_Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myLogonType::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myLogonType");

  xfer += oprot->writeFieldBegin("Logon_Type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Logon_Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myLogonType &a, myLogonType &b) {
  using ::std::swap;
  swap(a.Logon_Type, b.Logon_Type);
  swap(a.__isset, b.__isset);
}

myLogonType::myLogonType(const myLogonType& other26) {
  Logon_Type = other26.Logon_Type;
  __isset = other26.__isset;
}
myLogonType& myLogonType::operator=(const myLogonType& other27) {
  Logon_Type = other27.Logon_Type;
  __isset = other27.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myLogonType& obj) {
  using apache::thrift::to_string;
  out << "myLogonType(";
  out << "Logon_Type=" << to_string(obj.Logon_Type);
  out << ")";
  return out;
}


myLayerInformation::~myLayerInformation() throw() {
}


void myLayerInformation::__set_Layer_ID(const std::string& val) {
  this->Layer_ID = val;
}

void myLayerInformation::__set_Layer_Name(const std::string& val) {
  this->Layer_Name = val;
}

void myLayerInformation::__set_Layer_Runtime_ID(const std::string& val) {
  this->Layer_Runtime_ID = val;
}

const char* myLayerInformation::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t myLayerInformation::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t myLayerInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Layer_ID);
          this->__isset.Layer_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Layer_Name);
          this->__isset.Layer_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Layer_Runtime_ID);
          this->__isset.Layer_Runtime_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myLayerInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myLayerInformation");

  xfer += oprot->writeFieldBegin("Layer_ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Layer_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Layer_Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Layer_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Layer_Runtime_ID", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Layer_Runtime_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myLayerInformation &a, myLayerInformation &b) {
  using ::std::swap;
  swap(a.Layer_ID, b.Layer_ID);
  swap(a.Layer_Name, b.Layer_Name);
  swap(a.Layer_Runtime_ID, b.Layer_Runtime_ID);
  swap(a.__isset, b.__isset);
}

myLayerInformation::myLayerInformation(const myLayerInformation& other28) {
  Layer_ID = other28.Layer_ID;
  Layer_Name = other28.Layer_Name;
  Layer_Runtime_ID = other28.Layer_Runtime_ID;
  __isset = other28.__isset;
}
myLayerInformation& myLayerInformation::operator=(const myLayerInformation& other29) {
  Layer_ID = other29.Layer_ID;
  Layer_Name = other29.Layer_Name;
  Layer_Runtime_ID = other29.Layer_Runtime_ID;
  __isset = other29.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myLayerInformation& obj) {
  using apache::thrift::to_string;
  out << "myLayerInformation(";
  out << "Layer_ID=" << to_string(obj.Layer_ID);
  out << ", " << "Layer_Name=" << to_string(obj.Layer_Name);
  out << ", " << "Layer_Runtime_ID=" << to_string(obj.Layer_Runtime_ID);
  out << ")";
  return out;
}


myImpersonationLevel::~myImpersonationLevel() throw() {
}


void myImpersonationLevel::__set_Impersonation_Level(const std::string& val) {
  this->Impersonation_Level = val;
}

const char* myImpersonationLevel::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t myImpersonationLevel::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t myImpersonationLevel::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Impersonation_Level);
          this->__isset.Impersonation_Level = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myImpersonationLevel::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myImpersonationLevel");

  xfer += oprot->writeFieldBegin("Impersonation_Level", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Impersonation_Level);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myImpersonationLevel &a, myImpersonationLevel &b) {
  using ::std::swap;
  swap(a.Impersonation_Level, b.Impersonation_Level);
  swap(a.__isset, b.__isset);
}

myImpersonationLevel::myImpersonationLevel(const myImpersonationLevel& other30) {
  Impersonation_Level = other30.Impersonation_Level;
  __isset = other30.__isset;
}
myImpersonationLevel& myImpersonationLevel::operator=(const myImpersonationLevel& other31) {
  Impersonation_Level = other31.Impersonation_Level;
  __isset = other31.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myImpersonationLevel& obj) {
  using apache::thrift::to_string;
  out << "myImpersonationLevel(";
  out << "Impersonation_Level=" << to_string(obj.Impersonation_Level);
  out << ")";
  return out;
}


myFilterInformation::~myFilterInformation() throw() {
}


void myFilterInformation::__set_Filter_ID(const std::string& val) {
  this->Filter_ID = val;
}

void myFilterInformation::__set_Filter_Name(const std::string& val) {
  this->Filter_Name = val;
}

void myFilterInformation::__set_Filter_Type(const std::string& val) {
  this->Filter_Type = val;
}

void myFilterInformation::__set_Runtime_ID(const std::string& val) {
  this->Runtime_ID = val;
}

void myFilterInformation::__set_Filter_Runtime_ID(const std::string& val) {
  this->Filter_Runtime_ID = val;
}

void myFilterInformation::__set_Filter_Layer_Name(const std::string& val) {
  this->Filter_Layer_Name = val;
}

void myFilterInformation::__set_Filter_Layer_Runtime_ID(const std::string& val) {
  this->Filter_Layer_Runtime_ID = val;
}

const char* myFilterInformation::ascii_fingerprint = "5DA595EAE7ECCE4D6C8D61AD15427AFF";
const uint8_t myFilterInformation::binary_fingerprint[16] = {0x5D,0xA5,0x95,0xEA,0xE7,0xEC,0xCE,0x4D,0x6C,0x8D,0x61,0xAD,0x15,0x42,0x7A,0xFF};

uint32_t myFilterInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Filter_ID);
          this->__isset.Filter_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Filter_Name);
          this->__isset.Filter_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Filter_Type);
          this->__isset.Filter_Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Runtime_ID);
          this->__isset.Runtime_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Filter_Runtime_ID);
          this->__isset.Filter_Runtime_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Filter_Layer_Name);
          this->__isset.Filter_Layer_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Filter_Layer_Runtime_ID);
          this->__isset.Filter_Layer_Runtime_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myFilterInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myFilterInformation");

  xfer += oprot->writeFieldBegin("Filter_ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Filter_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Filter_Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Filter_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Filter_Type", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Filter_Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Runtime_ID", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Runtime_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Filter_Runtime_ID", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Filter_Runtime_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Filter_Layer_Name", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Filter_Layer_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Filter_Layer_Runtime_ID", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->Filter_Layer_Runtime_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myFilterInformation &a, myFilterInformation &b) {
  using ::std::swap;
  swap(a.Filter_ID, b.Filter_ID);
  swap(a.Filter_Name, b.Filter_Name);
  swap(a.Filter_Type, b.Filter_Type);
  swap(a.Runtime_ID, b.Runtime_ID);
  swap(a.Filter_Runtime_ID, b.Filter_Runtime_ID);
  swap(a.Filter_Layer_Name, b.Filter_Layer_Name);
  swap(a.Filter_Layer_Runtime_ID, b.Filter_Layer_Runtime_ID);
  swap(a.__isset, b.__isset);
}

myFilterInformation::myFilterInformation(const myFilterInformation& other32) {
  Filter_ID = other32.Filter_ID;
  Filter_Name = other32.Filter_Name;
  Filter_Type = other32.Filter_Type;
  Runtime_ID = other32.Runtime_ID;
  Filter_Runtime_ID = other32.Filter_Runtime_ID;
  Filter_Layer_Name = other32.Filter_Layer_Name;
  Filter_Layer_Runtime_ID = other32.Filter_Layer_Runtime_ID;
  __isset = other32.__isset;
}
myFilterInformation& myFilterInformation::operator=(const myFilterInformation& other33) {
  Filter_ID = other33.Filter_ID;
  Filter_Name = other33.Filter_Name;
  Filter_Type = other33.Filter_Type;
  Runtime_ID = other33.Runtime_ID;
  Filter_Runtime_ID = other33.Filter_Runtime_ID;
  Filter_Layer_Name = other33.Filter_Layer_Name;
  Filter_Layer_Runtime_ID = other33.Filter_Layer_Runtime_ID;
  __isset = other33.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myFilterInformation& obj) {
  using apache::thrift::to_string;
  out << "myFilterInformation(";
  out << "Filter_ID=" << to_string(obj.Filter_ID);
  out << ", " << "Filter_Name=" << to_string(obj.Filter_Name);
  out << ", " << "Filter_Type=" << to_string(obj.Filter_Type);
  out << ", " << "Runtime_ID=" << to_string(obj.Runtime_ID);
  out << ", " << "Filter_Runtime_ID=" << to_string(obj.Filter_Runtime_ID);
  out << ", " << "Filter_Layer_Name=" << to_string(obj.Filter_Layer_Name);
  out << ", " << "Filter_Layer_Runtime_ID=" << to_string(obj.Filter_Layer_Runtime_ID);
  out << ")";
  return out;
}


myFailureInformation::~myFailureInformation() throw() {
}


void myFailureInformation::__set_Failure_Reason(const std::string& val) {
  this->Failure_Reason = val;
}

void myFailureInformation::__set_Status(const std::string& val) {
  this->Status = val;
}

void myFailureInformation::__set_Sub_Status(const std::string& val) {
  this->Sub_Status = val;
}

const char* myFailureInformation::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t myFailureInformation::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t myFailureInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Failure_Reason);
          this->__isset.Failure_Reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Status);
          this->__isset.Status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Sub_Status);
          this->__isset.Sub_Status = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myFailureInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myFailureInformation");

  xfer += oprot->writeFieldBegin("Failure_Reason", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Failure_Reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Status", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Sub_Status", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Sub_Status);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myFailureInformation &a, myFailureInformation &b) {
  using ::std::swap;
  swap(a.Failure_Reason, b.Failure_Reason);
  swap(a.Status, b.Status);
  swap(a.Sub_Status, b.Sub_Status);
  swap(a.__isset, b.__isset);
}

myFailureInformation::myFailureInformation(const myFailureInformation& other34) {
  Failure_Reason = other34.Failure_Reason;
  Status = other34.Status;
  Sub_Status = other34.Sub_Status;
  __isset = other34.__isset;
}
myFailureInformation& myFailureInformation::operator=(const myFailureInformation& other35) {
  Failure_Reason = other35.Failure_Reason;
  Status = other35.Status;
  Sub_Status = other35.Sub_Status;
  __isset = other35.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myFailureInformation& obj) {
  using apache::thrift::to_string;
  out << "myFailureInformation(";
  out << "Failure_Reason=" << to_string(obj.Failure_Reason);
  out << ", " << "Status=" << to_string(obj.Status);
  out << ", " << "Sub_Status=" << to_string(obj.Sub_Status);
  out << ")";
  return out;
}


myErrorInformation::~myErrorInformation() throw() {
}


void myErrorInformation::__set_Reason(const std::string& val) {
  this->Reason = val;
}

const char* myErrorInformation::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t myErrorInformation::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t myErrorInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Reason);
          this->__isset.Reason = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myErrorInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myErrorInformation");

  xfer += oprot->writeFieldBegin("Reason", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Reason);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myErrorInformation &a, myErrorInformation &b) {
  using ::std::swap;
  swap(a.Reason, b.Reason);
  swap(a.__isset, b.__isset);
}

myErrorInformation::myErrorInformation(const myErrorInformation& other36) {
  Reason = other36.Reason;
  __isset = other36.__isset;
}
myErrorInformation& myErrorInformation::operator=(const myErrorInformation& other37) {
  Reason = other37.Reason;
  __isset = other37.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myErrorInformation& obj) {
  using apache::thrift::to_string;
  out << "myErrorInformation(";
  out << "Reason=" << to_string(obj.Reason);
  out << ")";
  return out;
}


myDetailedAuthenticationInformation::~myDetailedAuthenticationInformation() throw() {
}


void myDetailedAuthenticationInformation::__set_Logon_Process(const std::string& val) {
  this->Logon_Process = val;
}

void myDetailedAuthenticationInformation::__set_Authentication_Package(const std::string& val) {
  this->Authentication_Package = val;
}

void myDetailedAuthenticationInformation::__set_Transited_Services(const std::string& val) {
  this->Transited_Services = val;
}

void myDetailedAuthenticationInformation::__set_Package_Name(const std::string& val) {
  this->Package_Name = val;
}

void myDetailedAuthenticationInformation::__set_Key_Length(const std::string& val) {
  this->Key_Length = val;
}

const char* myDetailedAuthenticationInformation::ascii_fingerprint = "BFF0E21728CB005F9AA5774A41542B8D";
const uint8_t myDetailedAuthenticationInformation::binary_fingerprint[16] = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

uint32_t myDetailedAuthenticationInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Logon_Process);
          this->__isset.Logon_Process = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Authentication_Package);
          this->__isset.Authentication_Package = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Transited_Services);
          this->__isset.Transited_Services = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Package_Name);
          this->__isset.Package_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Key_Length);
          this->__isset.Key_Length = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myDetailedAuthenticationInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myDetailedAuthenticationInformation");

  xfer += oprot->writeFieldBegin("Logon_Process", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Logon_Process);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Authentication_Package", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Authentication_Package);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Transited_Services", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Transited_Services);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Package_Name", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Package_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Key_Length", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Key_Length);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myDetailedAuthenticationInformation &a, myDetailedAuthenticationInformation &b) {
  using ::std::swap;
  swap(a.Logon_Process, b.Logon_Process);
  swap(a.Authentication_Package, b.Authentication_Package);
  swap(a.Transited_Services, b.Transited_Services);
  swap(a.Package_Name, b.Package_Name);
  swap(a.Key_Length, b.Key_Length);
  swap(a.__isset, b.__isset);
}

myDetailedAuthenticationInformation::myDetailedAuthenticationInformation(const myDetailedAuthenticationInformation& other38) {
  Logon_Process = other38.Logon_Process;
  Authentication_Package = other38.Authentication_Package;
  Transited_Services = other38.Transited_Services;
  Package_Name = other38.Package_Name;
  Key_Length = other38.Key_Length;
  __isset = other38.__isset;
}
myDetailedAuthenticationInformation& myDetailedAuthenticationInformation::operator=(const myDetailedAuthenticationInformation& other39) {
  Logon_Process = other39.Logon_Process;
  Authentication_Package = other39.Authentication_Package;
  Transited_Services = other39.Transited_Services;
  Package_Name = other39.Package_Name;
  Key_Length = other39.Key_Length;
  __isset = other39.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myDetailedAuthenticationInformation& obj) {
  using apache::thrift::to_string;
  out << "myDetailedAuthenticationInformation(";
  out << "Logon_Process=" << to_string(obj.Logon_Process);
  out << ", " << "Authentication_Package=" << to_string(obj.Authentication_Package);
  out << ", " << "Transited_Services=" << to_string(obj.Transited_Services);
  out << ", " << "Package_Name=" << to_string(obj.Package_Name);
  out << ", " << "Key_Length=" << to_string(obj.Key_Length);
  out << ")";
  return out;
}


myChangeInformation::~myChangeInformation() throw() {
}


void myChangeInformation::__set_Change_Type(const std::string& val) {
  this->Change_Type = val;
}

const char* myChangeInformation::ascii_fingerprint = "EFB929595D312AC8F305D5A794CFEDA1";
const uint8_t myChangeInformation::binary_fingerprint[16] = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

uint32_t myChangeInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Change_Type);
          this->__isset.Change_Type = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myChangeInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myChangeInformation");

  xfer += oprot->writeFieldBegin("Change_Type", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Change_Type);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myChangeInformation &a, myChangeInformation &b) {
  using ::std::swap;
  swap(a.Change_Type, b.Change_Type);
  swap(a.__isset, b.__isset);
}

myChangeInformation::myChangeInformation(const myChangeInformation& other40) {
  Change_Type = other40.Change_Type;
  __isset = other40.__isset;
}
myChangeInformation& myChangeInformation::operator=(const myChangeInformation& other41) {
  Change_Type = other41.Change_Type;
  __isset = other41.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myChangeInformation& obj) {
  using apache::thrift::to_string;
  out << "myChangeInformation(";
  out << "Change_Type=" << to_string(obj.Change_Type);
  out << ")";
  return out;
}


myCalloutInformation::~myCalloutInformation() throw() {
}


void myCalloutInformation::__set_Callout_ID(const std::string& val) {
  this->Callout_ID = val;
}

void myCalloutInformation::__set_Callout_Name(const std::string& val) {
  this->Callout_Name = val;
}

const char* myCalloutInformation::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t myCalloutInformation::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t myCalloutInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Callout_ID);
          this->__isset.Callout_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Callout_Name);
          this->__isset.Callout_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myCalloutInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myCalloutInformation");

  xfer += oprot->writeFieldBegin("Callout_ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Callout_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Callout_Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Callout_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myCalloutInformation &a, myCalloutInformation &b) {
  using ::std::swap;
  swap(a.Callout_ID, b.Callout_ID);
  swap(a.Callout_Name, b.Callout_Name);
  swap(a.__isset, b.__isset);
}

myCalloutInformation::myCalloutInformation(const myCalloutInformation& other42) {
  Callout_ID = other42.Callout_ID;
  Callout_Name = other42.Callout_Name;
  __isset = other42.__isset;
}
myCalloutInformation& myCalloutInformation::operator=(const myCalloutInformation& other43) {
  Callout_ID = other43.Callout_ID;
  Callout_Name = other43.Callout_Name;
  __isset = other43.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myCalloutInformation& obj) {
  using apache::thrift::to_string;
  out << "myCalloutInformation(";
  out << "Callout_ID=" << to_string(obj.Callout_ID);
  out << ", " << "Callout_Name=" << to_string(obj.Callout_Name);
  out << ")";
  return out;
}


myApplicationInformation::~myApplicationInformation() throw() {
}


void myApplicationInformation::__set_Application_Process_ID(const std::string& val) {
  this->Application_Process_ID = val;
}

void myApplicationInformation::__set_Application_Name(const std::string& val) {
  this->Application_Name = val;
}

const char* myApplicationInformation::ascii_fingerprint = "07A9615F837F7D0A952B595DD3020972";
const uint8_t myApplicationInformation::binary_fingerprint[16] = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

uint32_t myApplicationInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Application_Process_ID);
          this->__isset.Application_Process_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Application_Name);
          this->__isset.Application_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myApplicationInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myApplicationInformation");

  xfer += oprot->writeFieldBegin("Application_Process_ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Application_Process_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Application_Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Application_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myApplicationInformation &a, myApplicationInformation &b) {
  using ::std::swap;
  swap(a.Application_Process_ID, b.Application_Process_ID);
  swap(a.Application_Name, b.Application_Name);
  swap(a.__isset, b.__isset);
}

myApplicationInformation::myApplicationInformation(const myApplicationInformation& other44) {
  Application_Process_ID = other44.Application_Process_ID;
  Application_Name = other44.Application_Name;
  __isset = other44.__isset;
}
myApplicationInformation& myApplicationInformation::operator=(const myApplicationInformation& other45) {
  Application_Process_ID = other45.Application_Process_ID;
  Application_Name = other45.Application_Name;
  __isset = other45.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myApplicationInformation& obj) {
  using apache::thrift::to_string;
  out << "myApplicationInformation(";
  out << "Application_Process_ID=" << to_string(obj.Application_Process_ID);
  out << ", " << "Application_Name=" << to_string(obj.Application_Name);
  out << ")";
  return out;
}


myAccountForWhichLogonFailed::~myAccountForWhichLogonFailed() throw() {
}


void myAccountForWhichLogonFailed::__set_Security_ID(const std::string& val) {
  this->Security_ID = val;
}

void myAccountForWhichLogonFailed::__set_Account_Name(const std::string& val) {
  this->Account_Name = val;
}

void myAccountForWhichLogonFailed::__set_Account_Domain(const std::string& val) {
  this->Account_Domain = val;
}

const char* myAccountForWhichLogonFailed::ascii_fingerprint = "AB879940BD15B6B25691265F7384B271";
const uint8_t myAccountForWhichLogonFailed::binary_fingerprint[16] = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

uint32_t myAccountForWhichLogonFailed::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Security_ID);
          this->__isset.Security_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Account_Name);
          this->__isset.Account_Name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Account_Domain);
          this->__isset.Account_Domain = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myAccountForWhichLogonFailed::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myAccountForWhichLogonFailed");

  xfer += oprot->writeFieldBegin("Security_ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Security_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Account_Name", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Account_Name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Account_Domain", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Account_Domain);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myAccountForWhichLogonFailed &a, myAccountForWhichLogonFailed &b) {
  using ::std::swap;
  swap(a.Security_ID, b.Security_ID);
  swap(a.Account_Name, b.Account_Name);
  swap(a.Account_Domain, b.Account_Domain);
  swap(a.__isset, b.__isset);
}

myAccountForWhichLogonFailed::myAccountForWhichLogonFailed(const myAccountForWhichLogonFailed& other46) {
  Security_ID = other46.Security_ID;
  Account_Name = other46.Account_Name;
  Account_Domain = other46.Account_Domain;
  __isset = other46.__isset;
}
myAccountForWhichLogonFailed& myAccountForWhichLogonFailed::operator=(const myAccountForWhichLogonFailed& other47) {
  Security_ID = other47.Security_ID;
  Account_Name = other47.Account_Name;
  Account_Domain = other47.Account_Domain;
  __isset = other47.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myAccountForWhichLogonFailed& obj) {
  using apache::thrift::to_string;
  out << "myAccountForWhichLogonFailed(";
  out << "Security_ID=" << to_string(obj.Security_ID);
  out << ", " << "Account_Name=" << to_string(obj.Account_Name);
  out << ", " << "Account_Domain=" << to_string(obj.Account_Domain);
  out << ")";
  return out;
}


myAccessRequestInformation::~myAccessRequestInformation() throw() {
}


void myAccessRequestInformation::__set_Transaction_ID(const std::string& val) {
  this->Transaction_ID = val;
}

void myAccessRequestInformation::__set_Accesses(const std::string& val) {
  this->Accesses = val;
}

void myAccessRequestInformation::__set_Access_Reasons(const std::string& val) {
  this->Access_Reasons = val;
}

void myAccessRequestInformation::__set_Access_Mask(const std::string& val) {
  this->Access_Mask = val;
}

void myAccessRequestInformation::__set_Privileges_Used_For_Access_Check(const std::string& val) {
  this->Privileges_Used_For_Access_Check = val;
}

void myAccessRequestInformation::__set_Restricted_SID_Count(const std::string& val) {
  this->Restricted_SID_Count = val;
}

const char* myAccessRequestInformation::ascii_fingerprint = "873CB9E5A4C10A7ECE7476FD192F55EE";
const uint8_t myAccessRequestInformation::binary_fingerprint[16] = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

uint32_t myAccessRequestInformation::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Transaction_ID);
          this->__isset.Transaction_ID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Accesses);
          this->__isset.Accesses = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Access_Reasons);
          this->__isset.Access_Reasons = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Access_Mask);
          this->__isset.Access_Mask = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Privileges_Used_For_Access_Check);
          this->__isset.Privileges_Used_For_Access_Check = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->Restricted_SID_Count);
          this->__isset.Restricted_SID_Count = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myAccessRequestInformation::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myAccessRequestInformation");

  xfer += oprot->writeFieldBegin("Transaction_ID", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->Transaction_ID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Accesses", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->Accesses);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Access_Reasons", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->Access_Reasons);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Access_Mask", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->Access_Mask);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Privileges_Used_For_Access_Check", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->Privileges_Used_For_Access_Check);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("Restricted_SID_Count", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->Restricted_SID_Count);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myAccessRequestInformation &a, myAccessRequestInformation &b) {
  using ::std::swap;
  swap(a.Transaction_ID, b.Transaction_ID);
  swap(a.Accesses, b.Accesses);
  swap(a.Access_Reasons, b.Access_Reasons);
  swap(a.Access_Mask, b.Access_Mask);
  swap(a.Privileges_Used_For_Access_Check, b.Privileges_Used_For_Access_Check);
  swap(a.Restricted_SID_Count, b.Restricted_SID_Count);
  swap(a.__isset, b.__isset);
}

myAccessRequestInformation::myAccessRequestInformation(const myAccessRequestInformation& other48) {
  Transaction_ID = other48.Transaction_ID;
  Accesses = other48.Accesses;
  Access_Reasons = other48.Access_Reasons;
  Access_Mask = other48.Access_Mask;
  Privileges_Used_For_Access_Check = other48.Privileges_Used_For_Access_Check;
  Restricted_SID_Count = other48.Restricted_SID_Count;
  __isset = other48.__isset;
}
myAccessRequestInformation& myAccessRequestInformation::operator=(const myAccessRequestInformation& other49) {
  Transaction_ID = other49.Transaction_ID;
  Accesses = other49.Accesses;
  Access_Reasons = other49.Access_Reasons;
  Access_Mask = other49.Access_Mask;
  Privileges_Used_For_Access_Check = other49.Privileges_Used_For_Access_Check;
  Restricted_SID_Count = other49.Restricted_SID_Count;
  __isset = other49.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myAccessRequestInformation& obj) {
  using apache::thrift::to_string;
  out << "myAccessRequestInformation(";
  out << "Transaction_ID=" << to_string(obj.Transaction_ID);
  out << ", " << "Accesses=" << to_string(obj.Accesses);
  out << ", " << "Access_Reasons=" << to_string(obj.Access_Reasons);
  out << ", " << "Access_Mask=" << to_string(obj.Access_Mask);
  out << ", " << "Privileges_Used_For_Access_Check=" << to_string(obj.Privileges_Used_For_Access_Check);
  out << ", " << "Restricted_SID_Count=" << to_string(obj.Restricted_SID_Count);
  out << ")";
  return out;
}


myTimeStamp::~myTimeStamp() throw() {
}


void myTimeStamp::__set_month(const int16_t val) {
  this->month = val;
}

void myTimeStamp::__set_day(const int16_t val) {
  this->day = val;
}

void myTimeStamp::__set_year(const int16_t val) {
  this->year = val;
}

void myTimeStamp::__set_hour(const int16_t val) {
  this->hour = val;
}

void myTimeStamp::__set_minute(const int16_t val) {
  this->minute = val;
}

void myTimeStamp::__set_second(const int16_t val) {
  this->second = val;
}

const char* myTimeStamp::ascii_fingerprint = "4BFEB2A4F7E3C310FEEE505404210134";
const uint8_t myTimeStamp::binary_fingerprint[16] = {0x4B,0xFE,0xB2,0xA4,0xF7,0xE3,0xC3,0x10,0xFE,0xEE,0x50,0x54,0x04,0x21,0x01,0x34};

uint32_t myTimeStamp::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->month);
          this->__isset.month = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->day);
          this->__isset.day = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->year);
          this->__isset.year = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->hour);
          this->__isset.hour = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->minute);
          this->__isset.minute = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_I16) {
          xfer += iprot->readI16(this->second);
          this->__isset.second = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myTimeStamp::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myTimeStamp");

  xfer += oprot->writeFieldBegin("month", ::apache::thrift::protocol::T_I16, 1);
  xfer += oprot->writeI16(this->month);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("day", ::apache::thrift::protocol::T_I16, 2);
  xfer += oprot->writeI16(this->day);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("year", ::apache::thrift::protocol::T_I16, 3);
  xfer += oprot->writeI16(this->year);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("hour", ::apache::thrift::protocol::T_I16, 4);
  xfer += oprot->writeI16(this->hour);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("minute", ::apache::thrift::protocol::T_I16, 5);
  xfer += oprot->writeI16(this->minute);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("second", ::apache::thrift::protocol::T_I16, 6);
  xfer += oprot->writeI16(this->second);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myTimeStamp &a, myTimeStamp &b) {
  using ::std::swap;
  swap(a.month, b.month);
  swap(a.day, b.day);
  swap(a.year, b.year);
  swap(a.hour, b.hour);
  swap(a.minute, b.minute);
  swap(a.second, b.second);
  swap(a.__isset, b.__isset);
}

myTimeStamp::myTimeStamp(const myTimeStamp& other50) {
  month = other50.month;
  day = other50.day;
  year = other50.year;
  hour = other50.hour;
  minute = other50.minute;
  second = other50.second;
  __isset = other50.__isset;
}
myTimeStamp& myTimeStamp::operator=(const myTimeStamp& other51) {
  month = other51.month;
  day = other51.day;
  year = other51.year;
  hour = other51.hour;
  minute = other51.minute;
  second = other51.second;
  __isset = other51.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myTimeStamp& obj) {
  using apache::thrift::to_string;
  out << "myTimeStamp(";
  out << "month=" << to_string(obj.month);
  out << ", " << "day=" << to_string(obj.day);
  out << ", " << "year=" << to_string(obj.year);
  out << ", " << "hour=" << to_string(obj.hour);
  out << ", " << "minute=" << to_string(obj.minute);
  out << ", " << "second=" << to_string(obj.second);
  out << ")";
  return out;
}


myLogStructure::~myLogStructure() throw() {
}


void myLogStructure::__set_message(const std::string& val) {
  this->message = val;
}

void myLogStructure::__set_levelMessageString(const std::string& val) {
  this->levelMessageString = val;
}

void myLogStructure::__set_taskMessageString(const std::string& val) {
  this->taskMessageString = val;
}

void myLogStructure::__set_opCodeMessageString(const std::string& val) {
  this->opCodeMessageString = val;
}

void myLogStructure::__set_channelMessageString(const std::string& val) {
  this->channelMessageString = val;
}

void myLogStructure::__set_providerMessageString(const std::string& val) {
  this->providerMessageString = val;
}

void myLogStructure::__set_keywords(const std::string& val) {
  this->keywords = val;
}

void myLogStructure::__set_executionProcessID(const std::string& val) {
  this->executionProcessID = val;
}

void myLogStructure::__set_executionThreadID(const std::string& val) {
  this->executionThreadID = val;
}

void myLogStructure::__set_computer(const std::string& val) {
  this->computer = val;
}

void myLogStructure::__set_EventID(const std::string& val) {
  this->EventID = val;
}

void myLogStructure::__set_mySubject1(const mySubject& val) {
  this->mySubject1 = val;
}

void myLogStructure::__set_myProviderInformation1(const myProviderInformation& val) {
  this->myProviderInformation1 = val;
}

void myLogStructure::__set_myObject1(const myObject& val) {
  this->myObject1 = val;
}

void myLogStructure::__set_myNetworkInformation1(const myNetworkInformation& val) {
  this->myNetworkInformation1 = val;
}

void myLogStructure::__set_myLayerInformation1(const myLayerInformation& val) {
  this->myLayerInformation1 = val;
}

void myLogStructure::__set_myFilterInformation1(const myFilterInformation& val) {
  this->myFilterInformation1 = val;
}

void myLogStructure::__set_myChangeInformation1(const myChangeInformation& val) {
  this->myChangeInformation1 = val;
}

void myLogStructure::__set_myCalloutInformation1(const myCalloutInformation& val) {
  this->myCalloutInformation1 = val;
}

void myLogStructure::__set_myApplicationInformation1(const myApplicationInformation& val) {
  this->myApplicationInformation1 = val;
}

void myLogStructure::__set_myAccessRequestInformation1(const myAccessRequestInformation& val) {
  this->myAccessRequestInformation1 = val;
}

void myLogStructure::__set_myRuleInformation1(const myRuleInformation& val) {
  this->myRuleInformation1 = val;
}

void myLogStructure::__set_myErrorInformation1(const myErrorInformation& val) {
  this->myErrorInformation1 = val;
}

void myLogStructure::__set_myProcessInformation1(const myProcessInformation& val) {
  this->myProcessInformation1 = val;
}

void myLogStructure::__set_myLogonType1(const myLogonType& val) {
  this->myLogonType1 = val;
}

void myLogStructure::__set_myImpersonationLevel1(const myImpersonationLevel& val) {
  this->myImpersonationLevel1 = val;
}

void myLogStructure::__set_myAccountForWhichLogonFailed1(const myAccountForWhichLogonFailed& val) {
  this->myAccountForWhichLogonFailed1 = val;
}

void myLogStructure::__set_myFailureInformation1(const myFailureInformation& val) {
  this->myFailureInformation1 = val;
}

void myLogStructure::__set_myNewLogon1(const myNewLogon& val) {
  this->myNewLogon1 = val;
}

void myLogStructure::__set_myDetailedAuthenticationInformation1(const myDetailedAuthenticationInformation& val) {
  this->myDetailedAuthenticationInformation1 = val;
}

void myLogStructure::__set_myTimeStamp1(const myTimeStamp& val) {
  this->myTimeStamp1 = val;
}

void myLogStructure::__set_mac(const std::string& val) {
  this->mac = val;
}

void myLogStructure::__set_eventCategory(const std::string& val) {
  this->eventCategory = val;
}

void myLogStructure::__set_processName(const std::string& val) {
  this->processName = val;
}

const char* myLogStructure::ascii_fingerprint = "BD77504154E7AE11E36E0AAF493D8B66";
const uint8_t myLogStructure::binary_fingerprint[16] = {0xBD,0x77,0x50,0x41,0x54,0xE7,0xAE,0x11,0xE3,0x6E,0x0A,0xAF,0x49,0x3D,0x8B,0x66};

uint32_t myLogStructure::read(::apache::thrift::protocol::TProtocol* iprot) {

  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->message);
          this->__isset.message = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->levelMessageString);
          this->__isset.levelMessageString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->taskMessageString);
          this->__isset.taskMessageString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->opCodeMessageString);
          this->__isset.opCodeMessageString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 5:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channelMessageString);
          this->__isset.channelMessageString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 6:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->providerMessageString);
          this->__isset.providerMessageString = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 7:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->keywords);
          this->__isset.keywords = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 8:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->executionProcessID);
          this->__isset.executionProcessID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 9:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->executionThreadID);
          this->__isset.executionThreadID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 10:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->computer);
          this->__isset.computer = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 11:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->EventID);
          this->__isset.EventID = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 12:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->mySubject1.read(iprot);
          this->__isset.mySubject1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 13:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myProviderInformation1.read(iprot);
          this->__isset.myProviderInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 14:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myObject1.read(iprot);
          this->__isset.myObject1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 15:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myNetworkInformation1.read(iprot);
          this->__isset.myNetworkInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 16:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myLayerInformation1.read(iprot);
          this->__isset.myLayerInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 17:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myFilterInformation1.read(iprot);
          this->__isset.myFilterInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 18:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myChangeInformation1.read(iprot);
          this->__isset.myChangeInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 19:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myCalloutInformation1.read(iprot);
          this->__isset.myCalloutInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 20:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myApplicationInformation1.read(iprot);
          this->__isset.myApplicationInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 21:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myAccessRequestInformation1.read(iprot);
          this->__isset.myAccessRequestInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 22:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myRuleInformation1.read(iprot);
          this->__isset.myRuleInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 23:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myErrorInformation1.read(iprot);
          this->__isset.myErrorInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 24:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myProcessInformation1.read(iprot);
          this->__isset.myProcessInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 25:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myLogonType1.read(iprot);
          this->__isset.myLogonType1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 26:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myImpersonationLevel1.read(iprot);
          this->__isset.myImpersonationLevel1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 27:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myAccountForWhichLogonFailed1.read(iprot);
          this->__isset.myAccountForWhichLogonFailed1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 28:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myFailureInformation1.read(iprot);
          this->__isset.myFailureInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 29:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myNewLogon1.read(iprot);
          this->__isset.myNewLogon1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 30:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myDetailedAuthenticationInformation1.read(iprot);
          this->__isset.myDetailedAuthenticationInformation1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 31:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->myTimeStamp1.read(iprot);
          this->__isset.myTimeStamp1 = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 32:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->mac);
          this->__isset.mac = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 33:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->eventCategory);
          this->__isset.eventCategory = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 34:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->processName);
          this->__isset.processName = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t myLogStructure::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  oprot->incrementRecursionDepth();
  xfer += oprot->writeStructBegin("myLogStructure");

  xfer += oprot->writeFieldBegin("message", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->message);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("levelMessageString", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->levelMessageString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("taskMessageString", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->taskMessageString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("opCodeMessageString", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeString(this->opCodeMessageString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("channelMessageString", ::apache::thrift::protocol::T_STRING, 5);
  xfer += oprot->writeString(this->channelMessageString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("providerMessageString", ::apache::thrift::protocol::T_STRING, 6);
  xfer += oprot->writeString(this->providerMessageString);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("keywords", ::apache::thrift::protocol::T_STRING, 7);
  xfer += oprot->writeString(this->keywords);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("executionProcessID", ::apache::thrift::protocol::T_STRING, 8);
  xfer += oprot->writeString(this->executionProcessID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("executionThreadID", ::apache::thrift::protocol::T_STRING, 9);
  xfer += oprot->writeString(this->executionThreadID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("computer", ::apache::thrift::protocol::T_STRING, 10);
  xfer += oprot->writeString(this->computer);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("EventID", ::apache::thrift::protocol::T_STRING, 11);
  xfer += oprot->writeString(this->EventID);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mySubject1", ::apache::thrift::protocol::T_STRUCT, 12);
  xfer += this->mySubject1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myProviderInformation1", ::apache::thrift::protocol::T_STRUCT, 13);
  xfer += this->myProviderInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myObject1", ::apache::thrift::protocol::T_STRUCT, 14);
  xfer += this->myObject1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myNetworkInformation1", ::apache::thrift::protocol::T_STRUCT, 15);
  xfer += this->myNetworkInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myLayerInformation1", ::apache::thrift::protocol::T_STRUCT, 16);
  xfer += this->myLayerInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myFilterInformation1", ::apache::thrift::protocol::T_STRUCT, 17);
  xfer += this->myFilterInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myChangeInformation1", ::apache::thrift::protocol::T_STRUCT, 18);
  xfer += this->myChangeInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myCalloutInformation1", ::apache::thrift::protocol::T_STRUCT, 19);
  xfer += this->myCalloutInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myApplicationInformation1", ::apache::thrift::protocol::T_STRUCT, 20);
  xfer += this->myApplicationInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myAccessRequestInformation1", ::apache::thrift::protocol::T_STRUCT, 21);
  xfer += this->myAccessRequestInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myRuleInformation1", ::apache::thrift::protocol::T_STRUCT, 22);
  xfer += this->myRuleInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myErrorInformation1", ::apache::thrift::protocol::T_STRUCT, 23);
  xfer += this->myErrorInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myProcessInformation1", ::apache::thrift::protocol::T_STRUCT, 24);
  xfer += this->myProcessInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myLogonType1", ::apache::thrift::protocol::T_STRUCT, 25);
  xfer += this->myLogonType1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myImpersonationLevel1", ::apache::thrift::protocol::T_STRUCT, 26);
  xfer += this->myImpersonationLevel1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myAccountForWhichLogonFailed1", ::apache::thrift::protocol::T_STRUCT, 27);
  xfer += this->myAccountForWhichLogonFailed1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myFailureInformation1", ::apache::thrift::protocol::T_STRUCT, 28);
  xfer += this->myFailureInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myNewLogon1", ::apache::thrift::protocol::T_STRUCT, 29);
  xfer += this->myNewLogon1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myDetailedAuthenticationInformation1", ::apache::thrift::protocol::T_STRUCT, 30);
  xfer += this->myDetailedAuthenticationInformation1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("myTimeStamp1", ::apache::thrift::protocol::T_STRUCT, 31);
  xfer += this->myTimeStamp1.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("mac", ::apache::thrift::protocol::T_STRING, 32);
  xfer += oprot->writeString(this->mac);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("eventCategory", ::apache::thrift::protocol::T_STRING, 33);
  xfer += oprot->writeString(this->eventCategory);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("processName", ::apache::thrift::protocol::T_STRING, 34);
  xfer += oprot->writeString(this->processName);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  oprot->decrementRecursionDepth();
  return xfer;
}

void swap(myLogStructure &a, myLogStructure &b) {
  using ::std::swap;
  swap(a.message, b.message);
  swap(a.levelMessageString, b.levelMessageString);
  swap(a.taskMessageString, b.taskMessageString);
  swap(a.opCodeMessageString, b.opCodeMessageString);
  swap(a.channelMessageString, b.channelMessageString);
  swap(a.providerMessageString, b.providerMessageString);
  swap(a.keywords, b.keywords);
  swap(a.executionProcessID, b.executionProcessID);
  swap(a.executionThreadID, b.executionThreadID);
  swap(a.computer, b.computer);
  swap(a.EventID, b.EventID);
  swap(a.mySubject1, b.mySubject1);
  swap(a.myProviderInformation1, b.myProviderInformation1);
  swap(a.myObject1, b.myObject1);
  swap(a.myNetworkInformation1, b.myNetworkInformation1);
  swap(a.myLayerInformation1, b.myLayerInformation1);
  swap(a.myFilterInformation1, b.myFilterInformation1);
  swap(a.myChangeInformation1, b.myChangeInformation1);
  swap(a.myCalloutInformation1, b.myCalloutInformation1);
  swap(a.myApplicationInformation1, b.myApplicationInformation1);
  swap(a.myAccessRequestInformation1, b.myAccessRequestInformation1);
  swap(a.myRuleInformation1, b.myRuleInformation1);
  swap(a.myErrorInformation1, b.myErrorInformation1);
  swap(a.myProcessInformation1, b.myProcessInformation1);
  swap(a.myLogonType1, b.myLogonType1);
  swap(a.myImpersonationLevel1, b.myImpersonationLevel1);
  swap(a.myAccountForWhichLogonFailed1, b.myAccountForWhichLogonFailed1);
  swap(a.myFailureInformation1, b.myFailureInformation1);
  swap(a.myNewLogon1, b.myNewLogon1);
  swap(a.myDetailedAuthenticationInformation1, b.myDetailedAuthenticationInformation1);
  swap(a.myTimeStamp1, b.myTimeStamp1);
  swap(a.mac, b.mac);
  swap(a.eventCategory, b.eventCategory);
  swap(a.processName, b.processName);
  swap(a.__isset, b.__isset);
}

myLogStructure::myLogStructure(const myLogStructure& other52) {
  message = other52.message;
  levelMessageString = other52.levelMessageString;
  taskMessageString = other52.taskMessageString;
  opCodeMessageString = other52.opCodeMessageString;
  channelMessageString = other52.channelMessageString;
  providerMessageString = other52.providerMessageString;
  keywords = other52.keywords;
  executionProcessID = other52.executionProcessID;
  executionThreadID = other52.executionThreadID;
  computer = other52.computer;
  EventID = other52.EventID;
  mySubject1 = other52.mySubject1;
  myProviderInformation1 = other52.myProviderInformation1;
  myObject1 = other52.myObject1;
  myNetworkInformation1 = other52.myNetworkInformation1;
  myLayerInformation1 = other52.myLayerInformation1;
  myFilterInformation1 = other52.myFilterInformation1;
  myChangeInformation1 = other52.myChangeInformation1;
  myCalloutInformation1 = other52.myCalloutInformation1;
  myApplicationInformation1 = other52.myApplicationInformation1;
  myAccessRequestInformation1 = other52.myAccessRequestInformation1;
  myRuleInformation1 = other52.myRuleInformation1;
  myErrorInformation1 = other52.myErrorInformation1;
  myProcessInformation1 = other52.myProcessInformation1;
  myLogonType1 = other52.myLogonType1;
  myImpersonationLevel1 = other52.myImpersonationLevel1;
  myAccountForWhichLogonFailed1 = other52.myAccountForWhichLogonFailed1;
  myFailureInformation1 = other52.myFailureInformation1;
  myNewLogon1 = other52.myNewLogon1;
  myDetailedAuthenticationInformation1 = other52.myDetailedAuthenticationInformation1;
  myTimeStamp1 = other52.myTimeStamp1;
  mac = other52.mac;
  eventCategory = other52.eventCategory;
  processName = other52.processName;
  __isset = other52.__isset;
}
myLogStructure& myLogStructure::operator=(const myLogStructure& other53) {
  message = other53.message;
  levelMessageString = other53.levelMessageString;
  taskMessageString = other53.taskMessageString;
  opCodeMessageString = other53.opCodeMessageString;
  channelMessageString = other53.channelMessageString;
  providerMessageString = other53.providerMessageString;
  keywords = other53.keywords;
  executionProcessID = other53.executionProcessID;
  executionThreadID = other53.executionThreadID;
  computer = other53.computer;
  EventID = other53.EventID;
  mySubject1 = other53.mySubject1;
  myProviderInformation1 = other53.myProviderInformation1;
  myObject1 = other53.myObject1;
  myNetworkInformation1 = other53.myNetworkInformation1;
  myLayerInformation1 = other53.myLayerInformation1;
  myFilterInformation1 = other53.myFilterInformation1;
  myChangeInformation1 = other53.myChangeInformation1;
  myCalloutInformation1 = other53.myCalloutInformation1;
  myApplicationInformation1 = other53.myApplicationInformation1;
  myAccessRequestInformation1 = other53.myAccessRequestInformation1;
  myRuleInformation1 = other53.myRuleInformation1;
  myErrorInformation1 = other53.myErrorInformation1;
  myProcessInformation1 = other53.myProcessInformation1;
  myLogonType1 = other53.myLogonType1;
  myImpersonationLevel1 = other53.myImpersonationLevel1;
  myAccountForWhichLogonFailed1 = other53.myAccountForWhichLogonFailed1;
  myFailureInformation1 = other53.myFailureInformation1;
  myNewLogon1 = other53.myNewLogon1;
  myDetailedAuthenticationInformation1 = other53.myDetailedAuthenticationInformation1;
  myTimeStamp1 = other53.myTimeStamp1;
  mac = other53.mac;
  eventCategory = other53.eventCategory;
  processName = other53.processName;
  __isset = other53.__isset;
  return *this;
}
std::ostream& operator<<(std::ostream& out, const myLogStructure& obj) {
  using apache::thrift::to_string;
  out << "myLogStructure(";
  out << "message=" << to_string(obj.message);
  out << ", " << "levelMessageString=" << to_string(obj.levelMessageString);
  out << ", " << "taskMessageString=" << to_string(obj.taskMessageString);
  out << ", " << "opCodeMessageString=" << to_string(obj.opCodeMessageString);
  out << ", " << "channelMessageString=" << to_string(obj.channelMessageString);
  out << ", " << "providerMessageString=" << to_string(obj.providerMessageString);
  out << ", " << "keywords=" << to_string(obj.keywords);
  out << ", " << "executionProcessID=" << to_string(obj.executionProcessID);
  out << ", " << "executionThreadID=" << to_string(obj.executionThreadID);
  out << ", " << "computer=" << to_string(obj.computer);
  out << ", " << "EventID=" << to_string(obj.EventID);
  out << ", " << "mySubject1=" << to_string(obj.mySubject1);
  out << ", " << "myProviderInformation1=" << to_string(obj.myProviderInformation1);
  out << ", " << "myObject1=" << to_string(obj.myObject1);
  out << ", " << "myNetworkInformation1=" << to_string(obj.myNetworkInformation1);
  out << ", " << "myLayerInformation1=" << to_string(obj.myLayerInformation1);
  out << ", " << "myFilterInformation1=" << to_string(obj.myFilterInformation1);
  out << ", " << "myChangeInformation1=" << to_string(obj.myChangeInformation1);
  out << ", " << "myCalloutInformation1=" << to_string(obj.myCalloutInformation1);
  out << ", " << "myApplicationInformation1=" << to_string(obj.myApplicationInformation1);
  out << ", " << "myAccessRequestInformation1=" << to_string(obj.myAccessRequestInformation1);
  out << ", " << "myRuleInformation1=" << to_string(obj.myRuleInformation1);
  out << ", " << "myErrorInformation1=" << to_string(obj.myErrorInformation1);
  out << ", " << "myProcessInformation1=" << to_string(obj.myProcessInformation1);
  out << ", " << "myLogonType1=" << to_string(obj.myLogonType1);
  out << ", " << "myImpersonationLevel1=" << to_string(obj.myImpersonationLevel1);
  out << ", " << "myAccountForWhichLogonFailed1=" << to_string(obj.myAccountForWhichLogonFailed1);
  out << ", " << "myFailureInformation1=" << to_string(obj.myFailureInformation1);
  out << ", " << "myNewLogon1=" << to_string(obj.myNewLogon1);
  out << ", " << "myDetailedAuthenticationInformation1=" << to_string(obj.myDetailedAuthenticationInformation1);
  out << ", " << "myTimeStamp1=" << to_string(obj.myTimeStamp1);
  out << ", " << "mac=" << to_string(obj.mac);
  out << ", " << "eventCategory=" << to_string(obj.eventCategory);
  out << ", " << "processName=" << to_string(obj.processName);
  out << ")";
  return out;
}

} // namespace
