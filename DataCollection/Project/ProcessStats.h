/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef ProcessStats_H
#define ProcessStats_H

#include <thrift/TDispatchProcessor.h>
#include "Process_types.h"

namespace HydraWindows {

class ProcessStatsIf {
 public:
  virtual ~ProcessStatsIf() {}
  virtual double getTotalCPU() = 0;
  virtual double getTotalMemory() = 0;
  virtual int64_t getFreeMemory() = 0;
  virtual double getTotalNetDownload() = 0;
  virtual double getTotalNetUpload() = 0;
  virtual void getMaxCPU(std::vector<std::string> & _return) = 0;
  virtual void getMinCPU(std::vector<std::string> & _return) = 0;
  virtual void getMaxMemory(std::vector<std::string> & _return) = 0;
  virtual void getMinMemory(std::vector<std::string> & _return) = 0;
  virtual void getMaxNetDownload(std::vector<std::string> & _return) = 0;
  virtual void getMinNetDownload(std::vector<std::string> & _return) = 0;
  virtual void getMaxNetUpload(std::vector<std::string> & _return) = 0;
  virtual void getMinNetUpload(std::vector<std::string> & _return) = 0;
  virtual void getAllCpuProc(std::vector<std::string> & _return) = 0;
  virtual void getAllMemProc(std::vector<std::string> & _return) = 0;
  virtual void getAllNetDownloadProc(std::vector<std::string> & _return) = 0;
  virtual void getAllNetUploadProc(std::vector<std::string> & _return) = 0;
  virtual void filterAllProcesses(std::vector<std::string> & _return, const double cpu, const double mem, const double down, const double up, const std::string& processname) = 0;
  virtual void filterAllAvgProcesses(const int64_t sample, const double cpu, const double mem, const double down, const double up, const std::vector<std::string> & processList) = 0;
  virtual void getAvgProcess_PID(std::vector<std::string> & _return, const int64_t PID, const int64_t sample) = 0;
  virtual void getAllProcesses(std::vector<std::string> & _return) = 0;
  virtual void getNetwork(std::vector<std::string> & _return) = 0;
  virtual void getTCP(std::vector<std::string> & _return) = 0;
  virtual void getLogRelatedInformation(const int16_t timeInMinute, const int16_t summarizationLevel, const std::vector<std::string> & eventIndices, const std::string& logType, const std::string& process_name, const std::string& securityLevel) = 0;
  virtual void getImportantLogEventsWithoutSummarization(const int16_t timeInMinute) = 0;
  virtual void getImportantLogEvents(const int16_t timeInMinute) = 0;
  virtual void getFullLogInformation(const int16_t timeInMinute) = 0;
};

class ProcessStatsIfFactory {
 public:
  typedef ProcessStatsIf Handler;

  virtual ~ProcessStatsIfFactory() {}

  virtual ProcessStatsIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(ProcessStatsIf* /* handler */) = 0;
};

class ProcessStatsIfSingletonFactory : virtual public ProcessStatsIfFactory {
 public:
  ProcessStatsIfSingletonFactory(const boost::shared_ptr<ProcessStatsIf>& iface) : iface_(iface) {}
  virtual ~ProcessStatsIfSingletonFactory() {}

  virtual ProcessStatsIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(ProcessStatsIf* /* handler */) {}

 protected:
  boost::shared_ptr<ProcessStatsIf> iface_;
};

class ProcessStatsNull : virtual public ProcessStatsIf {
 public:
  virtual ~ProcessStatsNull() {}
  double getTotalCPU() {
    double _return = (double)0;
    return _return;
  }
  double getTotalMemory() {
    double _return = (double)0;
    return _return;
  }
  int64_t getFreeMemory() {
    int64_t _return = 0;
    return _return;
  }
  double getTotalNetDownload() {
    double _return = (double)0;
    return _return;
  }
  double getTotalNetUpload() {
    double _return = (double)0;
    return _return;
  }
  void getMaxCPU(std::vector<std::string> & /* _return */) {
    return;
  }
  void getMinCPU(std::vector<std::string> & /* _return */) {
    return;
  }
  void getMaxMemory(std::vector<std::string> & /* _return */) {
    return;
  }
  void getMinMemory(std::vector<std::string> & /* _return */) {
    return;
  }
  void getMaxNetDownload(std::vector<std::string> & /* _return */) {
    return;
  }
  void getMinNetDownload(std::vector<std::string> & /* _return */) {
    return;
  }
  void getMaxNetUpload(std::vector<std::string> & /* _return */) {
    return;
  }
  void getMinNetUpload(std::vector<std::string> & /* _return */) {
    return;
  }
  void getAllCpuProc(std::vector<std::string> & /* _return */) {
    return;
  }
  void getAllMemProc(std::vector<std::string> & /* _return */) {
    return;
  }
  void getAllNetDownloadProc(std::vector<std::string> & /* _return */) {
    return;
  }
  void getAllNetUploadProc(std::vector<std::string> & /* _return */) {
    return;
  }
  void filterAllProcesses(std::vector<std::string> & /* _return */, const double /* cpu */, const double /* mem */, const double /* down */, const double /* up */, const std::string& /* processname */) {
    return;
  }
  void filterAllAvgProcesses(const int64_t /* sample */, const double /* cpu */, const double /* mem */, const double /* down */, const double /* up */, const std::vector<std::string> & /* processList */) {
    return;
  }
  void getAvgProcess_PID(std::vector<std::string> & /* _return */, const int64_t /* PID */, const int64_t /* sample */) {
    return;
  }
  void getAllProcesses(std::vector<std::string> & /* _return */) {
    return;
  }
  void getNetwork(std::vector<std::string> & /* _return */) {
    return;
  }
  void getTCP(std::vector<std::string> & /* _return */) {
    return;
  }
  void getLogRelatedInformation(const int16_t /* timeInMinute */, const int16_t /* summarizationLevel */, const std::vector<std::string> & /* eventIndices */, const std::string& /* logType */, const std::string& /* process_name */, const std::string& /* securityLevel */) {
    return;
  }
  void getImportantLogEventsWithoutSummarization(const int16_t /* timeInMinute */) {
    return;
  }
  void getImportantLogEvents(const int16_t /* timeInMinute */) {
    return;
  }
  void getFullLogInformation(const int16_t /* timeInMinute */) {
    return;
  }
};


class ProcessStats_getTotalCPU_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getTotalCPU_args(const ProcessStats_getTotalCPU_args&);
  ProcessStats_getTotalCPU_args& operator=(const ProcessStats_getTotalCPU_args&);
  ProcessStats_getTotalCPU_args() {
  }

  virtual ~ProcessStats_getTotalCPU_args() throw();

  bool operator == (const ProcessStats_getTotalCPU_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getTotalCPU_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getTotalCPU_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalCPU_args& obj);
};


class ProcessStats_getTotalCPU_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getTotalCPU_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalCPU_pargs& obj);
};

typedef struct _ProcessStats_getTotalCPU_result__isset {
  _ProcessStats_getTotalCPU_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getTotalCPU_result__isset;

class ProcessStats_getTotalCPU_result {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};

  ProcessStats_getTotalCPU_result(const ProcessStats_getTotalCPU_result&);
  ProcessStats_getTotalCPU_result& operator=(const ProcessStats_getTotalCPU_result&);
  ProcessStats_getTotalCPU_result() : success(0) {
  }

  virtual ~ProcessStats_getTotalCPU_result() throw();
  double success;

  _ProcessStats_getTotalCPU_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const ProcessStats_getTotalCPU_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getTotalCPU_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getTotalCPU_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalCPU_result& obj);
};

typedef struct _ProcessStats_getTotalCPU_presult__isset {
  _ProcessStats_getTotalCPU_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getTotalCPU_presult__isset;

class ProcessStats_getTotalCPU_presult {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};


  virtual ~ProcessStats_getTotalCPU_presult() throw();
  double* success;

  _ProcessStats_getTotalCPU_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalCPU_presult& obj);
};


class ProcessStats_getTotalMemory_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getTotalMemory_args(const ProcessStats_getTotalMemory_args&);
  ProcessStats_getTotalMemory_args& operator=(const ProcessStats_getTotalMemory_args&);
  ProcessStats_getTotalMemory_args() {
  }

  virtual ~ProcessStats_getTotalMemory_args() throw();

  bool operator == (const ProcessStats_getTotalMemory_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getTotalMemory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getTotalMemory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalMemory_args& obj);
};


class ProcessStats_getTotalMemory_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getTotalMemory_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalMemory_pargs& obj);
};

typedef struct _ProcessStats_getTotalMemory_result__isset {
  _ProcessStats_getTotalMemory_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getTotalMemory_result__isset;

class ProcessStats_getTotalMemory_result {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};

  ProcessStats_getTotalMemory_result(const ProcessStats_getTotalMemory_result&);
  ProcessStats_getTotalMemory_result& operator=(const ProcessStats_getTotalMemory_result&);
  ProcessStats_getTotalMemory_result() : success(0) {
  }

  virtual ~ProcessStats_getTotalMemory_result() throw();
  double success;

  _ProcessStats_getTotalMemory_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const ProcessStats_getTotalMemory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getTotalMemory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getTotalMemory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalMemory_result& obj);
};

typedef struct _ProcessStats_getTotalMemory_presult__isset {
  _ProcessStats_getTotalMemory_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getTotalMemory_presult__isset;

class ProcessStats_getTotalMemory_presult {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};


  virtual ~ProcessStats_getTotalMemory_presult() throw();
  double* success;

  _ProcessStats_getTotalMemory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalMemory_presult& obj);
};


class ProcessStats_getFreeMemory_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getFreeMemory_args(const ProcessStats_getFreeMemory_args&);
  ProcessStats_getFreeMemory_args& operator=(const ProcessStats_getFreeMemory_args&);
  ProcessStats_getFreeMemory_args() {
  }

  virtual ~ProcessStats_getFreeMemory_args() throw();

  bool operator == (const ProcessStats_getFreeMemory_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getFreeMemory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getFreeMemory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getFreeMemory_args& obj);
};


class ProcessStats_getFreeMemory_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getFreeMemory_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getFreeMemory_pargs& obj);
};

typedef struct _ProcessStats_getFreeMemory_result__isset {
  _ProcessStats_getFreeMemory_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getFreeMemory_result__isset;

class ProcessStats_getFreeMemory_result {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};

  ProcessStats_getFreeMemory_result(const ProcessStats_getFreeMemory_result&);
  ProcessStats_getFreeMemory_result& operator=(const ProcessStats_getFreeMemory_result&);
  ProcessStats_getFreeMemory_result() : success(0) {
  }

  virtual ~ProcessStats_getFreeMemory_result() throw();
  int64_t success;

  _ProcessStats_getFreeMemory_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const ProcessStats_getFreeMemory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getFreeMemory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getFreeMemory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getFreeMemory_result& obj);
};

typedef struct _ProcessStats_getFreeMemory_presult__isset {
  _ProcessStats_getFreeMemory_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getFreeMemory_presult__isset;

class ProcessStats_getFreeMemory_presult {
 public:

  static const char* ascii_fingerprint; // = "1CF279170B7E876D4ABB450CC8994359";
  static const uint8_t binary_fingerprint[16]; // = {0x1C,0xF2,0x79,0x17,0x0B,0x7E,0x87,0x6D,0x4A,0xBB,0x45,0x0C,0xC8,0x99,0x43,0x59};


  virtual ~ProcessStats_getFreeMemory_presult() throw();
  int64_t* success;

  _ProcessStats_getFreeMemory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getFreeMemory_presult& obj);
};


class ProcessStats_getTotalNetDownload_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getTotalNetDownload_args(const ProcessStats_getTotalNetDownload_args&);
  ProcessStats_getTotalNetDownload_args& operator=(const ProcessStats_getTotalNetDownload_args&);
  ProcessStats_getTotalNetDownload_args() {
  }

  virtual ~ProcessStats_getTotalNetDownload_args() throw();

  bool operator == (const ProcessStats_getTotalNetDownload_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getTotalNetDownload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getTotalNetDownload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalNetDownload_args& obj);
};


class ProcessStats_getTotalNetDownload_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getTotalNetDownload_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalNetDownload_pargs& obj);
};

typedef struct _ProcessStats_getTotalNetDownload_result__isset {
  _ProcessStats_getTotalNetDownload_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getTotalNetDownload_result__isset;

class ProcessStats_getTotalNetDownload_result {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};

  ProcessStats_getTotalNetDownload_result(const ProcessStats_getTotalNetDownload_result&);
  ProcessStats_getTotalNetDownload_result& operator=(const ProcessStats_getTotalNetDownload_result&);
  ProcessStats_getTotalNetDownload_result() : success(0) {
  }

  virtual ~ProcessStats_getTotalNetDownload_result() throw();
  double success;

  _ProcessStats_getTotalNetDownload_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const ProcessStats_getTotalNetDownload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getTotalNetDownload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getTotalNetDownload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalNetDownload_result& obj);
};

typedef struct _ProcessStats_getTotalNetDownload_presult__isset {
  _ProcessStats_getTotalNetDownload_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getTotalNetDownload_presult__isset;

class ProcessStats_getTotalNetDownload_presult {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};


  virtual ~ProcessStats_getTotalNetDownload_presult() throw();
  double* success;

  _ProcessStats_getTotalNetDownload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalNetDownload_presult& obj);
};


class ProcessStats_getTotalNetUpload_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getTotalNetUpload_args(const ProcessStats_getTotalNetUpload_args&);
  ProcessStats_getTotalNetUpload_args& operator=(const ProcessStats_getTotalNetUpload_args&);
  ProcessStats_getTotalNetUpload_args() {
  }

  virtual ~ProcessStats_getTotalNetUpload_args() throw();

  bool operator == (const ProcessStats_getTotalNetUpload_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getTotalNetUpload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getTotalNetUpload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalNetUpload_args& obj);
};


class ProcessStats_getTotalNetUpload_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getTotalNetUpload_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalNetUpload_pargs& obj);
};

typedef struct _ProcessStats_getTotalNetUpload_result__isset {
  _ProcessStats_getTotalNetUpload_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getTotalNetUpload_result__isset;

class ProcessStats_getTotalNetUpload_result {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};

  ProcessStats_getTotalNetUpload_result(const ProcessStats_getTotalNetUpload_result&);
  ProcessStats_getTotalNetUpload_result& operator=(const ProcessStats_getTotalNetUpload_result&);
  ProcessStats_getTotalNetUpload_result() : success(0) {
  }

  virtual ~ProcessStats_getTotalNetUpload_result() throw();
  double success;

  _ProcessStats_getTotalNetUpload_result__isset __isset;

  void __set_success(const double val);

  bool operator == (const ProcessStats_getTotalNetUpload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getTotalNetUpload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getTotalNetUpload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalNetUpload_result& obj);
};

typedef struct _ProcessStats_getTotalNetUpload_presult__isset {
  _ProcessStats_getTotalNetUpload_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getTotalNetUpload_presult__isset;

class ProcessStats_getTotalNetUpload_presult {
 public:

  static const char* ascii_fingerprint; // = "DEC695F0B5B0EB95E4554B301A1D76A4";
  static const uint8_t binary_fingerprint[16]; // = {0xDE,0xC6,0x95,0xF0,0xB5,0xB0,0xEB,0x95,0xE4,0x55,0x4B,0x30,0x1A,0x1D,0x76,0xA4};


  virtual ~ProcessStats_getTotalNetUpload_presult() throw();
  double* success;

  _ProcessStats_getTotalNetUpload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTotalNetUpload_presult& obj);
};


class ProcessStats_getMaxCPU_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getMaxCPU_args(const ProcessStats_getMaxCPU_args&);
  ProcessStats_getMaxCPU_args& operator=(const ProcessStats_getMaxCPU_args&);
  ProcessStats_getMaxCPU_args() {
  }

  virtual ~ProcessStats_getMaxCPU_args() throw();

  bool operator == (const ProcessStats_getMaxCPU_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getMaxCPU_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMaxCPU_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxCPU_args& obj);
};


class ProcessStats_getMaxCPU_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getMaxCPU_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxCPU_pargs& obj);
};

typedef struct _ProcessStats_getMaxCPU_result__isset {
  _ProcessStats_getMaxCPU_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMaxCPU_result__isset;

class ProcessStats_getMaxCPU_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getMaxCPU_result(const ProcessStats_getMaxCPU_result&);
  ProcessStats_getMaxCPU_result& operator=(const ProcessStats_getMaxCPU_result&);
  ProcessStats_getMaxCPU_result() {
  }

  virtual ~ProcessStats_getMaxCPU_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getMaxCPU_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getMaxCPU_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getMaxCPU_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMaxCPU_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxCPU_result& obj);
};

typedef struct _ProcessStats_getMaxCPU_presult__isset {
  _ProcessStats_getMaxCPU_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMaxCPU_presult__isset;

class ProcessStats_getMaxCPU_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getMaxCPU_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getMaxCPU_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxCPU_presult& obj);
};


class ProcessStats_getMinCPU_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getMinCPU_args(const ProcessStats_getMinCPU_args&);
  ProcessStats_getMinCPU_args& operator=(const ProcessStats_getMinCPU_args&);
  ProcessStats_getMinCPU_args() {
  }

  virtual ~ProcessStats_getMinCPU_args() throw();

  bool operator == (const ProcessStats_getMinCPU_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getMinCPU_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMinCPU_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinCPU_args& obj);
};


class ProcessStats_getMinCPU_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getMinCPU_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinCPU_pargs& obj);
};

typedef struct _ProcessStats_getMinCPU_result__isset {
  _ProcessStats_getMinCPU_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMinCPU_result__isset;

class ProcessStats_getMinCPU_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getMinCPU_result(const ProcessStats_getMinCPU_result&);
  ProcessStats_getMinCPU_result& operator=(const ProcessStats_getMinCPU_result&);
  ProcessStats_getMinCPU_result() {
  }

  virtual ~ProcessStats_getMinCPU_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getMinCPU_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getMinCPU_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getMinCPU_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMinCPU_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinCPU_result& obj);
};

typedef struct _ProcessStats_getMinCPU_presult__isset {
  _ProcessStats_getMinCPU_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMinCPU_presult__isset;

class ProcessStats_getMinCPU_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getMinCPU_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getMinCPU_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinCPU_presult& obj);
};


class ProcessStats_getMaxMemory_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getMaxMemory_args(const ProcessStats_getMaxMemory_args&);
  ProcessStats_getMaxMemory_args& operator=(const ProcessStats_getMaxMemory_args&);
  ProcessStats_getMaxMemory_args() {
  }

  virtual ~ProcessStats_getMaxMemory_args() throw();

  bool operator == (const ProcessStats_getMaxMemory_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getMaxMemory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMaxMemory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxMemory_args& obj);
};


class ProcessStats_getMaxMemory_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getMaxMemory_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxMemory_pargs& obj);
};

typedef struct _ProcessStats_getMaxMemory_result__isset {
  _ProcessStats_getMaxMemory_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMaxMemory_result__isset;

class ProcessStats_getMaxMemory_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getMaxMemory_result(const ProcessStats_getMaxMemory_result&);
  ProcessStats_getMaxMemory_result& operator=(const ProcessStats_getMaxMemory_result&);
  ProcessStats_getMaxMemory_result() {
  }

  virtual ~ProcessStats_getMaxMemory_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getMaxMemory_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getMaxMemory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getMaxMemory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMaxMemory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxMemory_result& obj);
};

typedef struct _ProcessStats_getMaxMemory_presult__isset {
  _ProcessStats_getMaxMemory_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMaxMemory_presult__isset;

class ProcessStats_getMaxMemory_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getMaxMemory_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getMaxMemory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxMemory_presult& obj);
};


class ProcessStats_getMinMemory_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getMinMemory_args(const ProcessStats_getMinMemory_args&);
  ProcessStats_getMinMemory_args& operator=(const ProcessStats_getMinMemory_args&);
  ProcessStats_getMinMemory_args() {
  }

  virtual ~ProcessStats_getMinMemory_args() throw();

  bool operator == (const ProcessStats_getMinMemory_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getMinMemory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMinMemory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinMemory_args& obj);
};


class ProcessStats_getMinMemory_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getMinMemory_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinMemory_pargs& obj);
};

typedef struct _ProcessStats_getMinMemory_result__isset {
  _ProcessStats_getMinMemory_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMinMemory_result__isset;

class ProcessStats_getMinMemory_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getMinMemory_result(const ProcessStats_getMinMemory_result&);
  ProcessStats_getMinMemory_result& operator=(const ProcessStats_getMinMemory_result&);
  ProcessStats_getMinMemory_result() {
  }

  virtual ~ProcessStats_getMinMemory_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getMinMemory_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getMinMemory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getMinMemory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMinMemory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinMemory_result& obj);
};

typedef struct _ProcessStats_getMinMemory_presult__isset {
  _ProcessStats_getMinMemory_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMinMemory_presult__isset;

class ProcessStats_getMinMemory_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getMinMemory_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getMinMemory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinMemory_presult& obj);
};


class ProcessStats_getMaxNetDownload_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getMaxNetDownload_args(const ProcessStats_getMaxNetDownload_args&);
  ProcessStats_getMaxNetDownload_args& operator=(const ProcessStats_getMaxNetDownload_args&);
  ProcessStats_getMaxNetDownload_args() {
  }

  virtual ~ProcessStats_getMaxNetDownload_args() throw();

  bool operator == (const ProcessStats_getMaxNetDownload_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getMaxNetDownload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMaxNetDownload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxNetDownload_args& obj);
};


class ProcessStats_getMaxNetDownload_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getMaxNetDownload_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxNetDownload_pargs& obj);
};

typedef struct _ProcessStats_getMaxNetDownload_result__isset {
  _ProcessStats_getMaxNetDownload_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMaxNetDownload_result__isset;

class ProcessStats_getMaxNetDownload_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getMaxNetDownload_result(const ProcessStats_getMaxNetDownload_result&);
  ProcessStats_getMaxNetDownload_result& operator=(const ProcessStats_getMaxNetDownload_result&);
  ProcessStats_getMaxNetDownload_result() {
  }

  virtual ~ProcessStats_getMaxNetDownload_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getMaxNetDownload_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getMaxNetDownload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getMaxNetDownload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMaxNetDownload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxNetDownload_result& obj);
};

typedef struct _ProcessStats_getMaxNetDownload_presult__isset {
  _ProcessStats_getMaxNetDownload_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMaxNetDownload_presult__isset;

class ProcessStats_getMaxNetDownload_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getMaxNetDownload_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getMaxNetDownload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxNetDownload_presult& obj);
};


class ProcessStats_getMinNetDownload_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getMinNetDownload_args(const ProcessStats_getMinNetDownload_args&);
  ProcessStats_getMinNetDownload_args& operator=(const ProcessStats_getMinNetDownload_args&);
  ProcessStats_getMinNetDownload_args() {
  }

  virtual ~ProcessStats_getMinNetDownload_args() throw();

  bool operator == (const ProcessStats_getMinNetDownload_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getMinNetDownload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMinNetDownload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinNetDownload_args& obj);
};


class ProcessStats_getMinNetDownload_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getMinNetDownload_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinNetDownload_pargs& obj);
};

typedef struct _ProcessStats_getMinNetDownload_result__isset {
  _ProcessStats_getMinNetDownload_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMinNetDownload_result__isset;

class ProcessStats_getMinNetDownload_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getMinNetDownload_result(const ProcessStats_getMinNetDownload_result&);
  ProcessStats_getMinNetDownload_result& operator=(const ProcessStats_getMinNetDownload_result&);
  ProcessStats_getMinNetDownload_result() {
  }

  virtual ~ProcessStats_getMinNetDownload_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getMinNetDownload_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getMinNetDownload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getMinNetDownload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMinNetDownload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinNetDownload_result& obj);
};

typedef struct _ProcessStats_getMinNetDownload_presult__isset {
  _ProcessStats_getMinNetDownload_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMinNetDownload_presult__isset;

class ProcessStats_getMinNetDownload_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getMinNetDownload_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getMinNetDownload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinNetDownload_presult& obj);
};


class ProcessStats_getMaxNetUpload_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getMaxNetUpload_args(const ProcessStats_getMaxNetUpload_args&);
  ProcessStats_getMaxNetUpload_args& operator=(const ProcessStats_getMaxNetUpload_args&);
  ProcessStats_getMaxNetUpload_args() {
  }

  virtual ~ProcessStats_getMaxNetUpload_args() throw();

  bool operator == (const ProcessStats_getMaxNetUpload_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getMaxNetUpload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMaxNetUpload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxNetUpload_args& obj);
};


class ProcessStats_getMaxNetUpload_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getMaxNetUpload_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxNetUpload_pargs& obj);
};

typedef struct _ProcessStats_getMaxNetUpload_result__isset {
  _ProcessStats_getMaxNetUpload_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMaxNetUpload_result__isset;

class ProcessStats_getMaxNetUpload_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getMaxNetUpload_result(const ProcessStats_getMaxNetUpload_result&);
  ProcessStats_getMaxNetUpload_result& operator=(const ProcessStats_getMaxNetUpload_result&);
  ProcessStats_getMaxNetUpload_result() {
  }

  virtual ~ProcessStats_getMaxNetUpload_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getMaxNetUpload_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getMaxNetUpload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getMaxNetUpload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMaxNetUpload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxNetUpload_result& obj);
};

typedef struct _ProcessStats_getMaxNetUpload_presult__isset {
  _ProcessStats_getMaxNetUpload_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMaxNetUpload_presult__isset;

class ProcessStats_getMaxNetUpload_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getMaxNetUpload_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getMaxNetUpload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMaxNetUpload_presult& obj);
};


class ProcessStats_getMinNetUpload_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getMinNetUpload_args(const ProcessStats_getMinNetUpload_args&);
  ProcessStats_getMinNetUpload_args& operator=(const ProcessStats_getMinNetUpload_args&);
  ProcessStats_getMinNetUpload_args() {
  }

  virtual ~ProcessStats_getMinNetUpload_args() throw();

  bool operator == (const ProcessStats_getMinNetUpload_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getMinNetUpload_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMinNetUpload_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinNetUpload_args& obj);
};


class ProcessStats_getMinNetUpload_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getMinNetUpload_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinNetUpload_pargs& obj);
};

typedef struct _ProcessStats_getMinNetUpload_result__isset {
  _ProcessStats_getMinNetUpload_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMinNetUpload_result__isset;

class ProcessStats_getMinNetUpload_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getMinNetUpload_result(const ProcessStats_getMinNetUpload_result&);
  ProcessStats_getMinNetUpload_result& operator=(const ProcessStats_getMinNetUpload_result&);
  ProcessStats_getMinNetUpload_result() {
  }

  virtual ~ProcessStats_getMinNetUpload_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getMinNetUpload_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getMinNetUpload_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getMinNetUpload_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getMinNetUpload_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinNetUpload_result& obj);
};

typedef struct _ProcessStats_getMinNetUpload_presult__isset {
  _ProcessStats_getMinNetUpload_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getMinNetUpload_presult__isset;

class ProcessStats_getMinNetUpload_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getMinNetUpload_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getMinNetUpload_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getMinNetUpload_presult& obj);
};


class ProcessStats_getAllCpuProc_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getAllCpuProc_args(const ProcessStats_getAllCpuProc_args&);
  ProcessStats_getAllCpuProc_args& operator=(const ProcessStats_getAllCpuProc_args&);
  ProcessStats_getAllCpuProc_args() {
  }

  virtual ~ProcessStats_getAllCpuProc_args() throw();

  bool operator == (const ProcessStats_getAllCpuProc_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getAllCpuProc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAllCpuProc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllCpuProc_args& obj);
};


class ProcessStats_getAllCpuProc_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getAllCpuProc_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllCpuProc_pargs& obj);
};

typedef struct _ProcessStats_getAllCpuProc_result__isset {
  _ProcessStats_getAllCpuProc_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAllCpuProc_result__isset;

class ProcessStats_getAllCpuProc_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getAllCpuProc_result(const ProcessStats_getAllCpuProc_result&);
  ProcessStats_getAllCpuProc_result& operator=(const ProcessStats_getAllCpuProc_result&);
  ProcessStats_getAllCpuProc_result() {
  }

  virtual ~ProcessStats_getAllCpuProc_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getAllCpuProc_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getAllCpuProc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getAllCpuProc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAllCpuProc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllCpuProc_result& obj);
};

typedef struct _ProcessStats_getAllCpuProc_presult__isset {
  _ProcessStats_getAllCpuProc_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAllCpuProc_presult__isset;

class ProcessStats_getAllCpuProc_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getAllCpuProc_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getAllCpuProc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllCpuProc_presult& obj);
};


class ProcessStats_getAllMemProc_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getAllMemProc_args(const ProcessStats_getAllMemProc_args&);
  ProcessStats_getAllMemProc_args& operator=(const ProcessStats_getAllMemProc_args&);
  ProcessStats_getAllMemProc_args() {
  }

  virtual ~ProcessStats_getAllMemProc_args() throw();

  bool operator == (const ProcessStats_getAllMemProc_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getAllMemProc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAllMemProc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllMemProc_args& obj);
};


class ProcessStats_getAllMemProc_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getAllMemProc_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllMemProc_pargs& obj);
};

typedef struct _ProcessStats_getAllMemProc_result__isset {
  _ProcessStats_getAllMemProc_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAllMemProc_result__isset;

class ProcessStats_getAllMemProc_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getAllMemProc_result(const ProcessStats_getAllMemProc_result&);
  ProcessStats_getAllMemProc_result& operator=(const ProcessStats_getAllMemProc_result&);
  ProcessStats_getAllMemProc_result() {
  }

  virtual ~ProcessStats_getAllMemProc_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getAllMemProc_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getAllMemProc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getAllMemProc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAllMemProc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllMemProc_result& obj);
};

typedef struct _ProcessStats_getAllMemProc_presult__isset {
  _ProcessStats_getAllMemProc_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAllMemProc_presult__isset;

class ProcessStats_getAllMemProc_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getAllMemProc_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getAllMemProc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllMemProc_presult& obj);
};


class ProcessStats_getAllNetDownloadProc_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getAllNetDownloadProc_args(const ProcessStats_getAllNetDownloadProc_args&);
  ProcessStats_getAllNetDownloadProc_args& operator=(const ProcessStats_getAllNetDownloadProc_args&);
  ProcessStats_getAllNetDownloadProc_args() {
  }

  virtual ~ProcessStats_getAllNetDownloadProc_args() throw();

  bool operator == (const ProcessStats_getAllNetDownloadProc_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getAllNetDownloadProc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAllNetDownloadProc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllNetDownloadProc_args& obj);
};


class ProcessStats_getAllNetDownloadProc_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getAllNetDownloadProc_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllNetDownloadProc_pargs& obj);
};

typedef struct _ProcessStats_getAllNetDownloadProc_result__isset {
  _ProcessStats_getAllNetDownloadProc_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAllNetDownloadProc_result__isset;

class ProcessStats_getAllNetDownloadProc_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getAllNetDownloadProc_result(const ProcessStats_getAllNetDownloadProc_result&);
  ProcessStats_getAllNetDownloadProc_result& operator=(const ProcessStats_getAllNetDownloadProc_result&);
  ProcessStats_getAllNetDownloadProc_result() {
  }

  virtual ~ProcessStats_getAllNetDownloadProc_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getAllNetDownloadProc_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getAllNetDownloadProc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getAllNetDownloadProc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAllNetDownloadProc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllNetDownloadProc_result& obj);
};

typedef struct _ProcessStats_getAllNetDownloadProc_presult__isset {
  _ProcessStats_getAllNetDownloadProc_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAllNetDownloadProc_presult__isset;

class ProcessStats_getAllNetDownloadProc_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getAllNetDownloadProc_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getAllNetDownloadProc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllNetDownloadProc_presult& obj);
};


class ProcessStats_getAllNetUploadProc_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getAllNetUploadProc_args(const ProcessStats_getAllNetUploadProc_args&);
  ProcessStats_getAllNetUploadProc_args& operator=(const ProcessStats_getAllNetUploadProc_args&);
  ProcessStats_getAllNetUploadProc_args() {
  }

  virtual ~ProcessStats_getAllNetUploadProc_args() throw();

  bool operator == (const ProcessStats_getAllNetUploadProc_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getAllNetUploadProc_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAllNetUploadProc_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllNetUploadProc_args& obj);
};


class ProcessStats_getAllNetUploadProc_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getAllNetUploadProc_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllNetUploadProc_pargs& obj);
};

typedef struct _ProcessStats_getAllNetUploadProc_result__isset {
  _ProcessStats_getAllNetUploadProc_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAllNetUploadProc_result__isset;

class ProcessStats_getAllNetUploadProc_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getAllNetUploadProc_result(const ProcessStats_getAllNetUploadProc_result&);
  ProcessStats_getAllNetUploadProc_result& operator=(const ProcessStats_getAllNetUploadProc_result&);
  ProcessStats_getAllNetUploadProc_result() {
  }

  virtual ~ProcessStats_getAllNetUploadProc_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getAllNetUploadProc_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getAllNetUploadProc_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getAllNetUploadProc_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAllNetUploadProc_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllNetUploadProc_result& obj);
};

typedef struct _ProcessStats_getAllNetUploadProc_presult__isset {
  _ProcessStats_getAllNetUploadProc_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAllNetUploadProc_presult__isset;

class ProcessStats_getAllNetUploadProc_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getAllNetUploadProc_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getAllNetUploadProc_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllNetUploadProc_presult& obj);
};

typedef struct _ProcessStats_filterAllProcesses_args__isset {
  _ProcessStats_filterAllProcesses_args__isset() : cpu(false), mem(false), down(false), up(false), processname(false) {}
  bool cpu :1;
  bool mem :1;
  bool down :1;
  bool up :1;
  bool processname :1;
} _ProcessStats_filterAllProcesses_args__isset;

class ProcessStats_filterAllProcesses_args {
 public:

  static const char* ascii_fingerprint; // = "FFA73AAC7A65B82E14220C8C816F1C7E";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0xA7,0x3A,0xAC,0x7A,0x65,0xB8,0x2E,0x14,0x22,0x0C,0x8C,0x81,0x6F,0x1C,0x7E};

  ProcessStats_filterAllProcesses_args(const ProcessStats_filterAllProcesses_args&);
  ProcessStats_filterAllProcesses_args& operator=(const ProcessStats_filterAllProcesses_args&);
  ProcessStats_filterAllProcesses_args() : cpu(0), mem(0), down(0), up(0), processname() {
  }

  virtual ~ProcessStats_filterAllProcesses_args() throw();
  double cpu;
  double mem;
  double down;
  double up;
  std::string processname;

  _ProcessStats_filterAllProcesses_args__isset __isset;

  void __set_cpu(const double val);

  void __set_mem(const double val);

  void __set_down(const double val);

  void __set_up(const double val);

  void __set_processname(const std::string& val);

  bool operator == (const ProcessStats_filterAllProcesses_args & rhs) const
  {
    if (!(cpu == rhs.cpu))
      return false;
    if (!(mem == rhs.mem))
      return false;
    if (!(down == rhs.down))
      return false;
    if (!(up == rhs.up))
      return false;
    if (!(processname == rhs.processname))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_filterAllProcesses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_filterAllProcesses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_filterAllProcesses_args& obj);
};


class ProcessStats_filterAllProcesses_pargs {
 public:

  static const char* ascii_fingerprint; // = "FFA73AAC7A65B82E14220C8C816F1C7E";
  static const uint8_t binary_fingerprint[16]; // = {0xFF,0xA7,0x3A,0xAC,0x7A,0x65,0xB8,0x2E,0x14,0x22,0x0C,0x8C,0x81,0x6F,0x1C,0x7E};


  virtual ~ProcessStats_filterAllProcesses_pargs() throw();
  const double* cpu;
  const double* mem;
  const double* down;
  const double* up;
  const std::string* processname;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_filterAllProcesses_pargs& obj);
};

typedef struct _ProcessStats_filterAllProcesses_result__isset {
  _ProcessStats_filterAllProcesses_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_filterAllProcesses_result__isset;

class ProcessStats_filterAllProcesses_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_filterAllProcesses_result(const ProcessStats_filterAllProcesses_result&);
  ProcessStats_filterAllProcesses_result& operator=(const ProcessStats_filterAllProcesses_result&);
  ProcessStats_filterAllProcesses_result() {
  }

  virtual ~ProcessStats_filterAllProcesses_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_filterAllProcesses_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_filterAllProcesses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_filterAllProcesses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_filterAllProcesses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_filterAllProcesses_result& obj);
};

typedef struct _ProcessStats_filterAllProcesses_presult__isset {
  _ProcessStats_filterAllProcesses_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_filterAllProcesses_presult__isset;

class ProcessStats_filterAllProcesses_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_filterAllProcesses_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_filterAllProcesses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_filterAllProcesses_presult& obj);
};

typedef struct _ProcessStats_filterAllAvgProcesses_args__isset {
  _ProcessStats_filterAllAvgProcesses_args__isset() : sample(false), cpu(false), mem(false), down(false), up(false), processList(false) {}
  bool sample :1;
  bool cpu :1;
  bool mem :1;
  bool down :1;
  bool up :1;
  bool processList :1;
} _ProcessStats_filterAllAvgProcesses_args__isset;

class ProcessStats_filterAllAvgProcesses_args {
 public:

  static const char* ascii_fingerprint; // = "5E79474CB207BF5B4C7228FACB279A9F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0x79,0x47,0x4C,0xB2,0x07,0xBF,0x5B,0x4C,0x72,0x28,0xFA,0xCB,0x27,0x9A,0x9F};

  ProcessStats_filterAllAvgProcesses_args(const ProcessStats_filterAllAvgProcesses_args&);
  ProcessStats_filterAllAvgProcesses_args& operator=(const ProcessStats_filterAllAvgProcesses_args&);
  ProcessStats_filterAllAvgProcesses_args() : sample(0), cpu(0), mem(0), down(0), up(0) {
  }

  virtual ~ProcessStats_filterAllAvgProcesses_args() throw();
  int64_t sample;
  double cpu;
  double mem;
  double down;
  double up;
  std::vector<std::string>  processList;

  _ProcessStats_filterAllAvgProcesses_args__isset __isset;

  void __set_sample(const int64_t val);

  void __set_cpu(const double val);

  void __set_mem(const double val);

  void __set_down(const double val);

  void __set_up(const double val);

  void __set_processList(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_filterAllAvgProcesses_args & rhs) const
  {
    if (!(sample == rhs.sample))
      return false;
    if (!(cpu == rhs.cpu))
      return false;
    if (!(mem == rhs.mem))
      return false;
    if (!(down == rhs.down))
      return false;
    if (!(up == rhs.up))
      return false;
    if (!(processList == rhs.processList))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_filterAllAvgProcesses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_filterAllAvgProcesses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_filterAllAvgProcesses_args& obj);
};


class ProcessStats_filterAllAvgProcesses_pargs {
 public:

  static const char* ascii_fingerprint; // = "5E79474CB207BF5B4C7228FACB279A9F";
  static const uint8_t binary_fingerprint[16]; // = {0x5E,0x79,0x47,0x4C,0xB2,0x07,0xBF,0x5B,0x4C,0x72,0x28,0xFA,0xCB,0x27,0x9A,0x9F};


  virtual ~ProcessStats_filterAllAvgProcesses_pargs() throw();
  const int64_t* sample;
  const double* cpu;
  const double* mem;
  const double* down;
  const double* up;
  const std::vector<std::string> * processList;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_filterAllAvgProcesses_pargs& obj);
};


class ProcessStats_filterAllAvgProcesses_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_filterAllAvgProcesses_result(const ProcessStats_filterAllAvgProcesses_result&);
  ProcessStats_filterAllAvgProcesses_result& operator=(const ProcessStats_filterAllAvgProcesses_result&);
  ProcessStats_filterAllAvgProcesses_result() {
  }

  virtual ~ProcessStats_filterAllAvgProcesses_result() throw();

  bool operator == (const ProcessStats_filterAllAvgProcesses_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_filterAllAvgProcesses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_filterAllAvgProcesses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_filterAllAvgProcesses_result& obj);
};


class ProcessStats_filterAllAvgProcesses_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_filterAllAvgProcesses_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_filterAllAvgProcesses_presult& obj);
};

typedef struct _ProcessStats_getAvgProcess_PID_args__isset {
  _ProcessStats_getAvgProcess_PID_args__isset() : PID(false), sample(false) {}
  bool PID :1;
  bool sample :1;
} _ProcessStats_getAvgProcess_PID_args__isset;

class ProcessStats_getAvgProcess_PID_args {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};

  ProcessStats_getAvgProcess_PID_args(const ProcessStats_getAvgProcess_PID_args&);
  ProcessStats_getAvgProcess_PID_args& operator=(const ProcessStats_getAvgProcess_PID_args&);
  ProcessStats_getAvgProcess_PID_args() : PID(0), sample(0) {
  }

  virtual ~ProcessStats_getAvgProcess_PID_args() throw();
  int64_t PID;
  int64_t sample;

  _ProcessStats_getAvgProcess_PID_args__isset __isset;

  void __set_PID(const int64_t val);

  void __set_sample(const int64_t val);

  bool operator == (const ProcessStats_getAvgProcess_PID_args & rhs) const
  {
    if (!(PID == rhs.PID))
      return false;
    if (!(sample == rhs.sample))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getAvgProcess_PID_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAvgProcess_PID_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAvgProcess_PID_args& obj);
};


class ProcessStats_getAvgProcess_PID_pargs {
 public:

  static const char* ascii_fingerprint; // = "F33135321253DAEB67B0E79E416CA831";
  static const uint8_t binary_fingerprint[16]; // = {0xF3,0x31,0x35,0x32,0x12,0x53,0xDA,0xEB,0x67,0xB0,0xE7,0x9E,0x41,0x6C,0xA8,0x31};


  virtual ~ProcessStats_getAvgProcess_PID_pargs() throw();
  const int64_t* PID;
  const int64_t* sample;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAvgProcess_PID_pargs& obj);
};

typedef struct _ProcessStats_getAvgProcess_PID_result__isset {
  _ProcessStats_getAvgProcess_PID_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAvgProcess_PID_result__isset;

class ProcessStats_getAvgProcess_PID_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getAvgProcess_PID_result(const ProcessStats_getAvgProcess_PID_result&);
  ProcessStats_getAvgProcess_PID_result& operator=(const ProcessStats_getAvgProcess_PID_result&);
  ProcessStats_getAvgProcess_PID_result() {
  }

  virtual ~ProcessStats_getAvgProcess_PID_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getAvgProcess_PID_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getAvgProcess_PID_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getAvgProcess_PID_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAvgProcess_PID_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAvgProcess_PID_result& obj);
};

typedef struct _ProcessStats_getAvgProcess_PID_presult__isset {
  _ProcessStats_getAvgProcess_PID_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAvgProcess_PID_presult__isset;

class ProcessStats_getAvgProcess_PID_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getAvgProcess_PID_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getAvgProcess_PID_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAvgProcess_PID_presult& obj);
};


class ProcessStats_getAllProcesses_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getAllProcesses_args(const ProcessStats_getAllProcesses_args&);
  ProcessStats_getAllProcesses_args& operator=(const ProcessStats_getAllProcesses_args&);
  ProcessStats_getAllProcesses_args() {
  }

  virtual ~ProcessStats_getAllProcesses_args() throw();

  bool operator == (const ProcessStats_getAllProcesses_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getAllProcesses_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAllProcesses_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllProcesses_args& obj);
};


class ProcessStats_getAllProcesses_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getAllProcesses_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllProcesses_pargs& obj);
};

typedef struct _ProcessStats_getAllProcesses_result__isset {
  _ProcessStats_getAllProcesses_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAllProcesses_result__isset;

class ProcessStats_getAllProcesses_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getAllProcesses_result(const ProcessStats_getAllProcesses_result&);
  ProcessStats_getAllProcesses_result& operator=(const ProcessStats_getAllProcesses_result&);
  ProcessStats_getAllProcesses_result() {
  }

  virtual ~ProcessStats_getAllProcesses_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getAllProcesses_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getAllProcesses_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getAllProcesses_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getAllProcesses_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllProcesses_result& obj);
};

typedef struct _ProcessStats_getAllProcesses_presult__isset {
  _ProcessStats_getAllProcesses_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getAllProcesses_presult__isset;

class ProcessStats_getAllProcesses_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getAllProcesses_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getAllProcesses_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getAllProcesses_presult& obj);
};


class ProcessStats_getNetwork_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getNetwork_args(const ProcessStats_getNetwork_args&);
  ProcessStats_getNetwork_args& operator=(const ProcessStats_getNetwork_args&);
  ProcessStats_getNetwork_args() {
  }

  virtual ~ProcessStats_getNetwork_args() throw();

  bool operator == (const ProcessStats_getNetwork_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getNetwork_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getNetwork_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getNetwork_args& obj);
};


class ProcessStats_getNetwork_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getNetwork_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getNetwork_pargs& obj);
};

typedef struct _ProcessStats_getNetwork_result__isset {
  _ProcessStats_getNetwork_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getNetwork_result__isset;

class ProcessStats_getNetwork_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getNetwork_result(const ProcessStats_getNetwork_result&);
  ProcessStats_getNetwork_result& operator=(const ProcessStats_getNetwork_result&);
  ProcessStats_getNetwork_result() {
  }

  virtual ~ProcessStats_getNetwork_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getNetwork_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getNetwork_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getNetwork_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getNetwork_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getNetwork_result& obj);
};

typedef struct _ProcessStats_getNetwork_presult__isset {
  _ProcessStats_getNetwork_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getNetwork_presult__isset;

class ProcessStats_getNetwork_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getNetwork_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getNetwork_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getNetwork_presult& obj);
};


class ProcessStats_getTCP_args {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getTCP_args(const ProcessStats_getTCP_args&);
  ProcessStats_getTCP_args& operator=(const ProcessStats_getTCP_args&);
  ProcessStats_getTCP_args() {
  }

  virtual ~ProcessStats_getTCP_args() throw();

  bool operator == (const ProcessStats_getTCP_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getTCP_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getTCP_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTCP_args& obj);
};


class ProcessStats_getTCP_pargs {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getTCP_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTCP_pargs& obj);
};

typedef struct _ProcessStats_getTCP_result__isset {
  _ProcessStats_getTCP_result__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getTCP_result__isset;

class ProcessStats_getTCP_result {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};

  ProcessStats_getTCP_result(const ProcessStats_getTCP_result&);
  ProcessStats_getTCP_result& operator=(const ProcessStats_getTCP_result&);
  ProcessStats_getTCP_result() {
  }

  virtual ~ProcessStats_getTCP_result() throw();
  std::vector<std::string>  success;

  _ProcessStats_getTCP_result__isset __isset;

  void __set_success(const std::vector<std::string> & val);

  bool operator == (const ProcessStats_getTCP_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getTCP_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getTCP_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTCP_result& obj);
};

typedef struct _ProcessStats_getTCP_presult__isset {
  _ProcessStats_getTCP_presult__isset() : success(false) {}
  bool success :1;
} _ProcessStats_getTCP_presult__isset;

class ProcessStats_getTCP_presult {
 public:

  static const char* ascii_fingerprint; // = "C844643081B14EA3A81E57199FB2B504";
  static const uint8_t binary_fingerprint[16]; // = {0xC8,0x44,0x64,0x30,0x81,0xB1,0x4E,0xA3,0xA8,0x1E,0x57,0x19,0x9F,0xB2,0xB5,0x04};


  virtual ~ProcessStats_getTCP_presult() throw();
  std::vector<std::string> * success;

  _ProcessStats_getTCP_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getTCP_presult& obj);
};

typedef struct _ProcessStats_getLogRelatedInformation_args__isset {
  _ProcessStats_getLogRelatedInformation_args__isset() : timeInMinute(false), summarizationLevel(false), eventIndices(false), logType(false), process_name(false), securityLevel(false) {}
  bool timeInMinute :1;
  bool summarizationLevel :1;
  bool eventIndices :1;
  bool logType :1;
  bool process_name :1;
  bool securityLevel :1;
} _ProcessStats_getLogRelatedInformation_args__isset;

class ProcessStats_getLogRelatedInformation_args {
 public:

  static const char* ascii_fingerprint; // = "6E073DE4E2A40E27EAFCEF88F75B1009";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x07,0x3D,0xE4,0xE2,0xA4,0x0E,0x27,0xEA,0xFC,0xEF,0x88,0xF7,0x5B,0x10,0x09};

  ProcessStats_getLogRelatedInformation_args(const ProcessStats_getLogRelatedInformation_args&);
  ProcessStats_getLogRelatedInformation_args& operator=(const ProcessStats_getLogRelatedInformation_args&);
  ProcessStats_getLogRelatedInformation_args() : timeInMinute(0), summarizationLevel(0), logType(), process_name(), securityLevel() {
  }

  virtual ~ProcessStats_getLogRelatedInformation_args() throw();
  int16_t timeInMinute;
  int16_t summarizationLevel;
  std::vector<std::string>  eventIndices;
  std::string logType;
  std::string process_name;
  std::string securityLevel;

  _ProcessStats_getLogRelatedInformation_args__isset __isset;

  void __set_timeInMinute(const int16_t val);

  void __set_summarizationLevel(const int16_t val);

  void __set_eventIndices(const std::vector<std::string> & val);

  void __set_logType(const std::string& val);

  void __set_process_name(const std::string& val);

  void __set_securityLevel(const std::string& val);

  bool operator == (const ProcessStats_getLogRelatedInformation_args & rhs) const
  {
    if (!(timeInMinute == rhs.timeInMinute))
      return false;
    if (!(summarizationLevel == rhs.summarizationLevel))
      return false;
    if (!(eventIndices == rhs.eventIndices))
      return false;
    if (!(logType == rhs.logType))
      return false;
    if (!(process_name == rhs.process_name))
      return false;
    if (!(securityLevel == rhs.securityLevel))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getLogRelatedInformation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getLogRelatedInformation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getLogRelatedInformation_args& obj);
};


class ProcessStats_getLogRelatedInformation_pargs {
 public:

  static const char* ascii_fingerprint; // = "6E073DE4E2A40E27EAFCEF88F75B1009";
  static const uint8_t binary_fingerprint[16]; // = {0x6E,0x07,0x3D,0xE4,0xE2,0xA4,0x0E,0x27,0xEA,0xFC,0xEF,0x88,0xF7,0x5B,0x10,0x09};


  virtual ~ProcessStats_getLogRelatedInformation_pargs() throw();
  const int16_t* timeInMinute;
  const int16_t* summarizationLevel;
  const std::vector<std::string> * eventIndices;
  const std::string* logType;
  const std::string* process_name;
  const std::string* securityLevel;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getLogRelatedInformation_pargs& obj);
};


class ProcessStats_getLogRelatedInformation_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getLogRelatedInformation_result(const ProcessStats_getLogRelatedInformation_result&);
  ProcessStats_getLogRelatedInformation_result& operator=(const ProcessStats_getLogRelatedInformation_result&);
  ProcessStats_getLogRelatedInformation_result() {
  }

  virtual ~ProcessStats_getLogRelatedInformation_result() throw();

  bool operator == (const ProcessStats_getLogRelatedInformation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getLogRelatedInformation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getLogRelatedInformation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getLogRelatedInformation_result& obj);
};


class ProcessStats_getLogRelatedInformation_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getLogRelatedInformation_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getLogRelatedInformation_presult& obj);
};

typedef struct _ProcessStats_getImportantLogEventsWithoutSummarization_args__isset {
  _ProcessStats_getImportantLogEventsWithoutSummarization_args__isset() : timeInMinute(false) {}
  bool timeInMinute :1;
} _ProcessStats_getImportantLogEventsWithoutSummarization_args__isset;

class ProcessStats_getImportantLogEventsWithoutSummarization_args {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  ProcessStats_getImportantLogEventsWithoutSummarization_args(const ProcessStats_getImportantLogEventsWithoutSummarization_args&);
  ProcessStats_getImportantLogEventsWithoutSummarization_args& operator=(const ProcessStats_getImportantLogEventsWithoutSummarization_args&);
  ProcessStats_getImportantLogEventsWithoutSummarization_args() : timeInMinute(0) {
  }

  virtual ~ProcessStats_getImportantLogEventsWithoutSummarization_args() throw();
  int16_t timeInMinute;

  _ProcessStats_getImportantLogEventsWithoutSummarization_args__isset __isset;

  void __set_timeInMinute(const int16_t val);

  bool operator == (const ProcessStats_getImportantLogEventsWithoutSummarization_args & rhs) const
  {
    if (!(timeInMinute == rhs.timeInMinute))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getImportantLogEventsWithoutSummarization_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getImportantLogEventsWithoutSummarization_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getImportantLogEventsWithoutSummarization_args& obj);
};


class ProcessStats_getImportantLogEventsWithoutSummarization_pargs {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};


  virtual ~ProcessStats_getImportantLogEventsWithoutSummarization_pargs() throw();
  const int16_t* timeInMinute;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getImportantLogEventsWithoutSummarization_pargs& obj);
};


class ProcessStats_getImportantLogEventsWithoutSummarization_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getImportantLogEventsWithoutSummarization_result(const ProcessStats_getImportantLogEventsWithoutSummarization_result&);
  ProcessStats_getImportantLogEventsWithoutSummarization_result& operator=(const ProcessStats_getImportantLogEventsWithoutSummarization_result&);
  ProcessStats_getImportantLogEventsWithoutSummarization_result() {
  }

  virtual ~ProcessStats_getImportantLogEventsWithoutSummarization_result() throw();

  bool operator == (const ProcessStats_getImportantLogEventsWithoutSummarization_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getImportantLogEventsWithoutSummarization_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getImportantLogEventsWithoutSummarization_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getImportantLogEventsWithoutSummarization_result& obj);
};


class ProcessStats_getImportantLogEventsWithoutSummarization_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getImportantLogEventsWithoutSummarization_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getImportantLogEventsWithoutSummarization_presult& obj);
};

typedef struct _ProcessStats_getImportantLogEvents_args__isset {
  _ProcessStats_getImportantLogEvents_args__isset() : timeInMinute(false) {}
  bool timeInMinute :1;
} _ProcessStats_getImportantLogEvents_args__isset;

class ProcessStats_getImportantLogEvents_args {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  ProcessStats_getImportantLogEvents_args(const ProcessStats_getImportantLogEvents_args&);
  ProcessStats_getImportantLogEvents_args& operator=(const ProcessStats_getImportantLogEvents_args&);
  ProcessStats_getImportantLogEvents_args() : timeInMinute(0) {
  }

  virtual ~ProcessStats_getImportantLogEvents_args() throw();
  int16_t timeInMinute;

  _ProcessStats_getImportantLogEvents_args__isset __isset;

  void __set_timeInMinute(const int16_t val);

  bool operator == (const ProcessStats_getImportantLogEvents_args & rhs) const
  {
    if (!(timeInMinute == rhs.timeInMinute))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getImportantLogEvents_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getImportantLogEvents_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getImportantLogEvents_args& obj);
};


class ProcessStats_getImportantLogEvents_pargs {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};


  virtual ~ProcessStats_getImportantLogEvents_pargs() throw();
  const int16_t* timeInMinute;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getImportantLogEvents_pargs& obj);
};


class ProcessStats_getImportantLogEvents_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getImportantLogEvents_result(const ProcessStats_getImportantLogEvents_result&);
  ProcessStats_getImportantLogEvents_result& operator=(const ProcessStats_getImportantLogEvents_result&);
  ProcessStats_getImportantLogEvents_result() {
  }

  virtual ~ProcessStats_getImportantLogEvents_result() throw();

  bool operator == (const ProcessStats_getImportantLogEvents_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getImportantLogEvents_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getImportantLogEvents_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getImportantLogEvents_result& obj);
};


class ProcessStats_getImportantLogEvents_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getImportantLogEvents_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getImportantLogEvents_presult& obj);
};

typedef struct _ProcessStats_getFullLogInformation_args__isset {
  _ProcessStats_getFullLogInformation_args__isset() : timeInMinute(false) {}
  bool timeInMinute :1;
} _ProcessStats_getFullLogInformation_args__isset;

class ProcessStats_getFullLogInformation_args {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};

  ProcessStats_getFullLogInformation_args(const ProcessStats_getFullLogInformation_args&);
  ProcessStats_getFullLogInformation_args& operator=(const ProcessStats_getFullLogInformation_args&);
  ProcessStats_getFullLogInformation_args() : timeInMinute(0) {
  }

  virtual ~ProcessStats_getFullLogInformation_args() throw();
  int16_t timeInMinute;

  _ProcessStats_getFullLogInformation_args__isset __isset;

  void __set_timeInMinute(const int16_t val);

  bool operator == (const ProcessStats_getFullLogInformation_args & rhs) const
  {
    if (!(timeInMinute == rhs.timeInMinute))
      return false;
    return true;
  }
  bool operator != (const ProcessStats_getFullLogInformation_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getFullLogInformation_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getFullLogInformation_args& obj);
};


class ProcessStats_getFullLogInformation_pargs {
 public:

  static const char* ascii_fingerprint; // = "565787C31CF2D774B532CB755189BF39";
  static const uint8_t binary_fingerprint[16]; // = {0x56,0x57,0x87,0xC3,0x1C,0xF2,0xD7,0x74,0xB5,0x32,0xCB,0x75,0x51,0x89,0xBF,0x39};


  virtual ~ProcessStats_getFullLogInformation_pargs() throw();
  const int16_t* timeInMinute;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getFullLogInformation_pargs& obj);
};


class ProcessStats_getFullLogInformation_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  ProcessStats_getFullLogInformation_result(const ProcessStats_getFullLogInformation_result&);
  ProcessStats_getFullLogInformation_result& operator=(const ProcessStats_getFullLogInformation_result&);
  ProcessStats_getFullLogInformation_result() {
  }

  virtual ~ProcessStats_getFullLogInformation_result() throw();

  bool operator == (const ProcessStats_getFullLogInformation_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const ProcessStats_getFullLogInformation_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ProcessStats_getFullLogInformation_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getFullLogInformation_result& obj);
};


class ProcessStats_getFullLogInformation_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~ProcessStats_getFullLogInformation_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const ProcessStats_getFullLogInformation_presult& obj);
};

class ProcessStatsClient : virtual public ProcessStatsIf {
 public:
  ProcessStatsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  ProcessStatsClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  double getTotalCPU();
  void send_getTotalCPU();
  double recv_getTotalCPU();
  double getTotalMemory();
  void send_getTotalMemory();
  double recv_getTotalMemory();
  int64_t getFreeMemory();
  void send_getFreeMemory();
  int64_t recv_getFreeMemory();
  double getTotalNetDownload();
  void send_getTotalNetDownload();
  double recv_getTotalNetDownload();
  double getTotalNetUpload();
  void send_getTotalNetUpload();
  double recv_getTotalNetUpload();
  void getMaxCPU(std::vector<std::string> & _return);
  void send_getMaxCPU();
  void recv_getMaxCPU(std::vector<std::string> & _return);
  void getMinCPU(std::vector<std::string> & _return);
  void send_getMinCPU();
  void recv_getMinCPU(std::vector<std::string> & _return);
  void getMaxMemory(std::vector<std::string> & _return);
  void send_getMaxMemory();
  void recv_getMaxMemory(std::vector<std::string> & _return);
  void getMinMemory(std::vector<std::string> & _return);
  void send_getMinMemory();
  void recv_getMinMemory(std::vector<std::string> & _return);
  void getMaxNetDownload(std::vector<std::string> & _return);
  void send_getMaxNetDownload();
  void recv_getMaxNetDownload(std::vector<std::string> & _return);
  void getMinNetDownload(std::vector<std::string> & _return);
  void send_getMinNetDownload();
  void recv_getMinNetDownload(std::vector<std::string> & _return);
  void getMaxNetUpload(std::vector<std::string> & _return);
  void send_getMaxNetUpload();
  void recv_getMaxNetUpload(std::vector<std::string> & _return);
  void getMinNetUpload(std::vector<std::string> & _return);
  void send_getMinNetUpload();
  void recv_getMinNetUpload(std::vector<std::string> & _return);
  void getAllCpuProc(std::vector<std::string> & _return);
  void send_getAllCpuProc();
  void recv_getAllCpuProc(std::vector<std::string> & _return);
  void getAllMemProc(std::vector<std::string> & _return);
  void send_getAllMemProc();
  void recv_getAllMemProc(std::vector<std::string> & _return);
  void getAllNetDownloadProc(std::vector<std::string> & _return);
  void send_getAllNetDownloadProc();
  void recv_getAllNetDownloadProc(std::vector<std::string> & _return);
  void getAllNetUploadProc(std::vector<std::string> & _return);
  void send_getAllNetUploadProc();
  void recv_getAllNetUploadProc(std::vector<std::string> & _return);
  void filterAllProcesses(std::vector<std::string> & _return, const double cpu, const double mem, const double down, const double up, const std::string& processname);
  void send_filterAllProcesses(const double cpu, const double mem, const double down, const double up, const std::string& processname);
  void recv_filterAllProcesses(std::vector<std::string> & _return);
  void filterAllAvgProcesses(const int64_t sample, const double cpu, const double mem, const double down, const double up, const std::vector<std::string> & processList);
  void send_filterAllAvgProcesses(const int64_t sample, const double cpu, const double mem, const double down, const double up, const std::vector<std::string> & processList);
  void recv_filterAllAvgProcesses();
  void getAvgProcess_PID(std::vector<std::string> & _return, const int64_t PID, const int64_t sample);
  void send_getAvgProcess_PID(const int64_t PID, const int64_t sample);
  void recv_getAvgProcess_PID(std::vector<std::string> & _return);
  void getAllProcesses(std::vector<std::string> & _return);
  void send_getAllProcesses();
  void recv_getAllProcesses(std::vector<std::string> & _return);
  void getNetwork(std::vector<std::string> & _return);
  void send_getNetwork();
  void recv_getNetwork(std::vector<std::string> & _return);
  void getTCP(std::vector<std::string> & _return);
  void send_getTCP();
  void recv_getTCP(std::vector<std::string> & _return);
  void getLogRelatedInformation(const int16_t timeInMinute, const int16_t summarizationLevel, const std::vector<std::string> & eventIndices, const std::string& logType, const std::string& process_name, const std::string& securityLevel);
  void send_getLogRelatedInformation(const int16_t timeInMinute, const int16_t summarizationLevel, const std::vector<std::string> & eventIndices, const std::string& logType, const std::string& process_name, const std::string& securityLevel);
  void recv_getLogRelatedInformation();
  void getImportantLogEventsWithoutSummarization(const int16_t timeInMinute);
  void send_getImportantLogEventsWithoutSummarization(const int16_t timeInMinute);
  void recv_getImportantLogEventsWithoutSummarization();
  void getImportantLogEvents(const int16_t timeInMinute);
  void send_getImportantLogEvents(const int16_t timeInMinute);
  void recv_getImportantLogEvents();
  void getFullLogInformation(const int16_t timeInMinute);
  void send_getFullLogInformation(const int16_t timeInMinute);
  void recv_getFullLogInformation();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class ProcessStatsProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<ProcessStatsIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (ProcessStatsProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getTotalCPU(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTotalMemory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFreeMemory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTotalNetDownload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTotalNetUpload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMaxCPU(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMinCPU(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMaxMemory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMinMemory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMaxNetDownload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMinNetDownload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMaxNetUpload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getMinNetUpload(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllCpuProc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllMemProc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllNetDownloadProc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllNetUploadProc(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_filterAllProcesses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_filterAllAvgProcesses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAvgProcess_PID(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getAllProcesses(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getNetwork(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getTCP(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getLogRelatedInformation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getImportantLogEventsWithoutSummarization(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getImportantLogEvents(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getFullLogInformation(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  ProcessStatsProcessor(boost::shared_ptr<ProcessStatsIf> iface) :
    iface_(iface) {
    processMap_["getTotalCPU"] = &ProcessStatsProcessor::process_getTotalCPU;
    processMap_["getTotalMemory"] = &ProcessStatsProcessor::process_getTotalMemory;
    processMap_["getFreeMemory"] = &ProcessStatsProcessor::process_getFreeMemory;
    processMap_["getTotalNetDownload"] = &ProcessStatsProcessor::process_getTotalNetDownload;
    processMap_["getTotalNetUpload"] = &ProcessStatsProcessor::process_getTotalNetUpload;
    processMap_["getMaxCPU"] = &ProcessStatsProcessor::process_getMaxCPU;
    processMap_["getMinCPU"] = &ProcessStatsProcessor::process_getMinCPU;
    processMap_["getMaxMemory"] = &ProcessStatsProcessor::process_getMaxMemory;
    processMap_["getMinMemory"] = &ProcessStatsProcessor::process_getMinMemory;
    processMap_["getMaxNetDownload"] = &ProcessStatsProcessor::process_getMaxNetDownload;
    processMap_["getMinNetDownload"] = &ProcessStatsProcessor::process_getMinNetDownload;
    processMap_["getMaxNetUpload"] = &ProcessStatsProcessor::process_getMaxNetUpload;
    processMap_["getMinNetUpload"] = &ProcessStatsProcessor::process_getMinNetUpload;
    processMap_["getAllCpuProc"] = &ProcessStatsProcessor::process_getAllCpuProc;
    processMap_["getAllMemProc"] = &ProcessStatsProcessor::process_getAllMemProc;
    processMap_["getAllNetDownloadProc"] = &ProcessStatsProcessor::process_getAllNetDownloadProc;
    processMap_["getAllNetUploadProc"] = &ProcessStatsProcessor::process_getAllNetUploadProc;
    processMap_["filterAllProcesses"] = &ProcessStatsProcessor::process_filterAllProcesses;
    processMap_["filterAllAvgProcesses"] = &ProcessStatsProcessor::process_filterAllAvgProcesses;
    processMap_["getAvgProcess_PID"] = &ProcessStatsProcessor::process_getAvgProcess_PID;
    processMap_["getAllProcesses"] = &ProcessStatsProcessor::process_getAllProcesses;
    processMap_["getNetwork"] = &ProcessStatsProcessor::process_getNetwork;
    processMap_["getTCP"] = &ProcessStatsProcessor::process_getTCP;
    processMap_["getLogRelatedInformation"] = &ProcessStatsProcessor::process_getLogRelatedInformation;
    processMap_["getImportantLogEventsWithoutSummarization"] = &ProcessStatsProcessor::process_getImportantLogEventsWithoutSummarization;
    processMap_["getImportantLogEvents"] = &ProcessStatsProcessor::process_getImportantLogEvents;
    processMap_["getFullLogInformation"] = &ProcessStatsProcessor::process_getFullLogInformation;
  }

  virtual ~ProcessStatsProcessor() {}
};

class ProcessStatsProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  ProcessStatsProcessorFactory(const ::boost::shared_ptr< ProcessStatsIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< ProcessStatsIfFactory > handlerFactory_;
};

class ProcessStatsMultiface : virtual public ProcessStatsIf {
 public:
  ProcessStatsMultiface(std::vector<boost::shared_ptr<ProcessStatsIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~ProcessStatsMultiface() {}
 protected:
  std::vector<boost::shared_ptr<ProcessStatsIf> > ifaces_;
  ProcessStatsMultiface() {}
  void add(boost::shared_ptr<ProcessStatsIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  double getTotalCPU() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTotalCPU();
    }
    return ifaces_[i]->getTotalCPU();
  }

  double getTotalMemory() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTotalMemory();
    }
    return ifaces_[i]->getTotalMemory();
  }

  int64_t getFreeMemory() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFreeMemory();
    }
    return ifaces_[i]->getFreeMemory();
  }

  double getTotalNetDownload() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTotalNetDownload();
    }
    return ifaces_[i]->getTotalNetDownload();
  }

  double getTotalNetUpload() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTotalNetUpload();
    }
    return ifaces_[i]->getTotalNetUpload();
  }

  void getMaxCPU(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMaxCPU(_return);
    }
    ifaces_[i]->getMaxCPU(_return);
    return;
  }

  void getMinCPU(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMinCPU(_return);
    }
    ifaces_[i]->getMinCPU(_return);
    return;
  }

  void getMaxMemory(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMaxMemory(_return);
    }
    ifaces_[i]->getMaxMemory(_return);
    return;
  }

  void getMinMemory(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMinMemory(_return);
    }
    ifaces_[i]->getMinMemory(_return);
    return;
  }

  void getMaxNetDownload(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMaxNetDownload(_return);
    }
    ifaces_[i]->getMaxNetDownload(_return);
    return;
  }

  void getMinNetDownload(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMinNetDownload(_return);
    }
    ifaces_[i]->getMinNetDownload(_return);
    return;
  }

  void getMaxNetUpload(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMaxNetUpload(_return);
    }
    ifaces_[i]->getMaxNetUpload(_return);
    return;
  }

  void getMinNetUpload(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getMinNetUpload(_return);
    }
    ifaces_[i]->getMinNetUpload(_return);
    return;
  }

  void getAllCpuProc(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllCpuProc(_return);
    }
    ifaces_[i]->getAllCpuProc(_return);
    return;
  }

  void getAllMemProc(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllMemProc(_return);
    }
    ifaces_[i]->getAllMemProc(_return);
    return;
  }

  void getAllNetDownloadProc(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllNetDownloadProc(_return);
    }
    ifaces_[i]->getAllNetDownloadProc(_return);
    return;
  }

  void getAllNetUploadProc(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllNetUploadProc(_return);
    }
    ifaces_[i]->getAllNetUploadProc(_return);
    return;
  }

  void filterAllProcesses(std::vector<std::string> & _return, const double cpu, const double mem, const double down, const double up, const std::string& processname) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->filterAllProcesses(_return, cpu, mem, down, up, processname);
    }
    ifaces_[i]->filterAllProcesses(_return, cpu, mem, down, up, processname);
    return;
  }

  void filterAllAvgProcesses(const int64_t sample, const double cpu, const double mem, const double down, const double up, const std::vector<std::string> & processList) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->filterAllAvgProcesses(sample, cpu, mem, down, up, processList);
    }
    ifaces_[i]->filterAllAvgProcesses(sample, cpu, mem, down, up, processList);
  }

  void getAvgProcess_PID(std::vector<std::string> & _return, const int64_t PID, const int64_t sample) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAvgProcess_PID(_return, PID, sample);
    }
    ifaces_[i]->getAvgProcess_PID(_return, PID, sample);
    return;
  }

  void getAllProcesses(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getAllProcesses(_return);
    }
    ifaces_[i]->getAllProcesses(_return);
    return;
  }

  void getNetwork(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getNetwork(_return);
    }
    ifaces_[i]->getNetwork(_return);
    return;
  }

  void getTCP(std::vector<std::string> & _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getTCP(_return);
    }
    ifaces_[i]->getTCP(_return);
    return;
  }

  void getLogRelatedInformation(const int16_t timeInMinute, const int16_t summarizationLevel, const std::vector<std::string> & eventIndices, const std::string& logType, const std::string& process_name, const std::string& securityLevel) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getLogRelatedInformation(timeInMinute, summarizationLevel, eventIndices, logType, process_name, securityLevel);
    }
    ifaces_[i]->getLogRelatedInformation(timeInMinute, summarizationLevel, eventIndices, logType, process_name, securityLevel);
  }

  void getImportantLogEventsWithoutSummarization(const int16_t timeInMinute) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getImportantLogEventsWithoutSummarization(timeInMinute);
    }
    ifaces_[i]->getImportantLogEventsWithoutSummarization(timeInMinute);
  }

  void getImportantLogEvents(const int16_t timeInMinute) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getImportantLogEvents(timeInMinute);
    }
    ifaces_[i]->getImportantLogEvents(timeInMinute);
  }

  void getFullLogInformation(const int16_t timeInMinute) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getFullLogInformation(timeInMinute);
    }
    ifaces_[i]->getFullLogInformation(timeInMinute);
  }

};

} // namespace

#endif
