/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RegisterDeviceService_H
#define RegisterDeviceService_H

#include <thrift/TDispatchProcessor.h>
#include "centralNodeServiceV11_types.h"

namespace HydraCN {

class RegisterDeviceServiceIf {
 public:
  virtual ~RegisterDeviceServiceIf() {}
  virtual bool registerDevice(const Device& device) = 0;
  virtual bool getCommands(const Device& device) = 0;
  virtual bool pushProcessesInfo(const std::vector<ThriftAgentProcessInfo> & processes) = 0;
  virtual bool pushLogInfo(const std::vector<myLogStructure> & logInfo) = 0;
  virtual bool pushUsersInfo(const std::vector<myUserAccountDetailsStruct> & usersInfo) = 0;
  virtual bool pushCurrentUserInfo(const myUserAccountDetailsStruct& userInfo) = 0;
  virtual bool pushLogInfoTest1(const std::vector<myLogStructure> & logInfo) = 0;
};

class RegisterDeviceServiceIfFactory {
 public:
  typedef RegisterDeviceServiceIf Handler;

  virtual ~RegisterDeviceServiceIfFactory() {}

  virtual RegisterDeviceServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RegisterDeviceServiceIf* /* handler */) = 0;
};

class RegisterDeviceServiceIfSingletonFactory : virtual public RegisterDeviceServiceIfFactory {
 public:
  RegisterDeviceServiceIfSingletonFactory(const boost::shared_ptr<RegisterDeviceServiceIf>& iface) : iface_(iface) {}
  virtual ~RegisterDeviceServiceIfSingletonFactory() {}

  virtual RegisterDeviceServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RegisterDeviceServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RegisterDeviceServiceIf> iface_;
};

class RegisterDeviceServiceNull : virtual public RegisterDeviceServiceIf {
 public:
  virtual ~RegisterDeviceServiceNull() {}
  bool registerDevice(const Device& /* device */) {
    bool _return = false;
    return _return;
  }
  bool getCommands(const Device& /* device */) {
    bool _return = false;
    return _return;
  }
  bool pushProcessesInfo(const std::vector<ThriftAgentProcessInfo> & /* processes */) {
    bool _return = false;
    return _return;
  }
  bool pushLogInfo(const std::vector<myLogStructure> & /* logInfo */) {
    bool _return = false;
    return _return;
  }
  bool pushUsersInfo(const std::vector<myUserAccountDetailsStruct> & /* usersInfo */) {
    bool _return = false;
    return _return;
  }
  bool pushCurrentUserInfo(const myUserAccountDetailsStruct& /* userInfo */) {
    bool _return = false;
    return _return;
  }
  bool pushLogInfoTest1(const std::vector<myLogStructure> & /* logInfo */) {
    bool _return = false;
    return _return;
  }
};

typedef struct _RegisterDeviceService_registerDevice_args__isset {
  _RegisterDeviceService_registerDevice_args__isset() : device(false) {}
  bool device :1;
} _RegisterDeviceService_registerDevice_args__isset;

class RegisterDeviceService_registerDevice_args {
 public:

  static const char* ascii_fingerprint; // = "2777DAAC6BF25455A28C2672DEAA17C2";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x77,0xDA,0xAC,0x6B,0xF2,0x54,0x55,0xA2,0x8C,0x26,0x72,0xDE,0xAA,0x17,0xC2};

  RegisterDeviceService_registerDevice_args(const RegisterDeviceService_registerDevice_args&);
  RegisterDeviceService_registerDevice_args& operator=(const RegisterDeviceService_registerDevice_args&);
  RegisterDeviceService_registerDevice_args() {
  }

  virtual ~RegisterDeviceService_registerDevice_args() throw();
  Device device;

  _RegisterDeviceService_registerDevice_args__isset __isset;

  void __set_device(const Device& val);

  bool operator == (const RegisterDeviceService_registerDevice_args & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_registerDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_registerDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_registerDevice_args& obj);
};


class RegisterDeviceService_registerDevice_pargs {
 public:

  static const char* ascii_fingerprint; // = "2777DAAC6BF25455A28C2672DEAA17C2";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x77,0xDA,0xAC,0x6B,0xF2,0x54,0x55,0xA2,0x8C,0x26,0x72,0xDE,0xAA,0x17,0xC2};


  virtual ~RegisterDeviceService_registerDevice_pargs() throw();
  const Device* device;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_registerDevice_pargs& obj);
};

typedef struct _RegisterDeviceService_registerDevice_result__isset {
  _RegisterDeviceService_registerDevice_result__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_registerDevice_result__isset;

class RegisterDeviceService_registerDevice_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  RegisterDeviceService_registerDevice_result(const RegisterDeviceService_registerDevice_result&);
  RegisterDeviceService_registerDevice_result& operator=(const RegisterDeviceService_registerDevice_result&);
  RegisterDeviceService_registerDevice_result() : success(0) {
  }

  virtual ~RegisterDeviceService_registerDevice_result() throw();
  bool success;

  _RegisterDeviceService_registerDevice_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RegisterDeviceService_registerDevice_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_registerDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_registerDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_registerDevice_result& obj);
};

typedef struct _RegisterDeviceService_registerDevice_presult__isset {
  _RegisterDeviceService_registerDevice_presult__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_registerDevice_presult__isset;

class RegisterDeviceService_registerDevice_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~RegisterDeviceService_registerDevice_presult() throw();
  bool* success;

  _RegisterDeviceService_registerDevice_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_registerDevice_presult& obj);
};

typedef struct _RegisterDeviceService_getCommands_args__isset {
  _RegisterDeviceService_getCommands_args__isset() : device(false) {}
  bool device :1;
} _RegisterDeviceService_getCommands_args__isset;

class RegisterDeviceService_getCommands_args {
 public:

  static const char* ascii_fingerprint; // = "2777DAAC6BF25455A28C2672DEAA17C2";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x77,0xDA,0xAC,0x6B,0xF2,0x54,0x55,0xA2,0x8C,0x26,0x72,0xDE,0xAA,0x17,0xC2};

  RegisterDeviceService_getCommands_args(const RegisterDeviceService_getCommands_args&);
  RegisterDeviceService_getCommands_args& operator=(const RegisterDeviceService_getCommands_args&);
  RegisterDeviceService_getCommands_args() {
  }

  virtual ~RegisterDeviceService_getCommands_args() throw();
  Device device;

  _RegisterDeviceService_getCommands_args__isset __isset;

  void __set_device(const Device& val);

  bool operator == (const RegisterDeviceService_getCommands_args & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_getCommands_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_getCommands_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_getCommands_args& obj);
};


class RegisterDeviceService_getCommands_pargs {
 public:

  static const char* ascii_fingerprint; // = "2777DAAC6BF25455A28C2672DEAA17C2";
  static const uint8_t binary_fingerprint[16]; // = {0x27,0x77,0xDA,0xAC,0x6B,0xF2,0x54,0x55,0xA2,0x8C,0x26,0x72,0xDE,0xAA,0x17,0xC2};


  virtual ~RegisterDeviceService_getCommands_pargs() throw();
  const Device* device;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_getCommands_pargs& obj);
};

typedef struct _RegisterDeviceService_getCommands_result__isset {
  _RegisterDeviceService_getCommands_result__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_getCommands_result__isset;

class RegisterDeviceService_getCommands_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  RegisterDeviceService_getCommands_result(const RegisterDeviceService_getCommands_result&);
  RegisterDeviceService_getCommands_result& operator=(const RegisterDeviceService_getCommands_result&);
  RegisterDeviceService_getCommands_result() : success(0) {
  }

  virtual ~RegisterDeviceService_getCommands_result() throw();
  bool success;

  _RegisterDeviceService_getCommands_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RegisterDeviceService_getCommands_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_getCommands_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_getCommands_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_getCommands_result& obj);
};

typedef struct _RegisterDeviceService_getCommands_presult__isset {
  _RegisterDeviceService_getCommands_presult__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_getCommands_presult__isset;

class RegisterDeviceService_getCommands_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~RegisterDeviceService_getCommands_presult() throw();
  bool* success;

  _RegisterDeviceService_getCommands_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_getCommands_presult& obj);
};

typedef struct _RegisterDeviceService_pushProcessesInfo_args__isset {
  _RegisterDeviceService_pushProcessesInfo_args__isset() : processes(false) {}
  bool processes :1;
} _RegisterDeviceService_pushProcessesInfo_args__isset;

class RegisterDeviceService_pushProcessesInfo_args {
 public:

  static const char* ascii_fingerprint; // = "A5E9118306C547B97C6F586880AE72F0";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0xE9,0x11,0x83,0x06,0xC5,0x47,0xB9,0x7C,0x6F,0x58,0x68,0x80,0xAE,0x72,0xF0};

  RegisterDeviceService_pushProcessesInfo_args(const RegisterDeviceService_pushProcessesInfo_args&);
  RegisterDeviceService_pushProcessesInfo_args& operator=(const RegisterDeviceService_pushProcessesInfo_args&);
  RegisterDeviceService_pushProcessesInfo_args() {
  }

  virtual ~RegisterDeviceService_pushProcessesInfo_args() throw();
  std::vector<ThriftAgentProcessInfo>  processes;

  _RegisterDeviceService_pushProcessesInfo_args__isset __isset;

  void __set_processes(const std::vector<ThriftAgentProcessInfo> & val);

  bool operator == (const RegisterDeviceService_pushProcessesInfo_args & rhs) const
  {
    if (!(processes == rhs.processes))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_pushProcessesInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_pushProcessesInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushProcessesInfo_args& obj);
};


class RegisterDeviceService_pushProcessesInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "A5E9118306C547B97C6F586880AE72F0";
  static const uint8_t binary_fingerprint[16]; // = {0xA5,0xE9,0x11,0x83,0x06,0xC5,0x47,0xB9,0x7C,0x6F,0x58,0x68,0x80,0xAE,0x72,0xF0};


  virtual ~RegisterDeviceService_pushProcessesInfo_pargs() throw();
  const std::vector<ThriftAgentProcessInfo> * processes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushProcessesInfo_pargs& obj);
};

typedef struct _RegisterDeviceService_pushProcessesInfo_result__isset {
  _RegisterDeviceService_pushProcessesInfo_result__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_pushProcessesInfo_result__isset;

class RegisterDeviceService_pushProcessesInfo_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  RegisterDeviceService_pushProcessesInfo_result(const RegisterDeviceService_pushProcessesInfo_result&);
  RegisterDeviceService_pushProcessesInfo_result& operator=(const RegisterDeviceService_pushProcessesInfo_result&);
  RegisterDeviceService_pushProcessesInfo_result() : success(0) {
  }

  virtual ~RegisterDeviceService_pushProcessesInfo_result() throw();
  bool success;

  _RegisterDeviceService_pushProcessesInfo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RegisterDeviceService_pushProcessesInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_pushProcessesInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_pushProcessesInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushProcessesInfo_result& obj);
};

typedef struct _RegisterDeviceService_pushProcessesInfo_presult__isset {
  _RegisterDeviceService_pushProcessesInfo_presult__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_pushProcessesInfo_presult__isset;

class RegisterDeviceService_pushProcessesInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~RegisterDeviceService_pushProcessesInfo_presult() throw();
  bool* success;

  _RegisterDeviceService_pushProcessesInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushProcessesInfo_presult& obj);
};

typedef struct _RegisterDeviceService_pushLogInfo_args__isset {
  _RegisterDeviceService_pushLogInfo_args__isset() : logInfo(false) {}
  bool logInfo :1;
} _RegisterDeviceService_pushLogInfo_args__isset;

class RegisterDeviceService_pushLogInfo_args {
 public:

  static const char* ascii_fingerprint; // = "07468BF015F3A0143CBED4C9C8A7EBB1";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x46,0x8B,0xF0,0x15,0xF3,0xA0,0x14,0x3C,0xBE,0xD4,0xC9,0xC8,0xA7,0xEB,0xB1};

  RegisterDeviceService_pushLogInfo_args(const RegisterDeviceService_pushLogInfo_args&);
  RegisterDeviceService_pushLogInfo_args& operator=(const RegisterDeviceService_pushLogInfo_args&);
  RegisterDeviceService_pushLogInfo_args() {
  }

  virtual ~RegisterDeviceService_pushLogInfo_args() throw();
  std::vector<myLogStructure>  logInfo;

  _RegisterDeviceService_pushLogInfo_args__isset __isset;

  void __set_logInfo(const std::vector<myLogStructure> & val);

  bool operator == (const RegisterDeviceService_pushLogInfo_args & rhs) const
  {
    if (!(logInfo == rhs.logInfo))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_pushLogInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_pushLogInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushLogInfo_args& obj);
};


class RegisterDeviceService_pushLogInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "07468BF015F3A0143CBED4C9C8A7EBB1";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x46,0x8B,0xF0,0x15,0xF3,0xA0,0x14,0x3C,0xBE,0xD4,0xC9,0xC8,0xA7,0xEB,0xB1};


  virtual ~RegisterDeviceService_pushLogInfo_pargs() throw();
  const std::vector<myLogStructure> * logInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushLogInfo_pargs& obj);
};

typedef struct _RegisterDeviceService_pushLogInfo_result__isset {
  _RegisterDeviceService_pushLogInfo_result__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_pushLogInfo_result__isset;

class RegisterDeviceService_pushLogInfo_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  RegisterDeviceService_pushLogInfo_result(const RegisterDeviceService_pushLogInfo_result&);
  RegisterDeviceService_pushLogInfo_result& operator=(const RegisterDeviceService_pushLogInfo_result&);
  RegisterDeviceService_pushLogInfo_result() : success(0) {
  }

  virtual ~RegisterDeviceService_pushLogInfo_result() throw();
  bool success;

  _RegisterDeviceService_pushLogInfo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RegisterDeviceService_pushLogInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_pushLogInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_pushLogInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushLogInfo_result& obj);
};

typedef struct _RegisterDeviceService_pushLogInfo_presult__isset {
  _RegisterDeviceService_pushLogInfo_presult__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_pushLogInfo_presult__isset;

class RegisterDeviceService_pushLogInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~RegisterDeviceService_pushLogInfo_presult() throw();
  bool* success;

  _RegisterDeviceService_pushLogInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushLogInfo_presult& obj);
};

typedef struct _RegisterDeviceService_pushUsersInfo_args__isset {
  _RegisterDeviceService_pushUsersInfo_args__isset() : usersInfo(false) {}
  bool usersInfo :1;
} _RegisterDeviceService_pushUsersInfo_args__isset;

class RegisterDeviceService_pushUsersInfo_args {
 public:

  static const char* ascii_fingerprint; // = "3D64C8929A4F55768B5F3CDF3689F3C8";
  static const uint8_t binary_fingerprint[16]; // = {0x3D,0x64,0xC8,0x92,0x9A,0x4F,0x55,0x76,0x8B,0x5F,0x3C,0xDF,0x36,0x89,0xF3,0xC8};

  RegisterDeviceService_pushUsersInfo_args(const RegisterDeviceService_pushUsersInfo_args&);
  RegisterDeviceService_pushUsersInfo_args& operator=(const RegisterDeviceService_pushUsersInfo_args&);
  RegisterDeviceService_pushUsersInfo_args() {
  }

  virtual ~RegisterDeviceService_pushUsersInfo_args() throw();
  std::vector<myUserAccountDetailsStruct>  usersInfo;

  _RegisterDeviceService_pushUsersInfo_args__isset __isset;

  void __set_usersInfo(const std::vector<myUserAccountDetailsStruct> & val);

  bool operator == (const RegisterDeviceService_pushUsersInfo_args & rhs) const
  {
    if (!(usersInfo == rhs.usersInfo))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_pushUsersInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_pushUsersInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushUsersInfo_args& obj);
};


class RegisterDeviceService_pushUsersInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "3D64C8929A4F55768B5F3CDF3689F3C8";
  static const uint8_t binary_fingerprint[16]; // = {0x3D,0x64,0xC8,0x92,0x9A,0x4F,0x55,0x76,0x8B,0x5F,0x3C,0xDF,0x36,0x89,0xF3,0xC8};


  virtual ~RegisterDeviceService_pushUsersInfo_pargs() throw();
  const std::vector<myUserAccountDetailsStruct> * usersInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushUsersInfo_pargs& obj);
};

typedef struct _RegisterDeviceService_pushUsersInfo_result__isset {
  _RegisterDeviceService_pushUsersInfo_result__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_pushUsersInfo_result__isset;

class RegisterDeviceService_pushUsersInfo_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  RegisterDeviceService_pushUsersInfo_result(const RegisterDeviceService_pushUsersInfo_result&);
  RegisterDeviceService_pushUsersInfo_result& operator=(const RegisterDeviceService_pushUsersInfo_result&);
  RegisterDeviceService_pushUsersInfo_result() : success(0) {
  }

  virtual ~RegisterDeviceService_pushUsersInfo_result() throw();
  bool success;

  _RegisterDeviceService_pushUsersInfo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RegisterDeviceService_pushUsersInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_pushUsersInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_pushUsersInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushUsersInfo_result& obj);
};

typedef struct _RegisterDeviceService_pushUsersInfo_presult__isset {
  _RegisterDeviceService_pushUsersInfo_presult__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_pushUsersInfo_presult__isset;

class RegisterDeviceService_pushUsersInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~RegisterDeviceService_pushUsersInfo_presult() throw();
  bool* success;

  _RegisterDeviceService_pushUsersInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushUsersInfo_presult& obj);
};

typedef struct _RegisterDeviceService_pushCurrentUserInfo_args__isset {
  _RegisterDeviceService_pushCurrentUserInfo_args__isset() : userInfo(false) {}
  bool userInfo :1;
} _RegisterDeviceService_pushCurrentUserInfo_args__isset;

class RegisterDeviceService_pushCurrentUserInfo_args {
 public:

  static const char* ascii_fingerprint; // = "BC3D14CECFD529BA650087E9873A2F3D";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x3D,0x14,0xCE,0xCF,0xD5,0x29,0xBA,0x65,0x00,0x87,0xE9,0x87,0x3A,0x2F,0x3D};

  RegisterDeviceService_pushCurrentUserInfo_args(const RegisterDeviceService_pushCurrentUserInfo_args&);
  RegisterDeviceService_pushCurrentUserInfo_args& operator=(const RegisterDeviceService_pushCurrentUserInfo_args&);
  RegisterDeviceService_pushCurrentUserInfo_args() {
  }

  virtual ~RegisterDeviceService_pushCurrentUserInfo_args() throw();
  myUserAccountDetailsStruct userInfo;

  _RegisterDeviceService_pushCurrentUserInfo_args__isset __isset;

  void __set_userInfo(const myUserAccountDetailsStruct& val);

  bool operator == (const RegisterDeviceService_pushCurrentUserInfo_args & rhs) const
  {
    if (!(userInfo == rhs.userInfo))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_pushCurrentUserInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_pushCurrentUserInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushCurrentUserInfo_args& obj);
};


class RegisterDeviceService_pushCurrentUserInfo_pargs {
 public:

  static const char* ascii_fingerprint; // = "BC3D14CECFD529BA650087E9873A2F3D";
  static const uint8_t binary_fingerprint[16]; // = {0xBC,0x3D,0x14,0xCE,0xCF,0xD5,0x29,0xBA,0x65,0x00,0x87,0xE9,0x87,0x3A,0x2F,0x3D};


  virtual ~RegisterDeviceService_pushCurrentUserInfo_pargs() throw();
  const myUserAccountDetailsStruct* userInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushCurrentUserInfo_pargs& obj);
};

typedef struct _RegisterDeviceService_pushCurrentUserInfo_result__isset {
  _RegisterDeviceService_pushCurrentUserInfo_result__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_pushCurrentUserInfo_result__isset;

class RegisterDeviceService_pushCurrentUserInfo_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  RegisterDeviceService_pushCurrentUserInfo_result(const RegisterDeviceService_pushCurrentUserInfo_result&);
  RegisterDeviceService_pushCurrentUserInfo_result& operator=(const RegisterDeviceService_pushCurrentUserInfo_result&);
  RegisterDeviceService_pushCurrentUserInfo_result() : success(0) {
  }

  virtual ~RegisterDeviceService_pushCurrentUserInfo_result() throw();
  bool success;

  _RegisterDeviceService_pushCurrentUserInfo_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RegisterDeviceService_pushCurrentUserInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_pushCurrentUserInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_pushCurrentUserInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushCurrentUserInfo_result& obj);
};

typedef struct _RegisterDeviceService_pushCurrentUserInfo_presult__isset {
  _RegisterDeviceService_pushCurrentUserInfo_presult__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_pushCurrentUserInfo_presult__isset;

class RegisterDeviceService_pushCurrentUserInfo_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~RegisterDeviceService_pushCurrentUserInfo_presult() throw();
  bool* success;

  _RegisterDeviceService_pushCurrentUserInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushCurrentUserInfo_presult& obj);
};

typedef struct _RegisterDeviceService_pushLogInfoTest1_args__isset {
  _RegisterDeviceService_pushLogInfoTest1_args__isset() : logInfo(false) {}
  bool logInfo :1;
} _RegisterDeviceService_pushLogInfoTest1_args__isset;

class RegisterDeviceService_pushLogInfoTest1_args {
 public:

  static const char* ascii_fingerprint; // = "07468BF015F3A0143CBED4C9C8A7EBB1";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x46,0x8B,0xF0,0x15,0xF3,0xA0,0x14,0x3C,0xBE,0xD4,0xC9,0xC8,0xA7,0xEB,0xB1};

  RegisterDeviceService_pushLogInfoTest1_args(const RegisterDeviceService_pushLogInfoTest1_args&);
  RegisterDeviceService_pushLogInfoTest1_args& operator=(const RegisterDeviceService_pushLogInfoTest1_args&);
  RegisterDeviceService_pushLogInfoTest1_args() {
  }

  virtual ~RegisterDeviceService_pushLogInfoTest1_args() throw();
  std::vector<myLogStructure>  logInfo;

  _RegisterDeviceService_pushLogInfoTest1_args__isset __isset;

  void __set_logInfo(const std::vector<myLogStructure> & val);

  bool operator == (const RegisterDeviceService_pushLogInfoTest1_args & rhs) const
  {
    if (!(logInfo == rhs.logInfo))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_pushLogInfoTest1_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_pushLogInfoTest1_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushLogInfoTest1_args& obj);
};


class RegisterDeviceService_pushLogInfoTest1_pargs {
 public:

  static const char* ascii_fingerprint; // = "07468BF015F3A0143CBED4C9C8A7EBB1";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0x46,0x8B,0xF0,0x15,0xF3,0xA0,0x14,0x3C,0xBE,0xD4,0xC9,0xC8,0xA7,0xEB,0xB1};


  virtual ~RegisterDeviceService_pushLogInfoTest1_pargs() throw();
  const std::vector<myLogStructure> * logInfo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushLogInfoTest1_pargs& obj);
};

typedef struct _RegisterDeviceService_pushLogInfoTest1_result__isset {
  _RegisterDeviceService_pushLogInfoTest1_result__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_pushLogInfoTest1_result__isset;

class RegisterDeviceService_pushLogInfoTest1_result {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};

  RegisterDeviceService_pushLogInfoTest1_result(const RegisterDeviceService_pushLogInfoTest1_result&);
  RegisterDeviceService_pushLogInfoTest1_result& operator=(const RegisterDeviceService_pushLogInfoTest1_result&);
  RegisterDeviceService_pushLogInfoTest1_result() : success(0) {
  }

  virtual ~RegisterDeviceService_pushLogInfoTest1_result() throw();
  bool success;

  _RegisterDeviceService_pushLogInfoTest1_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RegisterDeviceService_pushLogInfoTest1_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_pushLogInfoTest1_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_pushLogInfoTest1_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushLogInfoTest1_result& obj);
};

typedef struct _RegisterDeviceService_pushLogInfoTest1_presult__isset {
  _RegisterDeviceService_pushLogInfoTest1_presult__isset() : success(false) {}
  bool success :1;
} _RegisterDeviceService_pushLogInfoTest1_presult__isset;

class RegisterDeviceService_pushLogInfoTest1_presult {
 public:

  static const char* ascii_fingerprint; // = "D9D3B4421B1F23CB4063C80B484E7909";
  static const uint8_t binary_fingerprint[16]; // = {0xD9,0xD3,0xB4,0x42,0x1B,0x1F,0x23,0xCB,0x40,0x63,0xC8,0x0B,0x48,0x4E,0x79,0x09};


  virtual ~RegisterDeviceService_pushLogInfoTest1_presult() throw();
  bool* success;

  _RegisterDeviceService_pushLogInfoTest1_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_pushLogInfoTest1_presult& obj);
};

class RegisterDeviceServiceClient : virtual public RegisterDeviceServiceIf {
 public:
  RegisterDeviceServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RegisterDeviceServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool registerDevice(const Device& device);
  void send_registerDevice(const Device& device);
  bool recv_registerDevice();
  bool getCommands(const Device& device);
  void send_getCommands(const Device& device);
  bool recv_getCommands();
  bool pushProcessesInfo(const std::vector<ThriftAgentProcessInfo> & processes);
  void send_pushProcessesInfo(const std::vector<ThriftAgentProcessInfo> & processes);
  bool recv_pushProcessesInfo();
  bool pushLogInfo(const std::vector<myLogStructure> & logInfo);
  void send_pushLogInfo(const std::vector<myLogStructure> & logInfo);
  bool recv_pushLogInfo();
  bool pushUsersInfo(const std::vector<myUserAccountDetailsStruct> & usersInfo);
  void send_pushUsersInfo(const std::vector<myUserAccountDetailsStruct> & usersInfo);
  bool recv_pushUsersInfo();
  bool pushCurrentUserInfo(const myUserAccountDetailsStruct& userInfo);
  void send_pushCurrentUserInfo(const myUserAccountDetailsStruct& userInfo);
  bool recv_pushCurrentUserInfo();
  bool pushLogInfoTest1(const std::vector<myLogStructure> & logInfo);
  void send_pushLogInfoTest1(const std::vector<myLogStructure> & logInfo);
  bool recv_pushLogInfoTest1();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RegisterDeviceServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RegisterDeviceServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RegisterDeviceServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_registerDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getCommands(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushProcessesInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushLogInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushUsersInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushCurrentUserInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_pushLogInfoTest1(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RegisterDeviceServiceProcessor(boost::shared_ptr<RegisterDeviceServiceIf> iface) :
    iface_(iface) {
    processMap_["registerDevice"] = &RegisterDeviceServiceProcessor::process_registerDevice;
    processMap_["getCommands"] = &RegisterDeviceServiceProcessor::process_getCommands;
    processMap_["pushProcessesInfo"] = &RegisterDeviceServiceProcessor::process_pushProcessesInfo;
    processMap_["pushLogInfo"] = &RegisterDeviceServiceProcessor::process_pushLogInfo;
    processMap_["pushUsersInfo"] = &RegisterDeviceServiceProcessor::process_pushUsersInfo;
    processMap_["pushCurrentUserInfo"] = &RegisterDeviceServiceProcessor::process_pushCurrentUserInfo;
    processMap_["pushLogInfoTest1"] = &RegisterDeviceServiceProcessor::process_pushLogInfoTest1;
  }

  virtual ~RegisterDeviceServiceProcessor() {}
};

class RegisterDeviceServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RegisterDeviceServiceProcessorFactory(const ::boost::shared_ptr< RegisterDeviceServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RegisterDeviceServiceIfFactory > handlerFactory_;
};

class RegisterDeviceServiceMultiface : virtual public RegisterDeviceServiceIf {
 public:
  RegisterDeviceServiceMultiface(std::vector<boost::shared_ptr<RegisterDeviceServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RegisterDeviceServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RegisterDeviceServiceIf> > ifaces_;
  RegisterDeviceServiceMultiface() {}
  void add(boost::shared_ptr<RegisterDeviceServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool registerDevice(const Device& device) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerDevice(device);
    }
    return ifaces_[i]->registerDevice(device);
  }

  bool getCommands(const Device& device) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getCommands(device);
    }
    return ifaces_[i]->getCommands(device);
  }

  bool pushProcessesInfo(const std::vector<ThriftAgentProcessInfo> & processes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushProcessesInfo(processes);
    }
    return ifaces_[i]->pushProcessesInfo(processes);
  }

  bool pushLogInfo(const std::vector<myLogStructure> & logInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushLogInfo(logInfo);
    }
    return ifaces_[i]->pushLogInfo(logInfo);
  }

  bool pushUsersInfo(const std::vector<myUserAccountDetailsStruct> & usersInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushUsersInfo(usersInfo);
    }
    return ifaces_[i]->pushUsersInfo(usersInfo);
  }

  bool pushCurrentUserInfo(const myUserAccountDetailsStruct& userInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushCurrentUserInfo(userInfo);
    }
    return ifaces_[i]->pushCurrentUserInfo(userInfo);
  }

  bool pushLogInfoTest1(const std::vector<myLogStructure> & logInfo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->pushLogInfoTest1(logInfo);
    }
    return ifaces_[i]->pushLogInfoTest1(logInfo);
  }

};

} // namespace

#endif
