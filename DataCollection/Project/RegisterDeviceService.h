/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RegisterDeviceService_H
#define RegisterDeviceService_H

#include <thrift/TDispatchProcessor.h>
#include "centralnodeService_types.h"

namespace HydraCN {

class RegisterDeviceServiceIf {
 public:
  virtual ~RegisterDeviceServiceIf() {}
  virtual void registerDevice(const Device& device) = 0;
};

class RegisterDeviceServiceIfFactory {
 public:
  typedef RegisterDeviceServiceIf Handler;

  virtual ~RegisterDeviceServiceIfFactory() {}

  virtual RegisterDeviceServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RegisterDeviceServiceIf* /* handler */) = 0;
};

class RegisterDeviceServiceIfSingletonFactory : virtual public RegisterDeviceServiceIfFactory {
 public:
  RegisterDeviceServiceIfSingletonFactory(const boost::shared_ptr<RegisterDeviceServiceIf>& iface) : iface_(iface) {}
  virtual ~RegisterDeviceServiceIfSingletonFactory() {}

  virtual RegisterDeviceServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RegisterDeviceServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RegisterDeviceServiceIf> iface_;
};

class RegisterDeviceServiceNull : virtual public RegisterDeviceServiceIf {
 public:
  virtual ~RegisterDeviceServiceNull() {}
  void registerDevice(const Device& /* device */) {
    return;
  }
};

typedef struct _RegisterDeviceService_registerDevice_args__isset {
  _RegisterDeviceService_registerDevice_args__isset() : device(false) {}
  bool device :1;
} _RegisterDeviceService_registerDevice_args__isset;

class RegisterDeviceService_registerDevice_args {
 public:

  static const char* ascii_fingerprint; // = "636807D016867BC3A79FD54005E0677E";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0x68,0x07,0xD0,0x16,0x86,0x7B,0xC3,0xA7,0x9F,0xD5,0x40,0x05,0xE0,0x67,0x7E};

  RegisterDeviceService_registerDevice_args(const RegisterDeviceService_registerDevice_args&);
  RegisterDeviceService_registerDevice_args& operator=(const RegisterDeviceService_registerDevice_args&);
  RegisterDeviceService_registerDevice_args() {
  }

  virtual ~RegisterDeviceService_registerDevice_args() throw();
  Device device;

  _RegisterDeviceService_registerDevice_args__isset __isset;

  void __set_device(const Device& val);

  bool operator == (const RegisterDeviceService_registerDevice_args & rhs) const
  {
    if (!(device == rhs.device))
      return false;
    return true;
  }
  bool operator != (const RegisterDeviceService_registerDevice_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_registerDevice_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_registerDevice_args& obj);
};


class RegisterDeviceService_registerDevice_pargs {
 public:

  static const char* ascii_fingerprint; // = "636807D016867BC3A79FD54005E0677E";
  static const uint8_t binary_fingerprint[16]; // = {0x63,0x68,0x07,0xD0,0x16,0x86,0x7B,0xC3,0xA7,0x9F,0xD5,0x40,0x05,0xE0,0x67,0x7E};


  virtual ~RegisterDeviceService_registerDevice_pargs() throw();
  const Device* device;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_registerDevice_pargs& obj);
};


class RegisterDeviceService_registerDevice_result {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};

  RegisterDeviceService_registerDevice_result(const RegisterDeviceService_registerDevice_result&);
  RegisterDeviceService_registerDevice_result& operator=(const RegisterDeviceService_registerDevice_result&);
  RegisterDeviceService_registerDevice_result() {
  }

  virtual ~RegisterDeviceService_registerDevice_result() throw();

  bool operator == (const RegisterDeviceService_registerDevice_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RegisterDeviceService_registerDevice_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RegisterDeviceService_registerDevice_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_registerDevice_result& obj);
};


class RegisterDeviceService_registerDevice_presult {
 public:

  static const char* ascii_fingerprint; // = "99914B932BD37A50B983C5E7C90AE93B";
  static const uint8_t binary_fingerprint[16]; // = {0x99,0x91,0x4B,0x93,0x2B,0xD3,0x7A,0x50,0xB9,0x83,0xC5,0xE7,0xC9,0x0A,0xE9,0x3B};


  virtual ~RegisterDeviceService_registerDevice_presult() throw();

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

  friend std::ostream& operator<<(std::ostream& out, const RegisterDeviceService_registerDevice_presult& obj);
};

class RegisterDeviceServiceClient : virtual public RegisterDeviceServiceIf {
 public:
  RegisterDeviceServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RegisterDeviceServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void registerDevice(const Device& device);
  void send_registerDevice(const Device& device);
  void recv_registerDevice();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RegisterDeviceServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RegisterDeviceServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RegisterDeviceServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_registerDevice(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RegisterDeviceServiceProcessor(boost::shared_ptr<RegisterDeviceServiceIf> iface) :
    iface_(iface) {
    processMap_["registerDevice"] = &RegisterDeviceServiceProcessor::process_registerDevice;
  }

  virtual ~RegisterDeviceServiceProcessor() {}
};

class RegisterDeviceServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RegisterDeviceServiceProcessorFactory(const ::boost::shared_ptr< RegisterDeviceServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RegisterDeviceServiceIfFactory > handlerFactory_;
};

class RegisterDeviceServiceMultiface : virtual public RegisterDeviceServiceIf {
 public:
  RegisterDeviceServiceMultiface(std::vector<boost::shared_ptr<RegisterDeviceServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RegisterDeviceServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RegisterDeviceServiceIf> > ifaces_;
  RegisterDeviceServiceMultiface() {}
  void add(boost::shared_ptr<RegisterDeviceServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void registerDevice(const Device& device) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->registerDevice(device);
    }
    ifaces_[i]->registerDevice(device);
  }

};

} // namespace

#endif
