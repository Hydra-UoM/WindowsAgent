/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef centralNodeServiceV10_TYPES_H
#define centralNodeServiceV10_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>


namespace HydraCN {

class Device;

class ThriftAgentProcessInfo;

class myUserAccountDetailsStruct;

class myRuleInformation;

class mySubject;

class myProviderInformation;

class myObject;

class myProcessInformation;

class myNewLogon;

class myNetworkInformation;

class myLogonType;

class myLayerInformation;

class myImpersonationLevel;

class myFilterInformation;

class myFailureInformation;

class myErrorInformation;

class myDetailedAuthenticationInformation;

class myChangeInformation;

class myCalloutInformation;

class myApplicationInformation;

class myAccountForWhichLogonFailed;

class myAccessRequestInformation;

class myTimeStamp;

class myLogStructure;

typedef struct _Device__isset {
  _Device__isset() : deviceId(false), IPAddress(false), port(false), type(false), group(false), name(false) {}
  bool deviceId :1;
  bool IPAddress :1;
  bool port :1;
  bool type :1;
  bool group :1;
  bool name :1;
} _Device__isset;

class Device {
 public:

  static const char* ascii_fingerprint; // = "873CB9E5A4C10A7ECE7476FD192F55EE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

  Device(const Device&);
  Device& operator=(const Device&);
  Device() : deviceId(), IPAddress(), port(), type(), group(), name() {
  }

  virtual ~Device() throw();
  std::string deviceId;
  std::string IPAddress;
  std::string port;
  std::string type;
  std::string group;
  std::string name;

  _Device__isset __isset;

  void __set_deviceId(const std::string& val);

  void __set_IPAddress(const std::string& val);

  void __set_port(const std::string& val);

  void __set_type(const std::string& val);

  void __set_group(const std::string& val);

  void __set_name(const std::string& val);

  bool operator == (const Device & rhs) const
  {
    if (!(deviceId == rhs.deviceId))
      return false;
    if (!(IPAddress == rhs.IPAddress))
      return false;
    if (!(port == rhs.port))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(group == rhs.group))
      return false;
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const Device &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Device & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const Device& obj);
};

void swap(Device &a, Device &b);

typedef struct _ThriftAgentProcessInfo__isset {
  _ThriftAgentProcessInfo__isset() : name(false), packageName(false), ramUsage(false), cpuUsage(false), sentData(false), receiveData(false), pid(false), type(false), mac(false), timestamp(false), URLs(false) {}
  bool name :1;
  bool packageName :1;
  bool ramUsage :1;
  bool cpuUsage :1;
  bool sentData :1;
  bool receiveData :1;
  bool pid :1;
  bool type :1;
  bool mac :1;
  bool timestamp :1;
  bool URLs :1;
} _ThriftAgentProcessInfo__isset;

class ThriftAgentProcessInfo {
 public:

  static const char* ascii_fingerprint; // = "40456E6D5B67D49BBB9A788AA6949F6F";
  static const uint8_t binary_fingerprint[16]; // = {0x40,0x45,0x6E,0x6D,0x5B,0x67,0xD4,0x9B,0xBB,0x9A,0x78,0x8A,0xA6,0x94,0x9F,0x6F};

  ThriftAgentProcessInfo(const ThriftAgentProcessInfo&);
  ThriftAgentProcessInfo& operator=(const ThriftAgentProcessInfo&);
  ThriftAgentProcessInfo() : name(), packageName(), ramUsage(0), cpuUsage(0), sentData(0), receiveData(0), pid(), type(), mac(), timestamp() {
  }

  virtual ~ThriftAgentProcessInfo() throw();
  std::string name;
  std::string packageName;
  double ramUsage;
  double cpuUsage;
  double sentData;
  double receiveData;
  std::string pid;
  std::string type;
  std::string mac;
  std::string timestamp;
  std::vector<std::string>  URLs;

  _ThriftAgentProcessInfo__isset __isset;

  void __set_name(const std::string& val);

  void __set_packageName(const std::string& val);

  void __set_ramUsage(const double val);

  void __set_cpuUsage(const double val);

  void __set_sentData(const double val);

  void __set_receiveData(const double val);

  void __set_pid(const std::string& val);

  void __set_type(const std::string& val);

  void __set_mac(const std::string& val);

  void __set_timestamp(const std::string& val);

  void __set_URLs(const std::vector<std::string> & val);

  bool operator == (const ThriftAgentProcessInfo & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(packageName == rhs.packageName))
      return false;
    if (!(ramUsage == rhs.ramUsage))
      return false;
    if (!(cpuUsage == rhs.cpuUsage))
      return false;
    if (!(sentData == rhs.sentData))
      return false;
    if (!(receiveData == rhs.receiveData))
      return false;
    if (!(pid == rhs.pid))
      return false;
    if (!(type == rhs.type))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(timestamp == rhs.timestamp))
      return false;
    if (!(URLs == rhs.URLs))
      return false;
    return true;
  }
  bool operator != (const ThriftAgentProcessInfo &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const ThriftAgentProcessInfo & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const ThriftAgentProcessInfo& obj);
};

void swap(ThriftAgentProcessInfo &a, ThriftAgentProcessInfo &b);

typedef struct _myUserAccountDetailsStruct__isset {
  _myUserAccountDetailsStruct__isset() : computerName(false), usri4_name(false), usri4_password_age(false), usri4_priv(false), usri4_flags(false), usri4_usr_comment(false), usri4_parms(false), usri4_last_logon(false), usri4_last_logoff(false), usri4_acct_expires(false), usri4_max_storage(false), usri4_units_per_week(false), usri4_logon_hours(false), usri4_bad_pw_count(false), usri4_num_logons(false), usri4_country_code(false), usri4_code_page(false), usri4_primary_group_id(false), usri4_profile(false), usri4_password_expired(false), usri4_auth_flags(false), mac(false) {}
  bool computerName :1;
  bool usri4_name :1;
  bool usri4_password_age :1;
  bool usri4_priv :1;
  bool usri4_flags :1;
  bool usri4_usr_comment :1;
  bool usri4_parms :1;
  bool usri4_last_logon :1;
  bool usri4_last_logoff :1;
  bool usri4_acct_expires :1;
  bool usri4_max_storage :1;
  bool usri4_units_per_week :1;
  bool usri4_logon_hours :1;
  bool usri4_bad_pw_count :1;
  bool usri4_num_logons :1;
  bool usri4_country_code :1;
  bool usri4_code_page :1;
  bool usri4_primary_group_id :1;
  bool usri4_profile :1;
  bool usri4_password_expired :1;
  bool usri4_auth_flags :1;
  bool mac :1;
} _myUserAccountDetailsStruct__isset;

class myUserAccountDetailsStruct {
 public:

  static const char* ascii_fingerprint; // = "718995DDEEB51481B32A298AFBFBF8DC";
  static const uint8_t binary_fingerprint[16]; // = {0x71,0x89,0x95,0xDD,0xEE,0xB5,0x14,0x81,0xB3,0x2A,0x29,0x8A,0xFB,0xFB,0xF8,0xDC};

  myUserAccountDetailsStruct(const myUserAccountDetailsStruct&);
  myUserAccountDetailsStruct& operator=(const myUserAccountDetailsStruct&);
  myUserAccountDetailsStruct() : computerName(), usri4_name(), usri4_password_age(), usri4_priv(), usri4_flags(), usri4_usr_comment(), usri4_parms(), usri4_last_logon(), usri4_last_logoff(), usri4_acct_expires(), usri4_max_storage(), usri4_units_per_week(), usri4_logon_hours(), usri4_bad_pw_count(), usri4_num_logons(), usri4_country_code(), usri4_code_page(), usri4_primary_group_id(), usri4_profile(), usri4_password_expired(), usri4_auth_flags(), mac() {
  }

  virtual ~myUserAccountDetailsStruct() throw();
  std::string computerName;
  std::string usri4_name;
  std::string usri4_password_age;
  std::string usri4_priv;
  std::string usri4_flags;
  std::string usri4_usr_comment;
  std::string usri4_parms;
  std::string usri4_last_logon;
  std::string usri4_last_logoff;
  std::string usri4_acct_expires;
  std::string usri4_max_storage;
  std::string usri4_units_per_week;
  std::string usri4_logon_hours;
  std::string usri4_bad_pw_count;
  std::string usri4_num_logons;
  std::string usri4_country_code;
  std::string usri4_code_page;
  std::string usri4_primary_group_id;
  std::string usri4_profile;
  std::string usri4_password_expired;
  std::string usri4_auth_flags;
  std::string mac;

  _myUserAccountDetailsStruct__isset __isset;

  void __set_computerName(const std::string& val);

  void __set_usri4_name(const std::string& val);

  void __set_usri4_password_age(const std::string& val);

  void __set_usri4_priv(const std::string& val);

  void __set_usri4_flags(const std::string& val);

  void __set_usri4_usr_comment(const std::string& val);

  void __set_usri4_parms(const std::string& val);

  void __set_usri4_last_logon(const std::string& val);

  void __set_usri4_last_logoff(const std::string& val);

  void __set_usri4_acct_expires(const std::string& val);

  void __set_usri4_max_storage(const std::string& val);

  void __set_usri4_units_per_week(const std::string& val);

  void __set_usri4_logon_hours(const std::string& val);

  void __set_usri4_bad_pw_count(const std::string& val);

  void __set_usri4_num_logons(const std::string& val);

  void __set_usri4_country_code(const std::string& val);

  void __set_usri4_code_page(const std::string& val);

  void __set_usri4_primary_group_id(const std::string& val);

  void __set_usri4_profile(const std::string& val);

  void __set_usri4_password_expired(const std::string& val);

  void __set_usri4_auth_flags(const std::string& val);

  void __set_mac(const std::string& val);

  bool operator == (const myUserAccountDetailsStruct & rhs) const
  {
    if (!(computerName == rhs.computerName))
      return false;
    if (!(usri4_name == rhs.usri4_name))
      return false;
    if (!(usri4_password_age == rhs.usri4_password_age))
      return false;
    if (!(usri4_priv == rhs.usri4_priv))
      return false;
    if (!(usri4_flags == rhs.usri4_flags))
      return false;
    if (!(usri4_usr_comment == rhs.usri4_usr_comment))
      return false;
    if (!(usri4_parms == rhs.usri4_parms))
      return false;
    if (!(usri4_last_logon == rhs.usri4_last_logon))
      return false;
    if (!(usri4_last_logoff == rhs.usri4_last_logoff))
      return false;
    if (!(usri4_acct_expires == rhs.usri4_acct_expires))
      return false;
    if (!(usri4_max_storage == rhs.usri4_max_storage))
      return false;
    if (!(usri4_units_per_week == rhs.usri4_units_per_week))
      return false;
    if (!(usri4_logon_hours == rhs.usri4_logon_hours))
      return false;
    if (!(usri4_bad_pw_count == rhs.usri4_bad_pw_count))
      return false;
    if (!(usri4_num_logons == rhs.usri4_num_logons))
      return false;
    if (!(usri4_country_code == rhs.usri4_country_code))
      return false;
    if (!(usri4_code_page == rhs.usri4_code_page))
      return false;
    if (!(usri4_primary_group_id == rhs.usri4_primary_group_id))
      return false;
    if (!(usri4_profile == rhs.usri4_profile))
      return false;
    if (!(usri4_password_expired == rhs.usri4_password_expired))
      return false;
    if (!(usri4_auth_flags == rhs.usri4_auth_flags))
      return false;
    if (!(mac == rhs.mac))
      return false;
    return true;
  }
  bool operator != (const myUserAccountDetailsStruct &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myUserAccountDetailsStruct & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myUserAccountDetailsStruct& obj);
};

void swap(myUserAccountDetailsStruct &a, myUserAccountDetailsStruct &b);

typedef struct _myRuleInformation__isset {
  _myRuleInformation__isset() : ID(false), Name(false) {}
  bool ID :1;
  bool Name :1;
} _myRuleInformation__isset;

class myRuleInformation {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  myRuleInformation(const myRuleInformation&);
  myRuleInformation& operator=(const myRuleInformation&);
  myRuleInformation() : ID(), Name() {
  }

  virtual ~myRuleInformation() throw();
  std::string ID;
  std::string Name;

  _myRuleInformation__isset __isset;

  void __set_ID(const std::string& val);

  void __set_Name(const std::string& val);

  bool operator == (const myRuleInformation & rhs) const
  {
    if (!(ID == rhs.ID))
      return false;
    if (!(Name == rhs.Name))
      return false;
    return true;
  }
  bool operator != (const myRuleInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myRuleInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myRuleInformation& obj);
};

void swap(myRuleInformation &a, myRuleInformation &b);

typedef struct _mySubject__isset {
  _mySubject__isset() : Security_ID(false), Account_Name(false), Account_Domain(false), Logon_ID(false) {}
  bool Security_ID :1;
  bool Account_Name :1;
  bool Account_Domain :1;
  bool Logon_ID :1;
} _mySubject__isset;

class mySubject {
 public:

  static const char* ascii_fingerprint; // = "C93D890311F28844166CF6E571EB3AC2";
  static const uint8_t binary_fingerprint[16]; // = {0xC9,0x3D,0x89,0x03,0x11,0xF2,0x88,0x44,0x16,0x6C,0xF6,0xE5,0x71,0xEB,0x3A,0xC2};

  mySubject(const mySubject&);
  mySubject& operator=(const mySubject&);
  mySubject() : Security_ID(), Account_Name(), Account_Domain(), Logon_ID() {
  }

  virtual ~mySubject() throw();
  std::string Security_ID;
  std::string Account_Name;
  std::string Account_Domain;
  std::string Logon_ID;

  _mySubject__isset __isset;

  void __set_Security_ID(const std::string& val);

  void __set_Account_Name(const std::string& val);

  void __set_Account_Domain(const std::string& val);

  void __set_Logon_ID(const std::string& val);

  bool operator == (const mySubject & rhs) const
  {
    if (!(Security_ID == rhs.Security_ID))
      return false;
    if (!(Account_Name == rhs.Account_Name))
      return false;
    if (!(Account_Domain == rhs.Account_Domain))
      return false;
    if (!(Logon_ID == rhs.Logon_ID))
      return false;
    return true;
  }
  bool operator != (const mySubject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const mySubject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const mySubject& obj);
};

void swap(mySubject &a, mySubject &b);

typedef struct _myProviderInformation__isset {
  _myProviderInformation__isset() : Provider_ID(false), Provider_Name(false) {}
  bool Provider_ID :1;
  bool Provider_Name :1;
} _myProviderInformation__isset;

class myProviderInformation {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  myProviderInformation(const myProviderInformation&);
  myProviderInformation& operator=(const myProviderInformation&);
  myProviderInformation() : Provider_ID(), Provider_Name() {
  }

  virtual ~myProviderInformation() throw();
  std::string Provider_ID;
  std::string Provider_Name;

  _myProviderInformation__isset __isset;

  void __set_Provider_ID(const std::string& val);

  void __set_Provider_Name(const std::string& val);

  bool operator == (const myProviderInformation & rhs) const
  {
    if (!(Provider_ID == rhs.Provider_ID))
      return false;
    if (!(Provider_Name == rhs.Provider_Name))
      return false;
    return true;
  }
  bool operator != (const myProviderInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myProviderInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myProviderInformation& obj);
};

void swap(myProviderInformation &a, myProviderInformation &b);

typedef struct _myObject__isset {
  _myObject__isset() : Object_Server(false), Object_Type(false), Object_Name(false), Handle_ID(false), Resource_Attributes(false) {}
  bool Object_Server :1;
  bool Object_Type :1;
  bool Object_Name :1;
  bool Handle_ID :1;
  bool Resource_Attributes :1;
} _myObject__isset;

class myObject {
 public:

  static const char* ascii_fingerprint; // = "BFF0E21728CB005F9AA5774A41542B8D";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

  myObject(const myObject&);
  myObject& operator=(const myObject&);
  myObject() : Object_Server(), Object_Type(), Object_Name(), Handle_ID(), Resource_Attributes() {
  }

  virtual ~myObject() throw();
  std::string Object_Server;
  std::string Object_Type;
  std::string Object_Name;
  std::string Handle_ID;
  std::string Resource_Attributes;

  _myObject__isset __isset;

  void __set_Object_Server(const std::string& val);

  void __set_Object_Type(const std::string& val);

  void __set_Object_Name(const std::string& val);

  void __set_Handle_ID(const std::string& val);

  void __set_Resource_Attributes(const std::string& val);

  bool operator == (const myObject & rhs) const
  {
    if (!(Object_Server == rhs.Object_Server))
      return false;
    if (!(Object_Type == rhs.Object_Type))
      return false;
    if (!(Object_Name == rhs.Object_Name))
      return false;
    if (!(Handle_ID == rhs.Handle_ID))
      return false;
    if (!(Resource_Attributes == rhs.Resource_Attributes))
      return false;
    return true;
  }
  bool operator != (const myObject &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myObject & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myObject& obj);
};

void swap(myObject &a, myObject &b);

typedef struct _myProcessInformation__isset {
  _myProcessInformation__isset() : Process_ID(false), Process_Name(false) {}
  bool Process_ID :1;
  bool Process_Name :1;
} _myProcessInformation__isset;

class myProcessInformation {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  myProcessInformation(const myProcessInformation&);
  myProcessInformation& operator=(const myProcessInformation&);
  myProcessInformation() : Process_ID(), Process_Name() {
  }

  virtual ~myProcessInformation() throw();
  std::string Process_ID;
  std::string Process_Name;

  _myProcessInformation__isset __isset;

  void __set_Process_ID(const std::string& val);

  void __set_Process_Name(const std::string& val);

  bool operator == (const myProcessInformation & rhs) const
  {
    if (!(Process_ID == rhs.Process_ID))
      return false;
    if (!(Process_Name == rhs.Process_Name))
      return false;
    return true;
  }
  bool operator != (const myProcessInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myProcessInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myProcessInformation& obj);
};

void swap(myProcessInformation &a, myProcessInformation &b);

typedef struct _myNewLogon__isset {
  _myNewLogon__isset() : Security_ID(false), Account_Name(false), Account_Domain(false), Logon_ID(false), Logon_GUID(false) {}
  bool Security_ID :1;
  bool Account_Name :1;
  bool Account_Domain :1;
  bool Logon_ID :1;
  bool Logon_GUID :1;
} _myNewLogon__isset;

class myNewLogon {
 public:

  static const char* ascii_fingerprint; // = "BFF0E21728CB005F9AA5774A41542B8D";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

  myNewLogon(const myNewLogon&);
  myNewLogon& operator=(const myNewLogon&);
  myNewLogon() : Security_ID(), Account_Name(), Account_Domain(), Logon_ID(), Logon_GUID() {
  }

  virtual ~myNewLogon() throw();
  std::string Security_ID;
  std::string Account_Name;
  std::string Account_Domain;
  std::string Logon_ID;
  std::string Logon_GUID;

  _myNewLogon__isset __isset;

  void __set_Security_ID(const std::string& val);

  void __set_Account_Name(const std::string& val);

  void __set_Account_Domain(const std::string& val);

  void __set_Logon_ID(const std::string& val);

  void __set_Logon_GUID(const std::string& val);

  bool operator == (const myNewLogon & rhs) const
  {
    if (!(Security_ID == rhs.Security_ID))
      return false;
    if (!(Account_Name == rhs.Account_Name))
      return false;
    if (!(Account_Domain == rhs.Account_Domain))
      return false;
    if (!(Logon_ID == rhs.Logon_ID))
      return false;
    if (!(Logon_GUID == rhs.Logon_GUID))
      return false;
    return true;
  }
  bool operator != (const myNewLogon &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myNewLogon & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myNewLogon& obj);
};

void swap(myNewLogon &a, myNewLogon &b);

typedef struct _myNetworkInformation__isset {
  _myNetworkInformation__isset() : Direction(false), Source_Address(false), Source_Port(false), Destination_Address(false), Destination_Port(false), Protocol(false), Workstation_Name(false) {}
  bool Direction :1;
  bool Source_Address :1;
  bool Source_Port :1;
  bool Destination_Address :1;
  bool Destination_Port :1;
  bool Protocol :1;
  bool Workstation_Name :1;
} _myNetworkInformation__isset;

class myNetworkInformation {
 public:

  static const char* ascii_fingerprint; // = "5DA595EAE7ECCE4D6C8D61AD15427AFF";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xA5,0x95,0xEA,0xE7,0xEC,0xCE,0x4D,0x6C,0x8D,0x61,0xAD,0x15,0x42,0x7A,0xFF};

  myNetworkInformation(const myNetworkInformation&);
  myNetworkInformation& operator=(const myNetworkInformation&);
  myNetworkInformation() : Direction(), Source_Address(), Source_Port(), Destination_Address(), Destination_Port(), Protocol(), Workstation_Name() {
  }

  virtual ~myNetworkInformation() throw();
  std::string Direction;
  std::string Source_Address;
  std::string Source_Port;
  std::string Destination_Address;
  std::string Destination_Port;
  std::string Protocol;
  std::string Workstation_Name;

  _myNetworkInformation__isset __isset;

  void __set_Direction(const std::string& val);

  void __set_Source_Address(const std::string& val);

  void __set_Source_Port(const std::string& val);

  void __set_Destination_Address(const std::string& val);

  void __set_Destination_Port(const std::string& val);

  void __set_Protocol(const std::string& val);

  void __set_Workstation_Name(const std::string& val);

  bool operator == (const myNetworkInformation & rhs) const
  {
    if (!(Direction == rhs.Direction))
      return false;
    if (!(Source_Address == rhs.Source_Address))
      return false;
    if (!(Source_Port == rhs.Source_Port))
      return false;
    if (!(Destination_Address == rhs.Destination_Address))
      return false;
    if (!(Destination_Port == rhs.Destination_Port))
      return false;
    if (!(Protocol == rhs.Protocol))
      return false;
    if (!(Workstation_Name == rhs.Workstation_Name))
      return false;
    return true;
  }
  bool operator != (const myNetworkInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myNetworkInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myNetworkInformation& obj);
};

void swap(myNetworkInformation &a, myNetworkInformation &b);

typedef struct _myLogonType__isset {
  _myLogonType__isset() : Logon_Type(false) {}
  bool Logon_Type :1;
} _myLogonType__isset;

class myLogonType {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  myLogonType(const myLogonType&);
  myLogonType& operator=(const myLogonType&);
  myLogonType() : Logon_Type() {
  }

  virtual ~myLogonType() throw();
  std::string Logon_Type;

  _myLogonType__isset __isset;

  void __set_Logon_Type(const std::string& val);

  bool operator == (const myLogonType & rhs) const
  {
    if (!(Logon_Type == rhs.Logon_Type))
      return false;
    return true;
  }
  bool operator != (const myLogonType &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myLogonType & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myLogonType& obj);
};

void swap(myLogonType &a, myLogonType &b);

typedef struct _myLayerInformation__isset {
  _myLayerInformation__isset() : Layer_ID(false), Layer_Name(false), Layer_Runtime_ID(false) {}
  bool Layer_ID :1;
  bool Layer_Name :1;
  bool Layer_Runtime_ID :1;
} _myLayerInformation__isset;

class myLayerInformation {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  myLayerInformation(const myLayerInformation&);
  myLayerInformation& operator=(const myLayerInformation&);
  myLayerInformation() : Layer_ID(), Layer_Name(), Layer_Runtime_ID() {
  }

  virtual ~myLayerInformation() throw();
  std::string Layer_ID;
  std::string Layer_Name;
  std::string Layer_Runtime_ID;

  _myLayerInformation__isset __isset;

  void __set_Layer_ID(const std::string& val);

  void __set_Layer_Name(const std::string& val);

  void __set_Layer_Runtime_ID(const std::string& val);

  bool operator == (const myLayerInformation & rhs) const
  {
    if (!(Layer_ID == rhs.Layer_ID))
      return false;
    if (!(Layer_Name == rhs.Layer_Name))
      return false;
    if (!(Layer_Runtime_ID == rhs.Layer_Runtime_ID))
      return false;
    return true;
  }
  bool operator != (const myLayerInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myLayerInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myLayerInformation& obj);
};

void swap(myLayerInformation &a, myLayerInformation &b);

typedef struct _myImpersonationLevel__isset {
  _myImpersonationLevel__isset() : Impersonation_Level(false) {}
  bool Impersonation_Level :1;
} _myImpersonationLevel__isset;

class myImpersonationLevel {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  myImpersonationLevel(const myImpersonationLevel&);
  myImpersonationLevel& operator=(const myImpersonationLevel&);
  myImpersonationLevel() : Impersonation_Level() {
  }

  virtual ~myImpersonationLevel() throw();
  std::string Impersonation_Level;

  _myImpersonationLevel__isset __isset;

  void __set_Impersonation_Level(const std::string& val);

  bool operator == (const myImpersonationLevel & rhs) const
  {
    if (!(Impersonation_Level == rhs.Impersonation_Level))
      return false;
    return true;
  }
  bool operator != (const myImpersonationLevel &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myImpersonationLevel & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myImpersonationLevel& obj);
};

void swap(myImpersonationLevel &a, myImpersonationLevel &b);

typedef struct _myFilterInformation__isset {
  _myFilterInformation__isset() : Filter_ID(false), Filter_Name(false), Filter_Type(false), Runtime_ID(false), Filter_Runtime_ID(false), Filter_Layer_Name(false), Filter_Layer_Runtime_ID(false) {}
  bool Filter_ID :1;
  bool Filter_Name :1;
  bool Filter_Type :1;
  bool Runtime_ID :1;
  bool Filter_Runtime_ID :1;
  bool Filter_Layer_Name :1;
  bool Filter_Layer_Runtime_ID :1;
} _myFilterInformation__isset;

class myFilterInformation {
 public:

  static const char* ascii_fingerprint; // = "5DA595EAE7ECCE4D6C8D61AD15427AFF";
  static const uint8_t binary_fingerprint[16]; // = {0x5D,0xA5,0x95,0xEA,0xE7,0xEC,0xCE,0x4D,0x6C,0x8D,0x61,0xAD,0x15,0x42,0x7A,0xFF};

  myFilterInformation(const myFilterInformation&);
  myFilterInformation& operator=(const myFilterInformation&);
  myFilterInformation() : Filter_ID(), Filter_Name(), Filter_Type(), Runtime_ID(), Filter_Runtime_ID(), Filter_Layer_Name(), Filter_Layer_Runtime_ID() {
  }

  virtual ~myFilterInformation() throw();
  std::string Filter_ID;
  std::string Filter_Name;
  std::string Filter_Type;
  std::string Runtime_ID;
  std::string Filter_Runtime_ID;
  std::string Filter_Layer_Name;
  std::string Filter_Layer_Runtime_ID;

  _myFilterInformation__isset __isset;

  void __set_Filter_ID(const std::string& val);

  void __set_Filter_Name(const std::string& val);

  void __set_Filter_Type(const std::string& val);

  void __set_Runtime_ID(const std::string& val);

  void __set_Filter_Runtime_ID(const std::string& val);

  void __set_Filter_Layer_Name(const std::string& val);

  void __set_Filter_Layer_Runtime_ID(const std::string& val);

  bool operator == (const myFilterInformation & rhs) const
  {
    if (!(Filter_ID == rhs.Filter_ID))
      return false;
    if (!(Filter_Name == rhs.Filter_Name))
      return false;
    if (!(Filter_Type == rhs.Filter_Type))
      return false;
    if (!(Runtime_ID == rhs.Runtime_ID))
      return false;
    if (!(Filter_Runtime_ID == rhs.Filter_Runtime_ID))
      return false;
    if (!(Filter_Layer_Name == rhs.Filter_Layer_Name))
      return false;
    if (!(Filter_Layer_Runtime_ID == rhs.Filter_Layer_Runtime_ID))
      return false;
    return true;
  }
  bool operator != (const myFilterInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myFilterInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myFilterInformation& obj);
};

void swap(myFilterInformation &a, myFilterInformation &b);

typedef struct _myFailureInformation__isset {
  _myFailureInformation__isset() : Failure_Reason(false), Status(false), Sub_Status(false) {}
  bool Failure_Reason :1;
  bool Status :1;
  bool Sub_Status :1;
} _myFailureInformation__isset;

class myFailureInformation {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  myFailureInformation(const myFailureInformation&);
  myFailureInformation& operator=(const myFailureInformation&);
  myFailureInformation() : Failure_Reason(), Status(), Sub_Status() {
  }

  virtual ~myFailureInformation() throw();
  std::string Failure_Reason;
  std::string Status;
  std::string Sub_Status;

  _myFailureInformation__isset __isset;

  void __set_Failure_Reason(const std::string& val);

  void __set_Status(const std::string& val);

  void __set_Sub_Status(const std::string& val);

  bool operator == (const myFailureInformation & rhs) const
  {
    if (!(Failure_Reason == rhs.Failure_Reason))
      return false;
    if (!(Status == rhs.Status))
      return false;
    if (!(Sub_Status == rhs.Sub_Status))
      return false;
    return true;
  }
  bool operator != (const myFailureInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myFailureInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myFailureInformation& obj);
};

void swap(myFailureInformation &a, myFailureInformation &b);

typedef struct _myErrorInformation__isset {
  _myErrorInformation__isset() : Reason(false) {}
  bool Reason :1;
} _myErrorInformation__isset;

class myErrorInformation {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  myErrorInformation(const myErrorInformation&);
  myErrorInformation& operator=(const myErrorInformation&);
  myErrorInformation() : Reason() {
  }

  virtual ~myErrorInformation() throw();
  std::string Reason;

  _myErrorInformation__isset __isset;

  void __set_Reason(const std::string& val);

  bool operator == (const myErrorInformation & rhs) const
  {
    if (!(Reason == rhs.Reason))
      return false;
    return true;
  }
  bool operator != (const myErrorInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myErrorInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myErrorInformation& obj);
};

void swap(myErrorInformation &a, myErrorInformation &b);

typedef struct _myDetailedAuthenticationInformation__isset {
  _myDetailedAuthenticationInformation__isset() : Logon_Process(false), Authentication_Package(false), Transited_Services(false), Package_Name(false), Key_Length(false) {}
  bool Logon_Process :1;
  bool Authentication_Package :1;
  bool Transited_Services :1;
  bool Package_Name :1;
  bool Key_Length :1;
} _myDetailedAuthenticationInformation__isset;

class myDetailedAuthenticationInformation {
 public:

  static const char* ascii_fingerprint; // = "BFF0E21728CB005F9AA5774A41542B8D";
  static const uint8_t binary_fingerprint[16]; // = {0xBF,0xF0,0xE2,0x17,0x28,0xCB,0x00,0x5F,0x9A,0xA5,0x77,0x4A,0x41,0x54,0x2B,0x8D};

  myDetailedAuthenticationInformation(const myDetailedAuthenticationInformation&);
  myDetailedAuthenticationInformation& operator=(const myDetailedAuthenticationInformation&);
  myDetailedAuthenticationInformation() : Logon_Process(), Authentication_Package(), Transited_Services(), Package_Name(), Key_Length() {
  }

  virtual ~myDetailedAuthenticationInformation() throw();
  std::string Logon_Process;
  std::string Authentication_Package;
  std::string Transited_Services;
  std::string Package_Name;
  std::string Key_Length;

  _myDetailedAuthenticationInformation__isset __isset;

  void __set_Logon_Process(const std::string& val);

  void __set_Authentication_Package(const std::string& val);

  void __set_Transited_Services(const std::string& val);

  void __set_Package_Name(const std::string& val);

  void __set_Key_Length(const std::string& val);

  bool operator == (const myDetailedAuthenticationInformation & rhs) const
  {
    if (!(Logon_Process == rhs.Logon_Process))
      return false;
    if (!(Authentication_Package == rhs.Authentication_Package))
      return false;
    if (!(Transited_Services == rhs.Transited_Services))
      return false;
    if (!(Package_Name == rhs.Package_Name))
      return false;
    if (!(Key_Length == rhs.Key_Length))
      return false;
    return true;
  }
  bool operator != (const myDetailedAuthenticationInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myDetailedAuthenticationInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myDetailedAuthenticationInformation& obj);
};

void swap(myDetailedAuthenticationInformation &a, myDetailedAuthenticationInformation &b);

typedef struct _myChangeInformation__isset {
  _myChangeInformation__isset() : Change_Type(false) {}
  bool Change_Type :1;
} _myChangeInformation__isset;

class myChangeInformation {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  myChangeInformation(const myChangeInformation&);
  myChangeInformation& operator=(const myChangeInformation&);
  myChangeInformation() : Change_Type() {
  }

  virtual ~myChangeInformation() throw();
  std::string Change_Type;

  _myChangeInformation__isset __isset;

  void __set_Change_Type(const std::string& val);

  bool operator == (const myChangeInformation & rhs) const
  {
    if (!(Change_Type == rhs.Change_Type))
      return false;
    return true;
  }
  bool operator != (const myChangeInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myChangeInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myChangeInformation& obj);
};

void swap(myChangeInformation &a, myChangeInformation &b);

typedef struct _myCalloutInformation__isset {
  _myCalloutInformation__isset() : Callout_ID(false), Callout_Name(false) {}
  bool Callout_ID :1;
  bool Callout_Name :1;
} _myCalloutInformation__isset;

class myCalloutInformation {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  myCalloutInformation(const myCalloutInformation&);
  myCalloutInformation& operator=(const myCalloutInformation&);
  myCalloutInformation() : Callout_ID(), Callout_Name() {
  }

  virtual ~myCalloutInformation() throw();
  std::string Callout_ID;
  std::string Callout_Name;

  _myCalloutInformation__isset __isset;

  void __set_Callout_ID(const std::string& val);

  void __set_Callout_Name(const std::string& val);

  bool operator == (const myCalloutInformation & rhs) const
  {
    if (!(Callout_ID == rhs.Callout_ID))
      return false;
    if (!(Callout_Name == rhs.Callout_Name))
      return false;
    return true;
  }
  bool operator != (const myCalloutInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myCalloutInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myCalloutInformation& obj);
};

void swap(myCalloutInformation &a, myCalloutInformation &b);

typedef struct _myApplicationInformation__isset {
  _myApplicationInformation__isset() : Application_Process_ID(false), Application_Name(false) {}
  bool Application_Process_ID :1;
  bool Application_Name :1;
} _myApplicationInformation__isset;

class myApplicationInformation {
 public:

  static const char* ascii_fingerprint; // = "07A9615F837F7D0A952B595DD3020972";
  static const uint8_t binary_fingerprint[16]; // = {0x07,0xA9,0x61,0x5F,0x83,0x7F,0x7D,0x0A,0x95,0x2B,0x59,0x5D,0xD3,0x02,0x09,0x72};

  myApplicationInformation(const myApplicationInformation&);
  myApplicationInformation& operator=(const myApplicationInformation&);
  myApplicationInformation() : Application_Process_ID(), Application_Name() {
  }

  virtual ~myApplicationInformation() throw();
  std::string Application_Process_ID;
  std::string Application_Name;

  _myApplicationInformation__isset __isset;

  void __set_Application_Process_ID(const std::string& val);

  void __set_Application_Name(const std::string& val);

  bool operator == (const myApplicationInformation & rhs) const
  {
    if (!(Application_Process_ID == rhs.Application_Process_ID))
      return false;
    if (!(Application_Name == rhs.Application_Name))
      return false;
    return true;
  }
  bool operator != (const myApplicationInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myApplicationInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myApplicationInformation& obj);
};

void swap(myApplicationInformation &a, myApplicationInformation &b);

typedef struct _myAccountForWhichLogonFailed__isset {
  _myAccountForWhichLogonFailed__isset() : Security_ID(false), Account_Name(false), Account_Domain(false) {}
  bool Security_ID :1;
  bool Account_Name :1;
  bool Account_Domain :1;
} _myAccountForWhichLogonFailed__isset;

class myAccountForWhichLogonFailed {
 public:

  static const char* ascii_fingerprint; // = "AB879940BD15B6B25691265F7384B271";
  static const uint8_t binary_fingerprint[16]; // = {0xAB,0x87,0x99,0x40,0xBD,0x15,0xB6,0xB2,0x56,0x91,0x26,0x5F,0x73,0x84,0xB2,0x71};

  myAccountForWhichLogonFailed(const myAccountForWhichLogonFailed&);
  myAccountForWhichLogonFailed& operator=(const myAccountForWhichLogonFailed&);
  myAccountForWhichLogonFailed() : Security_ID(), Account_Name(), Account_Domain() {
  }

  virtual ~myAccountForWhichLogonFailed() throw();
  std::string Security_ID;
  std::string Account_Name;
  std::string Account_Domain;

  _myAccountForWhichLogonFailed__isset __isset;

  void __set_Security_ID(const std::string& val);

  void __set_Account_Name(const std::string& val);

  void __set_Account_Domain(const std::string& val);

  bool operator == (const myAccountForWhichLogonFailed & rhs) const
  {
    if (!(Security_ID == rhs.Security_ID))
      return false;
    if (!(Account_Name == rhs.Account_Name))
      return false;
    if (!(Account_Domain == rhs.Account_Domain))
      return false;
    return true;
  }
  bool operator != (const myAccountForWhichLogonFailed &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myAccountForWhichLogonFailed & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myAccountForWhichLogonFailed& obj);
};

void swap(myAccountForWhichLogonFailed &a, myAccountForWhichLogonFailed &b);

typedef struct _myAccessRequestInformation__isset {
  _myAccessRequestInformation__isset() : Transaction_ID(false), Accesses(false), Access_Reasons(false), Access_Mask(false), Privileges_Used_For_Access_Check(false), Restricted_SID_Count(false) {}
  bool Transaction_ID :1;
  bool Accesses :1;
  bool Access_Reasons :1;
  bool Access_Mask :1;
  bool Privileges_Used_For_Access_Check :1;
  bool Restricted_SID_Count :1;
} _myAccessRequestInformation__isset;

class myAccessRequestInformation {
 public:

  static const char* ascii_fingerprint; // = "873CB9E5A4C10A7ECE7476FD192F55EE";
  static const uint8_t binary_fingerprint[16]; // = {0x87,0x3C,0xB9,0xE5,0xA4,0xC1,0x0A,0x7E,0xCE,0x74,0x76,0xFD,0x19,0x2F,0x55,0xEE};

  myAccessRequestInformation(const myAccessRequestInformation&);
  myAccessRequestInformation& operator=(const myAccessRequestInformation&);
  myAccessRequestInformation() : Transaction_ID(), Accesses(), Access_Reasons(), Access_Mask(), Privileges_Used_For_Access_Check(), Restricted_SID_Count() {
  }

  virtual ~myAccessRequestInformation() throw();
  std::string Transaction_ID;
  std::string Accesses;
  std::string Access_Reasons;
  std::string Access_Mask;
  std::string Privileges_Used_For_Access_Check;
  std::string Restricted_SID_Count;

  _myAccessRequestInformation__isset __isset;

  void __set_Transaction_ID(const std::string& val);

  void __set_Accesses(const std::string& val);

  void __set_Access_Reasons(const std::string& val);

  void __set_Access_Mask(const std::string& val);

  void __set_Privileges_Used_For_Access_Check(const std::string& val);

  void __set_Restricted_SID_Count(const std::string& val);

  bool operator == (const myAccessRequestInformation & rhs) const
  {
    if (!(Transaction_ID == rhs.Transaction_ID))
      return false;
    if (!(Accesses == rhs.Accesses))
      return false;
    if (!(Access_Reasons == rhs.Access_Reasons))
      return false;
    if (!(Access_Mask == rhs.Access_Mask))
      return false;
    if (!(Privileges_Used_For_Access_Check == rhs.Privileges_Used_For_Access_Check))
      return false;
    if (!(Restricted_SID_Count == rhs.Restricted_SID_Count))
      return false;
    return true;
  }
  bool operator != (const myAccessRequestInformation &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myAccessRequestInformation & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myAccessRequestInformation& obj);
};

void swap(myAccessRequestInformation &a, myAccessRequestInformation &b);

typedef struct _myTimeStamp__isset {
  _myTimeStamp__isset() : month(false), day(false), year(false), hour(false), minute(false), second(false) {}
  bool month :1;
  bool day :1;
  bool year :1;
  bool hour :1;
  bool minute :1;
  bool second :1;
} _myTimeStamp__isset;

class myTimeStamp {
 public:

  static const char* ascii_fingerprint; // = "4BFEB2A4F7E3C310FEEE505404210134";
  static const uint8_t binary_fingerprint[16]; // = {0x4B,0xFE,0xB2,0xA4,0xF7,0xE3,0xC3,0x10,0xFE,0xEE,0x50,0x54,0x04,0x21,0x01,0x34};

  myTimeStamp(const myTimeStamp&);
  myTimeStamp& operator=(const myTimeStamp&);
  myTimeStamp() : month(0), day(0), year(0), hour(0), minute(0), second(0) {
  }

  virtual ~myTimeStamp() throw();
  int16_t month;
  int16_t day;
  int16_t year;
  int16_t hour;
  int16_t minute;
  int16_t second;

  _myTimeStamp__isset __isset;

  void __set_month(const int16_t val);

  void __set_day(const int16_t val);

  void __set_year(const int16_t val);

  void __set_hour(const int16_t val);

  void __set_minute(const int16_t val);

  void __set_second(const int16_t val);

  bool operator == (const myTimeStamp & rhs) const
  {
    if (!(month == rhs.month))
      return false;
    if (!(day == rhs.day))
      return false;
    if (!(year == rhs.year))
      return false;
    if (!(hour == rhs.hour))
      return false;
    if (!(minute == rhs.minute))
      return false;
    if (!(second == rhs.second))
      return false;
    return true;
  }
  bool operator != (const myTimeStamp &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myTimeStamp & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myTimeStamp& obj);
};

void swap(myTimeStamp &a, myTimeStamp &b);

typedef struct _myLogStructure__isset {
  _myLogStructure__isset() : message(false), levelMessageString(false), taskMessageString(false), opCodeMessageString(false), channelMessageString(false), providerMessageString(false), keywords(false), executionProcessID(false), executionThreadID(false), computer(false), EventID(false), mySubject1(false), myProviderInformation1(false), myObject1(false), myNetworkInformation1(false), myLayerInformation1(false), myFilterInformation1(false), myChangeInformation1(false), myCalloutInformation1(false), myApplicationInformation1(false), myAccessRequestInformation1(false), myRuleInformation1(false), myErrorInformation1(false), myProcessInformation1(false), myLogonType1(false), myImpersonationLevel1(false), myAccountForWhichLogonFailed1(false), myFailureInformation1(false), myNewLogon1(false), myDetailedAuthenticationInformation1(false), myTimeStamp1(false), mac(false), eventCategory(false), processName(false) {}
  bool message :1;
  bool levelMessageString :1;
  bool taskMessageString :1;
  bool opCodeMessageString :1;
  bool channelMessageString :1;
  bool providerMessageString :1;
  bool keywords :1;
  bool executionProcessID :1;
  bool executionThreadID :1;
  bool computer :1;
  bool EventID :1;
  bool mySubject1 :1;
  bool myProviderInformation1 :1;
  bool myObject1 :1;
  bool myNetworkInformation1 :1;
  bool myLayerInformation1 :1;
  bool myFilterInformation1 :1;
  bool myChangeInformation1 :1;
  bool myCalloutInformation1 :1;
  bool myApplicationInformation1 :1;
  bool myAccessRequestInformation1 :1;
  bool myRuleInformation1 :1;
  bool myErrorInformation1 :1;
  bool myProcessInformation1 :1;
  bool myLogonType1 :1;
  bool myImpersonationLevel1 :1;
  bool myAccountForWhichLogonFailed1 :1;
  bool myFailureInformation1 :1;
  bool myNewLogon1 :1;
  bool myDetailedAuthenticationInformation1 :1;
  bool myTimeStamp1 :1;
  bool mac :1;
  bool eventCategory :1;
  bool processName :1;
} _myLogStructure__isset;

class myLogStructure {
 public:

  static const char* ascii_fingerprint; // = "BD77504154E7AE11E36E0AAF493D8B66";
  static const uint8_t binary_fingerprint[16]; // = {0xBD,0x77,0x50,0x41,0x54,0xE7,0xAE,0x11,0xE3,0x6E,0x0A,0xAF,0x49,0x3D,0x8B,0x66};

  myLogStructure(const myLogStructure&);
  myLogStructure& operator=(const myLogStructure&);
  myLogStructure() : message(), levelMessageString(), taskMessageString(), opCodeMessageString(), channelMessageString(), providerMessageString(), keywords(), executionProcessID(), executionThreadID(), computer(), EventID(), mac(), eventCategory(), processName() {
  }

  virtual ~myLogStructure() throw();
  std::string message;
  std::string levelMessageString;
  std::string taskMessageString;
  std::string opCodeMessageString;
  std::string channelMessageString;
  std::string providerMessageString;
  std::string keywords;
  std::string executionProcessID;
  std::string executionThreadID;
  std::string computer;
  std::string EventID;
  mySubject mySubject1;
  myProviderInformation myProviderInformation1;
  myObject myObject1;
  myNetworkInformation myNetworkInformation1;
  myLayerInformation myLayerInformation1;
  myFilterInformation myFilterInformation1;
  myChangeInformation myChangeInformation1;
  myCalloutInformation myCalloutInformation1;
  myApplicationInformation myApplicationInformation1;
  myAccessRequestInformation myAccessRequestInformation1;
  myRuleInformation myRuleInformation1;
  myErrorInformation myErrorInformation1;
  myProcessInformation myProcessInformation1;
  myLogonType myLogonType1;
  myImpersonationLevel myImpersonationLevel1;
  myAccountForWhichLogonFailed myAccountForWhichLogonFailed1;
  myFailureInformation myFailureInformation1;
  myNewLogon myNewLogon1;
  myDetailedAuthenticationInformation myDetailedAuthenticationInformation1;
  myTimeStamp myTimeStamp1;
  std::string mac;
  std::string eventCategory;
  std::string processName;

  _myLogStructure__isset __isset;

  void __set_message(const std::string& val);

  void __set_levelMessageString(const std::string& val);

  void __set_taskMessageString(const std::string& val);

  void __set_opCodeMessageString(const std::string& val);

  void __set_channelMessageString(const std::string& val);

  void __set_providerMessageString(const std::string& val);

  void __set_keywords(const std::string& val);

  void __set_executionProcessID(const std::string& val);

  void __set_executionThreadID(const std::string& val);

  void __set_computer(const std::string& val);

  void __set_EventID(const std::string& val);

  void __set_mySubject1(const mySubject& val);

  void __set_myProviderInformation1(const myProviderInformation& val);

  void __set_myObject1(const myObject& val);

  void __set_myNetworkInformation1(const myNetworkInformation& val);

  void __set_myLayerInformation1(const myLayerInformation& val);

  void __set_myFilterInformation1(const myFilterInformation& val);

  void __set_myChangeInformation1(const myChangeInformation& val);

  void __set_myCalloutInformation1(const myCalloutInformation& val);

  void __set_myApplicationInformation1(const myApplicationInformation& val);

  void __set_myAccessRequestInformation1(const myAccessRequestInformation& val);

  void __set_myRuleInformation1(const myRuleInformation& val);

  void __set_myErrorInformation1(const myErrorInformation& val);

  void __set_myProcessInformation1(const myProcessInformation& val);

  void __set_myLogonType1(const myLogonType& val);

  void __set_myImpersonationLevel1(const myImpersonationLevel& val);

  void __set_myAccountForWhichLogonFailed1(const myAccountForWhichLogonFailed& val);

  void __set_myFailureInformation1(const myFailureInformation& val);

  void __set_myNewLogon1(const myNewLogon& val);

  void __set_myDetailedAuthenticationInformation1(const myDetailedAuthenticationInformation& val);

  void __set_myTimeStamp1(const myTimeStamp& val);

  void __set_mac(const std::string& val);

  void __set_eventCategory(const std::string& val);

  void __set_processName(const std::string& val);

  bool operator == (const myLogStructure & rhs) const
  {
    if (!(message == rhs.message))
      return false;
    if (!(levelMessageString == rhs.levelMessageString))
      return false;
    if (!(taskMessageString == rhs.taskMessageString))
      return false;
    if (!(opCodeMessageString == rhs.opCodeMessageString))
      return false;
    if (!(channelMessageString == rhs.channelMessageString))
      return false;
    if (!(providerMessageString == rhs.providerMessageString))
      return false;
    if (!(keywords == rhs.keywords))
      return false;
    if (!(executionProcessID == rhs.executionProcessID))
      return false;
    if (!(executionThreadID == rhs.executionThreadID))
      return false;
    if (!(computer == rhs.computer))
      return false;
    if (!(EventID == rhs.EventID))
      return false;
    if (!(mySubject1 == rhs.mySubject1))
      return false;
    if (!(myProviderInformation1 == rhs.myProviderInformation1))
      return false;
    if (!(myObject1 == rhs.myObject1))
      return false;
    if (!(myNetworkInformation1 == rhs.myNetworkInformation1))
      return false;
    if (!(myLayerInformation1 == rhs.myLayerInformation1))
      return false;
    if (!(myFilterInformation1 == rhs.myFilterInformation1))
      return false;
    if (!(myChangeInformation1 == rhs.myChangeInformation1))
      return false;
    if (!(myCalloutInformation1 == rhs.myCalloutInformation1))
      return false;
    if (!(myApplicationInformation1 == rhs.myApplicationInformation1))
      return false;
    if (!(myAccessRequestInformation1 == rhs.myAccessRequestInformation1))
      return false;
    if (!(myRuleInformation1 == rhs.myRuleInformation1))
      return false;
    if (!(myErrorInformation1 == rhs.myErrorInformation1))
      return false;
    if (!(myProcessInformation1 == rhs.myProcessInformation1))
      return false;
    if (!(myLogonType1 == rhs.myLogonType1))
      return false;
    if (!(myImpersonationLevel1 == rhs.myImpersonationLevel1))
      return false;
    if (!(myAccountForWhichLogonFailed1 == rhs.myAccountForWhichLogonFailed1))
      return false;
    if (!(myFailureInformation1 == rhs.myFailureInformation1))
      return false;
    if (!(myNewLogon1 == rhs.myNewLogon1))
      return false;
    if (!(myDetailedAuthenticationInformation1 == rhs.myDetailedAuthenticationInformation1))
      return false;
    if (!(myTimeStamp1 == rhs.myTimeStamp1))
      return false;
    if (!(mac == rhs.mac))
      return false;
    if (!(eventCategory == rhs.eventCategory))
      return false;
    if (!(processName == rhs.processName))
      return false;
    return true;
  }
  bool operator != (const myLogStructure &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const myLogStructure & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  friend std::ostream& operator<<(std::ostream& out, const myLogStructure& obj);
};

void swap(myLogStructure &a, myLogStructure &b);

} // namespace

#endif
